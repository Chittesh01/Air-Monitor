
STM32Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006518  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08006628  08006628  00007628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a18  08006a18  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006a18  08006a18  00007a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a20  08006a20  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a20  08006a20  00007a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a24  08006a24  00007a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006a28  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  200001d4  08006bfc  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08006bfc  000084a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd3b  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d0  00000000  00000000  00015f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00018008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7d  00000000  00000000  00018eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000c648  00000000  00000000  00019a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000406c  00000000  00000000  0002607d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0002a0e9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004eb0  00000000  00000000  0002a12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000095  00000000  00000000  0002efdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006610 	.word	0x08006610

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006610 	.word	0x08006610

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <microDelay>:
float tCelsius = 0;
float tFahrenheit = 0;
float RH = 0;

void microDelay (uint16_t delay)	// Since prescaler set to 71 with sysclk of 72Mhz, we get a 1Mhz timer
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f4e:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <microDelay+0x2c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000f56:	bf00      	nop
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <microDelay+0x2c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d3f9      	bcc.n	8000f58 <microDelay+0x14>
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	2000028c 	.word	0x2000028c

08000f74 <DHT22_Start>:

uint8_t DHT22_Start (void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
  //GPIO_InitStructPrivate.Pin = DHT22_PIN;				//Already set by GPIO_Init
  //GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
  //GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
  //GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
  //HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate);
  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2110      	movs	r1, #16
 8000f8e:	4827      	ldr	r0, [pc, #156]	@ (800102c <DHT22_Start+0xb8>)
 8000f90:	f001 fb37 	bl	8002602 <HAL_GPIO_WritePin>
  microDelay (1300);   // wait for 1300us
 8000f94:	f240 5014 	movw	r0, #1300	@ 0x514
 8000f98:	f7ff ffd4 	bl	8000f44 <microDelay>
  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	4822      	ldr	r0, [pc, #136]	@ (800102c <DHT22_Start+0xb8>)
 8000fa2:	f001 fb2e 	bl	8002602 <HAL_GPIO_WritePin>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	481e      	ldr	r0, [pc, #120]	@ (800102c <DHT22_Start+0xb8>)
 8000fb4:	f001 f98a 	bl	80022cc <HAL_GPIO_Init>
  microDelay (40);
 8000fb8:	2028      	movs	r0, #40	@ 0x28
 8000fba:	f7ff ffc3 	bl	8000f44 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))
 8000fbe:	2110      	movs	r1, #16
 8000fc0:	481a      	ldr	r0, [pc, #104]	@ (800102c <DHT22_Start+0xb8>)
 8000fc2:	f001 fb07 	bl	80025d4 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10b      	bne.n	8000fe4 <DHT22_Start+0x70>
  {
    microDelay (80);
 8000fcc:	2050      	movs	r0, #80	@ 0x50
 8000fce:	f7ff ffb9 	bl	8000f44 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;
 8000fd2:	2110      	movs	r1, #16
 8000fd4:	4815      	ldr	r0, [pc, #84]	@ (800102c <DHT22_Start+0xb8>)
 8000fd6:	f001 fafd 	bl	80025d4 <HAL_GPIO_ReadPin>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <DHT22_Start+0x70>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000fe4:	f000 fe5e 	bl	8001ca4 <HAL_GetTick>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a11      	ldr	r2, [pc, #68]	@ (8001030 <DHT22_Start+0xbc>)
 8000fec:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000fee:	f000 fe59 	bl	8001ca4 <HAL_GetTick>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a0f      	ldr	r2, [pc, #60]	@ (8001034 <DHT22_Start+0xc0>)
 8000ff6:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8000ff8:	e004      	b.n	8001004 <DHT22_Start+0x90>
  {
    cMillis = HAL_GetTick();
 8000ffa:	f000 fe53 	bl	8001ca4 <HAL_GetTick>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a0c      	ldr	r2, [pc, #48]	@ (8001034 <DHT22_Start+0xc0>)
 8001002:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001004:	2110      	movs	r1, #16
 8001006:	4809      	ldr	r0, [pc, #36]	@ (800102c <DHT22_Start+0xb8>)
 8001008:	f001 fae4 	bl	80025d4 <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d006      	beq.n	8001020 <DHT22_Start+0xac>
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <DHT22_Start+0xbc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	1c9a      	adds	r2, r3, #2
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <DHT22_Start+0xc0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	d8ec      	bhi.n	8000ffa <DHT22_Start+0x86>
  }
  return Response;
 8001020:	7dfb      	ldrb	r3, [r7, #23]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40010c00 	.word	0x40010c00
 8001030:	2000033c 	.word	0x2000033c
 8001034:	20000340 	.word	0x20000340

08001038 <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 800103e:	2300      	movs	r3, #0
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	e063      	b.n	800110c <DHT22_Read+0xd4>
  {
    pMillis = HAL_GetTick();
 8001044:	f000 fe2e 	bl	8001ca4 <HAL_GetTick>
 8001048:	4603      	mov	r3, r0
 800104a:	4a34      	ldr	r2, [pc, #208]	@ (800111c <DHT22_Read+0xe4>)
 800104c:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 800104e:	f000 fe29 	bl	8001ca4 <HAL_GetTick>
 8001052:	4603      	mov	r3, r0
 8001054:	4a32      	ldr	r2, [pc, #200]	@ (8001120 <DHT22_Read+0xe8>)
 8001056:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001058:	e004      	b.n	8001064 <DHT22_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 800105a:	f000 fe23 	bl	8001ca4 <HAL_GetTick>
 800105e:	4603      	mov	r3, r0
 8001060:	4a2f      	ldr	r2, [pc, #188]	@ (8001120 <DHT22_Read+0xe8>)
 8001062:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001064:	2110      	movs	r1, #16
 8001066:	482f      	ldr	r0, [pc, #188]	@ (8001124 <DHT22_Read+0xec>)
 8001068:	f001 fab4 	bl	80025d4 <HAL_GPIO_ReadPin>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d106      	bne.n	8001080 <DHT22_Read+0x48>
 8001072:	4b2a      	ldr	r3, [pc, #168]	@ (800111c <DHT22_Read+0xe4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	1c9a      	adds	r2, r3, #2
 8001078:	4b29      	ldr	r3, [pc, #164]	@ (8001120 <DHT22_Read+0xe8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	d8ec      	bhi.n	800105a <DHT22_Read+0x22>
    }
    microDelay (40);   // if the pin is still high after 28us, then the sensor output is 1 (until 70us), otherwise 0
 8001080:	2028      	movs	r0, #40	@ 0x28
 8001082:	f7ff ff5f 	bl	8000f44 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8001086:	2110      	movs	r1, #16
 8001088:	4826      	ldr	r0, [pc, #152]	@ (8001124 <DHT22_Read+0xec>)
 800108a:	f001 faa3 	bl	80025d4 <HAL_GPIO_ReadPin>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10e      	bne.n	80010b2 <DHT22_Read+0x7a>
      b&= ~(1<<(7-a));
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2201      	movs	r2, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	b25a      	sxtb	r2, r3
 80010a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010aa:	4013      	ands	r3, r2
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	71bb      	strb	r3, [r7, #6]
 80010b0:	e00b      	b.n	80010ca <DHT22_Read+0x92>
    else
      b|= (1<<(7-a));	// 1 left shift by 7-index
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f1c3 0307 	rsb	r3, r3, #7
 80010b8:	2201      	movs	r2, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	b25a      	sxtb	r2, r3
 80010c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 80010ca:	f000 fdeb 	bl	8001ca4 <HAL_GetTick>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a12      	ldr	r2, [pc, #72]	@ (800111c <DHT22_Read+0xe4>)
 80010d2:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80010d4:	f000 fde6 	bl	8001ca4 <HAL_GetTick>
 80010d8:	4603      	mov	r3, r0
 80010da:	4a11      	ldr	r2, [pc, #68]	@ (8001120 <DHT22_Read+0xe8>)
 80010dc:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80010de:	e004      	b.n	80010ea <DHT22_Read+0xb2>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 80010e0:	f000 fde0 	bl	8001ca4 <HAL_GetTick>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001120 <DHT22_Read+0xe8>)
 80010e8:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80010ea:	2110      	movs	r1, #16
 80010ec:	480d      	ldr	r0, [pc, #52]	@ (8001124 <DHT22_Read+0xec>)
 80010ee:	f001 fa71 	bl	80025d4 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <DHT22_Read+0xce>
 80010f8:	4b08      	ldr	r3, [pc, #32]	@ (800111c <DHT22_Read+0xe4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	1c9a      	adds	r2, r3, #2
 80010fe:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <DHT22_Read+0xe8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	429a      	cmp	r2, r3
 8001104:	d8ec      	bhi.n	80010e0 <DHT22_Read+0xa8>
  for (a=0;a<8;a++)
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	3301      	adds	r3, #1
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b07      	cmp	r3, #7
 8001110:	d998      	bls.n	8001044 <DHT22_Read+0xc>
    }
  }
  return b;
 8001112:	79bb      	ldrb	r3, [r7, #6]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000033c 	.word	0x2000033c
 8001120:	20000340 	.word	0x20000340
 8001124:	40010c00 	.word	0x40010c00

08001128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112e:	f000 fd61 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001132:	f000 f939 	bl	80013a8 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  __HAL_RCC_SPI2_CLK_ENABLE();
 8001136:	4b84      	ldr	r3, [pc, #528]	@ (8001348 <main+0x220>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a83      	ldr	r2, [pc, #524]	@ (8001348 <main+0x220>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001140:	61d3      	str	r3, [r2, #28]
 8001142:	4b81      	ldr	r3, [pc, #516]	@ (8001348 <main+0x220>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]

  MX_GPIO_Init();
 800114e:	f000 fa41 	bl	80015d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001152:	f000 fa21 	bl	8001598 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001156:	f000 f9f5 	bl	8001544 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800115a:	f000 f9a3 	bl	80014a4 <MX_TIM1_Init>
  MX_SPI2_Init();
 800115e:	f000 f969 	bl	8001434 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8001162:	487a      	ldr	r0, [pc, #488]	@ (800134c <main+0x224>)
 8001164:	f002 fa64 	bl	8003630 <HAL_TIM_Base_Start>

  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001168:	4b77      	ldr	r3, [pc, #476]	@ (8001348 <main+0x220>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a76      	ldr	r2, [pc, #472]	@ (8001348 <main+0x220>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	6193      	str	r3, [r2, #24]
  RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001174:	4b74      	ldr	r3, [pc, #464]	@ (8001348 <main+0x220>)
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	4a73      	ldr	r2, [pc, #460]	@ (8001348 <main+0x220>)
 800117a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800117e:	61d3      	str	r3, [r2, #28]


  GPIOA->BSRR = GPIO_BSRR_BS5; // LED ON (Set PA5)
 8001180:	4b73      	ldr	r3, [pc, #460]	@ (8001350 <main+0x228>)
 8001182:	2220      	movs	r2, #32
 8001184:	611a      	str	r2, [r3, #16]
  GPIOA->BSRR = GPIO_BSRR_BR5; // LED OFF (Reset PA5)
 8001186:	4b72      	ldr	r3, [pc, #456]	@ (8001350 <main+0x228>)
 8001188:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800118c:	611a      	str	r2, [r3, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(DHT22_Start()) {
 800118e:	f7ff fef1 	bl	8000f74 <DHT22_Start>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 808c 	beq.w	80012b2 <main+0x18a>
		RH1 = DHT22_Read(); // First 8bits of Relative humidity
 800119a:	f7ff ff4d 	bl	8001038 <DHT22_Read>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b6c      	ldr	r3, [pc, #432]	@ (8001354 <main+0x22c>)
 80011a4:	701a      	strb	r2, [r3, #0]
		RH2 = DHT22_Read(); // Second 8bits of Relative humidity
 80011a6:	f7ff ff47 	bl	8001038 <DHT22_Read>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001358 <main+0x230>)
 80011b0:	701a      	strb	r2, [r3, #0]
		TC1 = DHT22_Read(); // First 8bits of Celsius
 80011b2:	f7ff ff41 	bl	8001038 <DHT22_Read>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b68      	ldr	r3, [pc, #416]	@ (800135c <main+0x234>)
 80011bc:	701a      	strb	r2, [r3, #0]
		TC2 = DHT22_Read(); // Second 8bits of Celsius
 80011be:	f7ff ff3b 	bl	8001038 <DHT22_Read>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b66      	ldr	r3, [pc, #408]	@ (8001360 <main+0x238>)
 80011c8:	701a      	strb	r2, [r3, #0]
		SUM = DHT22_Read(); // Check sum
 80011ca:	f7ff ff35 	bl	8001038 <DHT22_Read>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b64      	ldr	r3, [pc, #400]	@ (8001364 <main+0x23c>)
 80011d4:	701a      	strb	r2, [r3, #0]
		CHECK = RH1 + RH2 + TC1 + TC2;
 80011d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001354 <main+0x22c>)
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	4b5f      	ldr	r3, [pc, #380]	@ (8001358 <main+0x230>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b5e      	ldr	r3, [pc, #376]	@ (800135c <main+0x234>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001360 <main+0x238>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001368 <main+0x240>)
 80011f4:	701a      	strb	r2, [r3, #0]
	    if (CHECK == SUM) {
 80011f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001368 <main+0x240>)
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001364 <main+0x23c>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d157      	bne.n	80012b2 <main+0x18a>
	    	//TC1 = 0b10000001;		// uncomment to test for negative
	    	if (TC1>127) {
 8001202:	4b56      	ldr	r3, [pc, #344]	@ (800135c <main+0x234>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b25b      	sxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	da19      	bge.n	8001240 <main+0x118>
	    	  TC1 &= ~(1<<7);
 800120c:	4b53      	ldr	r3, [pc, #332]	@ (800135c <main+0x234>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b51      	ldr	r3, [pc, #324]	@ (800135c <main+0x234>)
 8001218:	701a      	strb	r2, [r3, #0]
	    	  tCelsius = (float)((TC1<<8)|TC2)/-10;
 800121a:	4b50      	ldr	r3, [pc, #320]	@ (800135c <main+0x234>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	4a4f      	ldr	r2, [pc, #316]	@ (8001360 <main+0x238>)
 8001222:	7812      	ldrb	r2, [r2, #0]
 8001224:	4313      	orrs	r3, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fce8 	bl	8000bfc <__aeabi_i2f>
 800122c:	4603      	mov	r3, r0
 800122e:	494f      	ldr	r1, [pc, #316]	@ (800136c <main+0x244>)
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fdeb 	bl	8000e0c <__aeabi_fdiv>
 8001236:	4603      	mov	r3, r0
 8001238:	461a      	mov	r2, r3
 800123a:	4b4d      	ldr	r3, [pc, #308]	@ (8001370 <main+0x248>)
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	e011      	b.n	8001264 <main+0x13c>
			} else {
			  tCelsius = (float)((TC1<<8)|TC2)/10;
 8001240:	4b46      	ldr	r3, [pc, #280]	@ (800135c <main+0x234>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	4a46      	ldr	r2, [pc, #280]	@ (8001360 <main+0x238>)
 8001248:	7812      	ldrb	r2, [r2, #0]
 800124a:	4313      	orrs	r3, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fcd5 	bl	8000bfc <__aeabi_i2f>
 8001252:	4603      	mov	r3, r0
 8001254:	4947      	ldr	r1, [pc, #284]	@ (8001374 <main+0x24c>)
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fdd8 	bl	8000e0c <__aeabi_fdiv>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	4b43      	ldr	r3, [pc, #268]	@ (8001370 <main+0x248>)
 8001262:	601a      	str	r2, [r3, #0]
			}
		  tFahrenheit = tCelsius * 9/5 + 32;
 8001264:	4b42      	ldr	r3, [pc, #264]	@ (8001370 <main+0x248>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4943      	ldr	r1, [pc, #268]	@ (8001378 <main+0x250>)
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fd1a 	bl	8000ca4 <__aeabi_fmul>
 8001270:	4603      	mov	r3, r0
 8001272:	4942      	ldr	r1, [pc, #264]	@ (800137c <main+0x254>)
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fdc9 	bl	8000e0c <__aeabi_fdiv>
 800127a:	4603      	mov	r3, r0
 800127c:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fc07 	bl	8000a94 <__addsf3>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	4b3d      	ldr	r3, [pc, #244]	@ (8001380 <main+0x258>)
 800128c:	601a      	str	r2, [r3, #0]
		  RH = (float) ((RH1<<8)|RH2)/10;
 800128e:	4b31      	ldr	r3, [pc, #196]	@ (8001354 <main+0x22c>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	4a30      	ldr	r2, [pc, #192]	@ (8001358 <main+0x230>)
 8001296:	7812      	ldrb	r2, [r2, #0]
 8001298:	4313      	orrs	r3, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fcae 	bl	8000bfc <__aeabi_i2f>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4934      	ldr	r1, [pc, #208]	@ (8001374 <main+0x24c>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fdb1 	bl	8000e0c <__aeabi_fdiv>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b35      	ldr	r3, [pc, #212]	@ (8001384 <main+0x25c>)
 80012b0:	601a      	str	r2, [r3, #0]
	     }
	  }
	  printf("Temperature: %2.1f degC\n", tCelsius);
 80012b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001370 <main+0x248>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f8b6 	bl	8000428 <__aeabi_f2d>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4831      	ldr	r0, [pc, #196]	@ (8001388 <main+0x260>)
 80012c2:	f003 fa25 	bl	8004710 <iprintf>
	  printf("Temperature: %2.1f degF\n", tFahrenheit);
 80012c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001380 <main+0x258>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f8ac 	bl	8000428 <__aeabi_f2d>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	482d      	ldr	r0, [pc, #180]	@ (800138c <main+0x264>)
 80012d6:	f003 fa1b 	bl	8004710 <iprintf>
	  printf("Humidity: %2.1f%%\n\n", RH);
 80012da:	4b2a      	ldr	r3, [pc, #168]	@ (8001384 <main+0x25c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f8a2 	bl	8000428 <__aeabi_f2d>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4829      	ldr	r0, [pc, #164]	@ (8001390 <main+0x268>)
 80012ea:	f003 fa11 	bl	8004710 <iprintf>
	  data[0] = tCelsius; data[1] = tFahrenheit; data[2] = RH;
 80012ee:	4b20      	ldr	r3, [pc, #128]	@ (8001370 <main+0x248>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a28      	ldr	r2, [pc, #160]	@ (8001394 <main+0x26c>)
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b22      	ldr	r3, [pc, #136]	@ (8001380 <main+0x258>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a26      	ldr	r2, [pc, #152]	@ (8001394 <main+0x26c>)
 80012fc:	6053      	str	r3, [r2, #4]
 80012fe:	4b21      	ldr	r3, [pc, #132]	@ (8001384 <main+0x25c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a24      	ldr	r2, [pc, #144]	@ (8001394 <main+0x26c>)
 8001304:	6093      	str	r3, [r2, #8]
	  memcpy(buffer, data, sizeof(data));
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <main+0x270>)
 8001308:	4a22      	ldr	r2, [pc, #136]	@ (8001394 <main+0x26c>)
 800130a:	ca07      	ldmia	r2, {r0, r1, r2}
 800130c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	  //SPI2->CR1 &= SPI_CR1_SPE;  // Enable SPI2

	  char string[] = "Hello World";
 8001310:	4a22      	ldr	r2, [pc, #136]	@ (800139c <main+0x274>)
 8001312:	463b      	mov	r3, r7
 8001314:	ca07      	ldmia	r2, {r0, r1, r2}
 8001316:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  HAL_SPI_Transmit(&hspi2, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
 800131a:	463b      	mov	r3, r7
 800131c:	4618      	mov	r0, r3
 800131e:	f7fe ff17 	bl	8000150 <strlen>
 8001322:	4603      	mov	r3, r0
 8001324:	b29a      	uxth	r2, r3
 8001326:	4639      	mov	r1, r7
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	481c      	ldr	r0, [pc, #112]	@ (80013a0 <main+0x278>)
 800132e:	f001 fe37 	bl	8002fa0 <HAL_SPI_Transmit>

	  SPI2->CR1 &= ~SPI_CR1_SPE;  // Disable SPI2
 8001332:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <main+0x27c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a1b      	ldr	r2, [pc, #108]	@ (80013a4 <main+0x27c>)
 8001338:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800133c:	6013      	str	r3, [r2, #0]

	  HAL_Delay(1000);
 800133e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001342:	f000 fcb9 	bl	8001cb8 <HAL_Delay>
  {
 8001346:	e722      	b.n	800118e <main+0x66>
 8001348:	40021000 	.word	0x40021000
 800134c:	2000028c 	.word	0x2000028c
 8001350:	40010800 	.word	0x40010800
 8001354:	20000334 	.word	0x20000334
 8001358:	20000335 	.word	0x20000335
 800135c:	20000336 	.word	0x20000336
 8001360:	20000337 	.word	0x20000337
 8001364:	20000338 	.word	0x20000338
 8001368:	20000339 	.word	0x20000339
 800136c:	c1200000 	.word	0xc1200000
 8001370:	20000344 	.word	0x20000344
 8001374:	41200000 	.word	0x41200000
 8001378:	41100000 	.word	0x41100000
 800137c:	40a00000 	.word	0x40a00000
 8001380:	20000348 	.word	0x20000348
 8001384:	2000034c 	.word	0x2000034c
 8001388:	08006628 	.word	0x08006628
 800138c:	08006644 	.word	0x08006644
 8001390:	08006660 	.word	0x08006660
 8001394:	2000031c 	.word	0x2000031c
 8001398:	20000328 	.word	0x20000328
 800139c:	08006674 	.word	0x08006674
 80013a0:	200001f0 	.word	0x200001f0
 80013a4:	40003800 	.word	0x40003800

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b090      	sub	sp, #64	@ 0x40
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 0318 	add.w	r3, r7, #24
 80013b2:	2228      	movs	r2, #40	@ 0x28
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 f9ff 	bl	80047ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d8:	2301      	movs	r3, #1
 80013da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013dc:	2302      	movs	r3, #2
 80013de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013e6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80013ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ec:	f107 0318 	add.w	r3, r7, #24
 80013f0:	4618      	mov	r0, r3
 80013f2:	f001 f941 	bl	8002678 <HAL_RCC_OscConfig>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013fc:	f000 f998 	bl	8001730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001400:	230f      	movs	r3, #15
 8001402:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001404:	2302      	movs	r3, #2
 8001406:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800140c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001410:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2102      	movs	r1, #2
 800141a:	4618      	mov	r0, r3
 800141c:	f001 fbae 	bl	8002b7c <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001426:	f000 f983 	bl	8001730 <Error_Handler>
  }
}
 800142a:	bf00      	nop
 800142c:	3740      	adds	r7, #64	@ 0x40
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001438:	4b18      	ldr	r3, [pc, #96]	@ (800149c <MX_SPI2_Init+0x68>)
 800143a:	4a19      	ldr	r2, [pc, #100]	@ (80014a0 <MX_SPI2_Init+0x6c>)
 800143c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800143e:	4b17      	ldr	r3, [pc, #92]	@ (800149c <MX_SPI2_Init+0x68>)
 8001440:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001444:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <MX_SPI2_Init+0x68>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800144c:	4b13      	ldr	r3, [pc, #76]	@ (800149c <MX_SPI2_Init+0x68>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001452:	4b12      	ldr	r3, [pc, #72]	@ (800149c <MX_SPI2_Init+0x68>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001458:	4b10      	ldr	r3, [pc, #64]	@ (800149c <MX_SPI2_Init+0x68>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800145e:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <MX_SPI2_Init+0x68>)
 8001460:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001464:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001466:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <MX_SPI2_Init+0x68>)
 8001468:	2230      	movs	r2, #48	@ 0x30
 800146a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <MX_SPI2_Init+0x68>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <MX_SPI2_Init+0x68>)
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001478:	4b08      	ldr	r3, [pc, #32]	@ (800149c <MX_SPI2_Init+0x68>)
 800147a:	2200      	movs	r2, #0
 800147c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800147e:	4b07      	ldr	r3, [pc, #28]	@ (800149c <MX_SPI2_Init+0x68>)
 8001480:	220a      	movs	r2, #10
 8001482:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_SPI2_Init+0x68>)
 8001486:	f001 fd07 	bl	8002e98 <HAL_SPI_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8001490:	f000 f94e 	bl	8001730 <Error_Handler>
    while(1){}
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <MX_SPI2_Init+0x60>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200001f0 	.word	0x200001f0
 80014a0:	40003800 	.word	0x40003800

080014a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b8:	463b      	mov	r3, r7
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014c0:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <MX_TIM1_Init+0x98>)
 80014c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001540 <MX_TIM1_Init+0x9c>)
 80014c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <MX_TIM1_Init+0x98>)
 80014c8:	2247      	movs	r2, #71	@ 0x47
 80014ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	@ (800153c <MX_TIM1_Init+0x98>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014d2:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <MX_TIM1_Init+0x98>)
 80014d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014da:	4b18      	ldr	r3, [pc, #96]	@ (800153c <MX_TIM1_Init+0x98>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e0:	4b16      	ldr	r3, [pc, #88]	@ (800153c <MX_TIM1_Init+0x98>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <MX_TIM1_Init+0x98>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014ec:	4813      	ldr	r0, [pc, #76]	@ (800153c <MX_TIM1_Init+0x98>)
 80014ee:	f002 f850 	bl	8003592 <HAL_TIM_Base_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014f8:	f000 f91a 	bl	8001730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001500:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	4619      	mov	r1, r3
 8001508:	480c      	ldr	r0, [pc, #48]	@ (800153c <MX_TIM1_Init+0x98>)
 800150a:	f002 f8db 	bl	80036c4 <HAL_TIM_ConfigClockSource>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001514:	f000 f90c 	bl	8001730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001520:	463b      	mov	r3, r7
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	@ (800153c <MX_TIM1_Init+0x98>)
 8001526:	f002 fa99 	bl	8003a5c <HAL_TIMEx_MasterConfigSynchronization>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001530:	f000 f8fe 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	2000028c 	.word	0x2000028c
 8001540:	40012c00 	.word	0x40012c00

08001544 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <MX_USART2_UART_Init+0x4c>)
 800154a:	4a12      	ldr	r2, [pc, #72]	@ (8001594 <MX_USART2_UART_Init+0x50>)
 800154c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <MX_USART2_UART_Init+0x4c>)
 8001550:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001554:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001556:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <MX_USART2_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <MX_USART2_UART_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <MX_USART2_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001568:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <MX_USART2_UART_Init+0x4c>)
 800156a:	220c      	movs	r2, #12
 800156c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <MX_USART2_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <MX_USART2_UART_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	@ (8001590 <MX_USART2_UART_Init+0x4c>)
 800157c:	f002 facc 	bl	8003b18 <HAL_UART_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001586:	f000 f8d3 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200002d4 	.word	0x200002d4
 8001594:	40004400 	.word	0x40004400

08001598 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800159e:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <MX_DMA_Init+0x38>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	4a0b      	ldr	r2, [pc, #44]	@ (80015d0 <MX_DMA_Init+0x38>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6153      	str	r3, [r2, #20]
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <MX_DMA_Init+0x38>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	200f      	movs	r0, #15
 80015bc:	f000 fc77 	bl	8001eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015c0:	200f      	movs	r0, #15
 80015c2:	f000 fc90 	bl	8001ee6 <HAL_NVIC_EnableIRQ>

}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000

080015d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e8:	4b4c      	ldr	r3, [pc, #304]	@ (800171c <MX_GPIO_Init+0x148>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a4b      	ldr	r2, [pc, #300]	@ (800171c <MX_GPIO_Init+0x148>)
 80015ee:	f043 0310 	orr.w	r3, r3, #16
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b49      	ldr	r3, [pc, #292]	@ (800171c <MX_GPIO_Init+0x148>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001600:	4b46      	ldr	r3, [pc, #280]	@ (800171c <MX_GPIO_Init+0x148>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a45      	ldr	r2, [pc, #276]	@ (800171c <MX_GPIO_Init+0x148>)
 8001606:	f043 0320 	orr.w	r3, r3, #32
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b43      	ldr	r3, [pc, #268]	@ (800171c <MX_GPIO_Init+0x148>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0320 	and.w	r3, r3, #32
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	4b40      	ldr	r3, [pc, #256]	@ (800171c <MX_GPIO_Init+0x148>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a3f      	ldr	r2, [pc, #252]	@ (800171c <MX_GPIO_Init+0x148>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b3d      	ldr	r3, [pc, #244]	@ (800171c <MX_GPIO_Init+0x148>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001630:	4b3a      	ldr	r3, [pc, #232]	@ (800171c <MX_GPIO_Init+0x148>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a39      	ldr	r2, [pc, #228]	@ (800171c <MX_GPIO_Init+0x148>)
 8001636:	f043 0308 	orr.w	r3, r3, #8
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b37      	ldr	r3, [pc, #220]	@ (800171c <MX_GPIO_Init+0x148>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	2120      	movs	r1, #32
 800164c:	4834      	ldr	r0, [pc, #208]	@ (8001720 <MX_GPIO_Init+0x14c>)
 800164e:	f000 ffd8 	bl	8002602 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	2110      	movs	r1, #16
 8001656:	4833      	ldr	r0, [pc, #204]	@ (8001724 <MX_GPIO_Init+0x150>)
 8001658:	f000 ffd3 	bl	8002602 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800165c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001662:	4b31      	ldr	r3, [pc, #196]	@ (8001728 <MX_GPIO_Init+0x154>)
 8001664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	4619      	mov	r1, r3
 8001670:	482e      	ldr	r0, [pc, #184]	@ (800172c <MX_GPIO_Init+0x158>)
 8001672:	f000 fe2b 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001676:	2320      	movs	r3, #32
 8001678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2302      	movs	r3, #2
 8001684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	4619      	mov	r1, r3
 800168c:	4824      	ldr	r0, [pc, #144]	@ (8001720 <MX_GPIO_Init+0x14c>)
 800168e:	f000 fe1d 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001692:	2310      	movs	r3, #16
 8001694:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2302      	movs	r3, #2
 80016a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	f107 0310 	add.w	r3, r7, #16
 80016a6:	4619      	mov	r1, r3
 80016a8:	481e      	ldr	r0, [pc, #120]	@ (8001724 <MX_GPIO_Init+0x150>)
 80016aa:	f000 fe0f 	bl	80022cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	2028      	movs	r0, #40	@ 0x28
 80016b4:	f000 fbfb 	bl	8001eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016b8:	2028      	movs	r0, #40	@ 0x28
 80016ba:	f000 fc14 	bl	8001ee6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */	//SPI GPIO Initialisation

  // SCK Pin
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;  // Alternate Function, Push-Pull
 80016c4:	2302      	movs	r3, #2
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;  // High Speed for SPI
 80016c8:	2303      	movs	r3, #3
 80016ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	4619      	mov	r1, r3
 80016d6:	4813      	ldr	r0, [pc, #76]	@ (8001724 <MX_GPIO_Init+0x150>)
 80016d8:	f000 fdf8 	bl	80022cc <HAL_GPIO_Init>

  // MOSI Pin
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f107 0310 	add.w	r3, r7, #16
 80016e6:	4619      	mov	r1, r3
 80016e8:	480e      	ldr	r0, [pc, #56]	@ (8001724 <MX_GPIO_Init+0x150>)
 80016ea:	f000 fdef 	bl	80022cc <HAL_GPIO_Init>

  // MISO Pin (optional, if using bi-directional data)
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	4619      	mov	r1, r3
 80016fa:	480a      	ldr	r0, [pc, #40]	@ (8001724 <MX_GPIO_Init+0x150>)
 80016fc:	f000 fde6 	bl	80022cc <HAL_GPIO_Init>

  // NSS Pin
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001700:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001704:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	@ (8001724 <MX_GPIO_Init+0x150>)
 800170e:	f000 fddd 	bl	80022cc <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001712:	bf00      	nop
 8001714:	3720      	adds	r7, #32
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000
 8001720:	40010800 	.word	0x40010800
 8001724:	40010c00 	.word	0x40010c00
 8001728:	10110000 	.word	0x10110000
 800172c:	40011000 	.word	0x40011000

08001730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <Error_Handler+0x8>

0800173c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <HAL_MspInit+0x5c>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	4a14      	ldr	r2, [pc, #80]	@ (8001798 <HAL_MspInit+0x5c>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6193      	str	r3, [r2, #24]
 800174e:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <HAL_MspInit+0x5c>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <HAL_MspInit+0x5c>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4a0e      	ldr	r2, [pc, #56]	@ (8001798 <HAL_MspInit+0x5c>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001764:	61d3      	str	r3, [r2, #28]
 8001766:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <HAL_MspInit+0x5c>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001772:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <HAL_MspInit+0x60>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	4a04      	ldr	r2, [pc, #16]	@ (800179c <HAL_MspInit+0x60>)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000

080017a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001870 <HAL_SPI_MspInit+0xd0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d152      	bne.n	8001866 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001874 <HAL_SPI_MspInit+0xd4>)
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001874 <HAL_SPI_MspInit+0xd4>)
 80017c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ca:	61d3      	str	r3, [r2, #28]
 80017cc:	4b29      	ldr	r3, [pc, #164]	@ (8001874 <HAL_SPI_MspInit+0xd4>)
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d8:	4b26      	ldr	r3, [pc, #152]	@ (8001874 <HAL_SPI_MspInit+0xd4>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a25      	ldr	r2, [pc, #148]	@ (8001874 <HAL_SPI_MspInit+0xd4>)
 80017de:	f043 0308 	orr.w	r3, r3, #8
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b23      	ldr	r3, [pc, #140]	@ (8001874 <HAL_SPI_MspInit+0xd4>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80017f0:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80017f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	f107 0310 	add.w	r3, r7, #16
 8001802:	4619      	mov	r1, r3
 8001804:	481c      	ldr	r0, [pc, #112]	@ (8001878 <HAL_SPI_MspInit+0xd8>)
 8001806:	f000 fd61 	bl	80022cc <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800180a:	4b1c      	ldr	r3, [pc, #112]	@ (800187c <HAL_SPI_MspInit+0xdc>)
 800180c:	4a1c      	ldr	r2, [pc, #112]	@ (8001880 <HAL_SPI_MspInit+0xe0>)
 800180e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001810:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <HAL_SPI_MspInit+0xdc>)
 8001812:	2210      	movs	r2, #16
 8001814:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001816:	4b19      	ldr	r3, [pc, #100]	@ (800187c <HAL_SPI_MspInit+0xdc>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800181c:	4b17      	ldr	r3, [pc, #92]	@ (800187c <HAL_SPI_MspInit+0xdc>)
 800181e:	2280      	movs	r2, #128	@ 0x80
 8001820:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001822:	4b16      	ldr	r3, [pc, #88]	@ (800187c <HAL_SPI_MspInit+0xdc>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001828:	4b14      	ldr	r3, [pc, #80]	@ (800187c <HAL_SPI_MspInit+0xdc>)
 800182a:	2200      	movs	r2, #0
 800182c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800182e:	4b13      	ldr	r3, [pc, #76]	@ (800187c <HAL_SPI_MspInit+0xdc>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001834:	4b11      	ldr	r3, [pc, #68]	@ (800187c <HAL_SPI_MspInit+0xdc>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800183a:	4810      	ldr	r0, [pc, #64]	@ (800187c <HAL_SPI_MspInit+0xdc>)
 800183c:	f000 fb6e 	bl	8001f1c <HAL_DMA_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8001846:	f7ff ff73 	bl	8001730 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a0b      	ldr	r2, [pc, #44]	@ (800187c <HAL_SPI_MspInit+0xdc>)
 800184e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001850:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <HAL_SPI_MspInit+0xdc>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	2024      	movs	r0, #36	@ 0x24
 800185c:	f000 fb27 	bl	8001eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001860:	2024      	movs	r0, #36	@ 0x24
 8001862:	f000 fb40 	bl	8001ee6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001866:	bf00      	nop
 8001868:	3720      	adds	r7, #32
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40003800 	.word	0x40003800
 8001874:	40021000 	.word	0x40021000
 8001878:	40010c00 	.word	0x40010c00
 800187c:	20000248 	.word	0x20000248
 8001880:	40020058 	.word	0x40020058

08001884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a09      	ldr	r2, [pc, #36]	@ (80018b8 <HAL_TIM_Base_MspInit+0x34>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d10b      	bne.n	80018ae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <HAL_TIM_Base_MspInit+0x38>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	4a08      	ldr	r2, [pc, #32]	@ (80018bc <HAL_TIM_Base_MspInit+0x38>)
 800189c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018a0:	6193      	str	r3, [r2, #24]
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_TIM_Base_MspInit+0x38>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	40012c00 	.word	0x40012c00
 80018bc:	40021000 	.word	0x40021000

080018c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a15      	ldr	r2, [pc, #84]	@ (8001930 <HAL_UART_MspInit+0x70>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d123      	bne.n	8001928 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018e0:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <HAL_UART_MspInit+0x74>)
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	4a13      	ldr	r2, [pc, #76]	@ (8001934 <HAL_UART_MspInit+0x74>)
 80018e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ea:	61d3      	str	r3, [r2, #28]
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <HAL_UART_MspInit+0x74>)
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <HAL_UART_MspInit+0x74>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001934 <HAL_UART_MspInit+0x74>)
 80018fe:	f043 0304 	orr.w	r3, r3, #4
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <HAL_UART_MspInit+0x74>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001910:	230c      	movs	r3, #12
 8001912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2302      	movs	r3, #2
 800191a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	4619      	mov	r1, r3
 8001922:	4805      	ldr	r0, [pc, #20]	@ (8001938 <HAL_UART_MspInit+0x78>)
 8001924:	f000 fcd2 	bl	80022cc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001928:	bf00      	nop
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40004400 	.word	0x40004400
 8001934:	40021000 	.word	0x40021000
 8001938:	40010800 	.word	0x40010800

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <NMI_Handler+0x4>

08001944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <MemManage_Handler+0x4>

08001954 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <UsageFault_Handler+0x4>

08001964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198c:	f000 f978 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}

08001994 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001998:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <DMA1_Channel5_IRQHandler+0x10>)
 800199a:	f000 fb91 	bl	80020c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000248 	.word	0x20000248

080019a8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80019ac:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <SPI2_IRQHandler+0x10>)
 80019ae:	f001 fc3b 	bl	8003228 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200001f0 	.word	0x200001f0

080019bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80019c4:	f000 fe36 	bl	8002634 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80019d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <ITM_SendChar+0x44>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a0d      	ldr	r2, [pc, #52]	@ (8001a10 <ITM_SendChar+0x44>)
 80019dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019e0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80019e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <ITM_SendChar+0x48>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001a14 <ITM_SendChar+0x48>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80019ee:	bf00      	nop
 80019f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f8      	beq.n	80019f0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80019fe:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	6013      	str	r3, [r2, #0]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	e000edfc 	.word	0xe000edfc
 8001a14:	e0000e00 	.word	0xe0000e00

08001a18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
	return 1;
 8001a1c:	2301      	movs	r3, #1
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <_kill>:

int _kill(int pid, int sig)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a30:	f002 ff16 	bl	8004860 <__errno>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2216      	movs	r2, #22
 8001a38:	601a      	str	r2, [r3, #0]
	return -1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_exit>:

void _exit (int status)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a4e:	f04f 31ff 	mov.w	r1, #4294967295
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffe7 	bl	8001a26 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <_exit+0x12>

08001a5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e00a      	b.n	8001a84 <_read+0x28>
	{
		*ptr++ = (char)__io_getchar();
 8001a6e:	f3af 8000 	nop.w
 8001a72:	4601      	mov	r1, r0
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	60ba      	str	r2, [r7, #8]
 8001a7a:	b2ca      	uxtb	r2, r1
 8001a7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3301      	adds	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dbf0      	blt.n	8001a6e <_read+0x12>
	}

return len;
 8001a8c:	687b      	ldr	r3, [r7, #4]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	e009      	b.n	8001abc <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	60ba      	str	r2, [r7, #8]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff8b 	bl	80019cc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf1      	blt.n	8001aa8 <_write+0x12>
	}
	return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_close>:

int _close(int file)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001af4:	605a      	str	r2, [r3, #4]
	return 0;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <_isatty>:

int _isatty(int file)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
	return 1;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
	return 0;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
	...

08001b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	4a14      	ldr	r2, [pc, #80]	@ (8001b8c <_sbrk+0x5c>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <_sbrk+0x60>)
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b44:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <_sbrk+0x64>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	@ (8001b98 <_sbrk+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d207      	bcs.n	8001b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b60:	f002 fe7e 	bl	8004860 <__errno>
 8001b64:	4603      	mov	r3, r0
 8001b66:	220c      	movs	r2, #12
 8001b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a05      	ldr	r2, [pc, #20]	@ (8001b94 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20005000 	.word	0x20005000
 8001b90:	00000400 	.word	0x00000400
 8001b94:	20000350 	.word	0x20000350
 8001b98:	200004a8 	.word	0x200004a8

08001b9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba8:	f7ff fff8 	bl	8001b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bac:	480b      	ldr	r0, [pc, #44]	@ (8001bdc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bae:	490c      	ldr	r1, [pc, #48]	@ (8001be0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bb0:	4a0c      	ldr	r2, [pc, #48]	@ (8001be4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a09      	ldr	r2, [pc, #36]	@ (8001be8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bc4:	4c09      	ldr	r4, [pc, #36]	@ (8001bec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f002 fe4b 	bl	800486c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bd6:	f7ff faa7 	bl	8001128 <main>
  bx lr
 8001bda:	4770      	bx	lr
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001be4:	08006a28 	.word	0x08006a28
  ldr r2, =_sbss
 8001be8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001bec:	200004a4 	.word	0x200004a4

08001bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC1_2_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf8:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <HAL_Init+0x28>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	@ (8001c1c <HAL_Init+0x28>)
 8001bfe:	f043 0310 	orr.w	r3, r3, #16
 8001c02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f000 f947 	bl	8001e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f000 f808 	bl	8001c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c10:	f7ff fd94 	bl	800173c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40022000 	.word	0x40022000

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c28:	4b12      	ldr	r3, [pc, #72]	@ (8001c74 <HAL_InitTick+0x54>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_InitTick+0x58>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f95f 	bl	8001f02 <HAL_SYSTICK_Config>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00e      	b.n	8001c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d80a      	bhi.n	8001c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c54:	2200      	movs	r2, #0
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f000 f927 	bl	8001eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c60:	4a06      	ldr	r2, [pc, #24]	@ (8001c7c <HAL_InitTick+0x5c>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000008 	.word	0x20000008
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_IncTick+0x1c>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <HAL_IncTick+0x20>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a03      	ldr	r2, [pc, #12]	@ (8001ca0 <HAL_IncTick+0x20>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	20000354 	.word	0x20000354

08001ca4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca8:	4b02      	ldr	r3, [pc, #8]	@ (8001cb4 <HAL_GetTick+0x10>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000354 	.word	0x20000354

08001cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff fff0 	bl	8001ca4 <HAL_GetTick>
 8001cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd0:	d005      	beq.n	8001cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cfc <HAL_Delay+0x44>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cde:	bf00      	nop
 8001ce0:	f7ff ffe0 	bl	8001ca4 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d8f7      	bhi.n	8001ce0 <HAL_Delay+0x28>
  {
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000008 	.word	0x20000008

08001d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d32:	4a04      	ldr	r2, [pc, #16]	@ (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	60d3      	str	r3, [r2, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d4c:	4b04      	ldr	r3, [pc, #16]	@ (8001d60 <__NVIC_GetPriorityGrouping+0x18>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 0307 	and.w	r3, r3, #7
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	db0b      	blt.n	8001d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	4906      	ldr	r1, [pc, #24]	@ (8001d98 <__NVIC_EnableIRQ+0x34>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	2001      	movs	r0, #1
 8001d86:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	e000e100 	.word	0xe000e100

08001d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	6039      	str	r1, [r7, #0]
 8001da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	db0a      	blt.n	8001dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	490c      	ldr	r1, [pc, #48]	@ (8001de8 <__NVIC_SetPriority+0x4c>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	0112      	lsls	r2, r2, #4
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc4:	e00a      	b.n	8001ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4908      	ldr	r1, [pc, #32]	@ (8001dec <__NVIC_SetPriority+0x50>)
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	3b04      	subs	r3, #4
 8001dd4:	0112      	lsls	r2, r2, #4
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	440b      	add	r3, r1
 8001dda:	761a      	strb	r2, [r3, #24]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000e100 	.word	0xe000e100
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	@ 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f1c3 0307 	rsb	r3, r3, #7
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	bf28      	it	cs
 8001e0e:	2304      	movcs	r3, #4
 8001e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3304      	adds	r3, #4
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d902      	bls.n	8001e20 <NVIC_EncodePriority+0x30>
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3b03      	subs	r3, #3
 8001e1e:	e000      	b.n	8001e22 <NVIC_EncodePriority+0x32>
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	f04f 32ff 	mov.w	r2, #4294967295
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	401a      	ands	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e38:	f04f 31ff 	mov.w	r1, #4294967295
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	43d9      	mvns	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	4313      	orrs	r3, r2
         );
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3724      	adds	r7, #36	@ 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e64:	d301      	bcc.n	8001e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00f      	b.n	8001e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <SysTick_Config+0x40>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e72:	210f      	movs	r1, #15
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f7ff ff90 	bl	8001d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <SysTick_Config+0x40>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e82:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <SysTick_Config+0x40>)
 8001e84:	2207      	movs	r2, #7
 8001e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	e000e010 	.word	0xe000e010

08001e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff2d 	bl	8001d00 <__NVIC_SetPriorityGrouping>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec0:	f7ff ff42 	bl	8001d48 <__NVIC_GetPriorityGrouping>
 8001ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	6978      	ldr	r0, [r7, #20]
 8001ecc:	f7ff ff90 	bl	8001df0 <NVIC_EncodePriority>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff5f 	bl	8001d9c <__NVIC_SetPriority>
}
 8001ede:	bf00      	nop
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff35 	bl	8001d64 <__NVIC_EnableIRQ>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff ffa2 	bl	8001e54 <SysTick_Config>
 8001f10:	4603      	mov	r3, r0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e043      	b.n	8001fba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b22      	ldr	r3, [pc, #136]	@ (8001fc4 <HAL_DMA_Init+0xa8>)
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4a22      	ldr	r2, [pc, #136]	@ (8001fc8 <HAL_DMA_Init+0xac>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	009a      	lsls	r2, r3, #2
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8001fcc <HAL_DMA_Init+0xb0>)
 8001f4e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f66:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001f6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	bffdfff8 	.word	0xbffdfff8
 8001fc8:	cccccccd 	.word	0xcccccccd
 8001fcc:	40020000 	.word	0x40020000

08001fd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d005      	beq.n	8001ff4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2204      	movs	r2, #4
 8001fec:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	73fb      	strb	r3, [r7, #15]
 8001ff2:	e051      	b.n	8002098 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 020e 	bic.w	r2, r2, #14
 8002002:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a22      	ldr	r2, [pc, #136]	@ (80020a4 <HAL_DMA_Abort_IT+0xd4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d029      	beq.n	8002072 <HAL_DMA_Abort_IT+0xa2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a21      	ldr	r2, [pc, #132]	@ (80020a8 <HAL_DMA_Abort_IT+0xd8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d022      	beq.n	800206e <HAL_DMA_Abort_IT+0x9e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a1f      	ldr	r2, [pc, #124]	@ (80020ac <HAL_DMA_Abort_IT+0xdc>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01a      	beq.n	8002068 <HAL_DMA_Abort_IT+0x98>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1e      	ldr	r2, [pc, #120]	@ (80020b0 <HAL_DMA_Abort_IT+0xe0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d012      	beq.n	8002062 <HAL_DMA_Abort_IT+0x92>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1c      	ldr	r2, [pc, #112]	@ (80020b4 <HAL_DMA_Abort_IT+0xe4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00a      	beq.n	800205c <HAL_DMA_Abort_IT+0x8c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1b      	ldr	r2, [pc, #108]	@ (80020b8 <HAL_DMA_Abort_IT+0xe8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d102      	bne.n	8002056 <HAL_DMA_Abort_IT+0x86>
 8002050:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002054:	e00e      	b.n	8002074 <HAL_DMA_Abort_IT+0xa4>
 8002056:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800205a:	e00b      	b.n	8002074 <HAL_DMA_Abort_IT+0xa4>
 800205c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002060:	e008      	b.n	8002074 <HAL_DMA_Abort_IT+0xa4>
 8002062:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002066:	e005      	b.n	8002074 <HAL_DMA_Abort_IT+0xa4>
 8002068:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800206c:	e002      	b.n	8002074 <HAL_DMA_Abort_IT+0xa4>
 800206e:	2310      	movs	r3, #16
 8002070:	e000      	b.n	8002074 <HAL_DMA_Abort_IT+0xa4>
 8002072:	2301      	movs	r3, #1
 8002074:	4a11      	ldr	r2, [pc, #68]	@ (80020bc <HAL_DMA_Abort_IT+0xec>)
 8002076:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
    } 
  }
  return status;
 8002098:	7bfb      	ldrb	r3, [r7, #15]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40020008 	.word	0x40020008
 80020a8:	4002001c 	.word	0x4002001c
 80020ac:	40020030 	.word	0x40020030
 80020b0:	40020044 	.word	0x40020044
 80020b4:	40020058 	.word	0x40020058
 80020b8:	4002006c 	.word	0x4002006c
 80020bc:	40020000 	.word	0x40020000

080020c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	2204      	movs	r2, #4
 80020de:	409a      	lsls	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d04f      	beq.n	8002188 <HAL_DMA_IRQHandler+0xc8>
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d04a      	beq.n	8002188 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d107      	bne.n	8002110 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0204 	bic.w	r2, r2, #4
 800210e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a66      	ldr	r2, [pc, #408]	@ (80022b0 <HAL_DMA_IRQHandler+0x1f0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d029      	beq.n	800216e <HAL_DMA_IRQHandler+0xae>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a65      	ldr	r2, [pc, #404]	@ (80022b4 <HAL_DMA_IRQHandler+0x1f4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d022      	beq.n	800216a <HAL_DMA_IRQHandler+0xaa>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a63      	ldr	r2, [pc, #396]	@ (80022b8 <HAL_DMA_IRQHandler+0x1f8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01a      	beq.n	8002164 <HAL_DMA_IRQHandler+0xa4>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a62      	ldr	r2, [pc, #392]	@ (80022bc <HAL_DMA_IRQHandler+0x1fc>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d012      	beq.n	800215e <HAL_DMA_IRQHandler+0x9e>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a60      	ldr	r2, [pc, #384]	@ (80022c0 <HAL_DMA_IRQHandler+0x200>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00a      	beq.n	8002158 <HAL_DMA_IRQHandler+0x98>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a5f      	ldr	r2, [pc, #380]	@ (80022c4 <HAL_DMA_IRQHandler+0x204>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d102      	bne.n	8002152 <HAL_DMA_IRQHandler+0x92>
 800214c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002150:	e00e      	b.n	8002170 <HAL_DMA_IRQHandler+0xb0>
 8002152:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002156:	e00b      	b.n	8002170 <HAL_DMA_IRQHandler+0xb0>
 8002158:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800215c:	e008      	b.n	8002170 <HAL_DMA_IRQHandler+0xb0>
 800215e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002162:	e005      	b.n	8002170 <HAL_DMA_IRQHandler+0xb0>
 8002164:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002168:	e002      	b.n	8002170 <HAL_DMA_IRQHandler+0xb0>
 800216a:	2340      	movs	r3, #64	@ 0x40
 800216c:	e000      	b.n	8002170 <HAL_DMA_IRQHandler+0xb0>
 800216e:	2304      	movs	r3, #4
 8002170:	4a55      	ldr	r2, [pc, #340]	@ (80022c8 <HAL_DMA_IRQHandler+0x208>)
 8002172:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 8094 	beq.w	80022a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002186:	e08e      	b.n	80022a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218c:	2202      	movs	r2, #2
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d056      	beq.n	8002246 <HAL_DMA_IRQHandler+0x186>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d051      	beq.n	8002246 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10b      	bne.n	80021c8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 020a 	bic.w	r2, r2, #10
 80021be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a38      	ldr	r2, [pc, #224]	@ (80022b0 <HAL_DMA_IRQHandler+0x1f0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d029      	beq.n	8002226 <HAL_DMA_IRQHandler+0x166>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a37      	ldr	r2, [pc, #220]	@ (80022b4 <HAL_DMA_IRQHandler+0x1f4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d022      	beq.n	8002222 <HAL_DMA_IRQHandler+0x162>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a35      	ldr	r2, [pc, #212]	@ (80022b8 <HAL_DMA_IRQHandler+0x1f8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d01a      	beq.n	800221c <HAL_DMA_IRQHandler+0x15c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a34      	ldr	r2, [pc, #208]	@ (80022bc <HAL_DMA_IRQHandler+0x1fc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d012      	beq.n	8002216 <HAL_DMA_IRQHandler+0x156>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a32      	ldr	r2, [pc, #200]	@ (80022c0 <HAL_DMA_IRQHandler+0x200>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00a      	beq.n	8002210 <HAL_DMA_IRQHandler+0x150>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a31      	ldr	r2, [pc, #196]	@ (80022c4 <HAL_DMA_IRQHandler+0x204>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d102      	bne.n	800220a <HAL_DMA_IRQHandler+0x14a>
 8002204:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002208:	e00e      	b.n	8002228 <HAL_DMA_IRQHandler+0x168>
 800220a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800220e:	e00b      	b.n	8002228 <HAL_DMA_IRQHandler+0x168>
 8002210:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002214:	e008      	b.n	8002228 <HAL_DMA_IRQHandler+0x168>
 8002216:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800221a:	e005      	b.n	8002228 <HAL_DMA_IRQHandler+0x168>
 800221c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002220:	e002      	b.n	8002228 <HAL_DMA_IRQHandler+0x168>
 8002222:	2320      	movs	r3, #32
 8002224:	e000      	b.n	8002228 <HAL_DMA_IRQHandler+0x168>
 8002226:	2302      	movs	r3, #2
 8002228:	4a27      	ldr	r2, [pc, #156]	@ (80022c8 <HAL_DMA_IRQHandler+0x208>)
 800222a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	2b00      	cmp	r3, #0
 800223a:	d034      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002244:	e02f      	b.n	80022a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	2208      	movs	r2, #8
 800224c:	409a      	lsls	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d028      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x1e8>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d023      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 020e 	bic.w	r2, r2, #14
 800226e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002278:	2101      	movs	r1, #1
 800227a:	fa01 f202 	lsl.w	r2, r1, r2
 800227e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	2b00      	cmp	r3, #0
 800229c:	d004      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4798      	blx	r3
    }
  }
  return;
 80022a6:	bf00      	nop
 80022a8:	bf00      	nop
}
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40020008 	.word	0x40020008
 80022b4:	4002001c 	.word	0x4002001c
 80022b8:	40020030 	.word	0x40020030
 80022bc:	40020044 	.word	0x40020044
 80022c0:	40020058 	.word	0x40020058
 80022c4:	4002006c 	.word	0x4002006c
 80022c8:	40020000 	.word	0x40020000

080022cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b08b      	sub	sp, #44	@ 0x2c
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022d6:	2300      	movs	r3, #0
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022de:	e169      	b.n	80025b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022e0:	2201      	movs	r2, #1
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	f040 8158 	bne.w	80025ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	4a9a      	ldr	r2, [pc, #616]	@ (800256c <HAL_GPIO_Init+0x2a0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d05e      	beq.n	80023c6 <HAL_GPIO_Init+0xfa>
 8002308:	4a98      	ldr	r2, [pc, #608]	@ (800256c <HAL_GPIO_Init+0x2a0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d875      	bhi.n	80023fa <HAL_GPIO_Init+0x12e>
 800230e:	4a98      	ldr	r2, [pc, #608]	@ (8002570 <HAL_GPIO_Init+0x2a4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d058      	beq.n	80023c6 <HAL_GPIO_Init+0xfa>
 8002314:	4a96      	ldr	r2, [pc, #600]	@ (8002570 <HAL_GPIO_Init+0x2a4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d86f      	bhi.n	80023fa <HAL_GPIO_Init+0x12e>
 800231a:	4a96      	ldr	r2, [pc, #600]	@ (8002574 <HAL_GPIO_Init+0x2a8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d052      	beq.n	80023c6 <HAL_GPIO_Init+0xfa>
 8002320:	4a94      	ldr	r2, [pc, #592]	@ (8002574 <HAL_GPIO_Init+0x2a8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d869      	bhi.n	80023fa <HAL_GPIO_Init+0x12e>
 8002326:	4a94      	ldr	r2, [pc, #592]	@ (8002578 <HAL_GPIO_Init+0x2ac>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d04c      	beq.n	80023c6 <HAL_GPIO_Init+0xfa>
 800232c:	4a92      	ldr	r2, [pc, #584]	@ (8002578 <HAL_GPIO_Init+0x2ac>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d863      	bhi.n	80023fa <HAL_GPIO_Init+0x12e>
 8002332:	4a92      	ldr	r2, [pc, #584]	@ (800257c <HAL_GPIO_Init+0x2b0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d046      	beq.n	80023c6 <HAL_GPIO_Init+0xfa>
 8002338:	4a90      	ldr	r2, [pc, #576]	@ (800257c <HAL_GPIO_Init+0x2b0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d85d      	bhi.n	80023fa <HAL_GPIO_Init+0x12e>
 800233e:	2b12      	cmp	r3, #18
 8002340:	d82a      	bhi.n	8002398 <HAL_GPIO_Init+0xcc>
 8002342:	2b12      	cmp	r3, #18
 8002344:	d859      	bhi.n	80023fa <HAL_GPIO_Init+0x12e>
 8002346:	a201      	add	r2, pc, #4	@ (adr r2, 800234c <HAL_GPIO_Init+0x80>)
 8002348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234c:	080023c7 	.word	0x080023c7
 8002350:	080023a1 	.word	0x080023a1
 8002354:	080023b3 	.word	0x080023b3
 8002358:	080023f5 	.word	0x080023f5
 800235c:	080023fb 	.word	0x080023fb
 8002360:	080023fb 	.word	0x080023fb
 8002364:	080023fb 	.word	0x080023fb
 8002368:	080023fb 	.word	0x080023fb
 800236c:	080023fb 	.word	0x080023fb
 8002370:	080023fb 	.word	0x080023fb
 8002374:	080023fb 	.word	0x080023fb
 8002378:	080023fb 	.word	0x080023fb
 800237c:	080023fb 	.word	0x080023fb
 8002380:	080023fb 	.word	0x080023fb
 8002384:	080023fb 	.word	0x080023fb
 8002388:	080023fb 	.word	0x080023fb
 800238c:	080023fb 	.word	0x080023fb
 8002390:	080023a9 	.word	0x080023a9
 8002394:	080023bd 	.word	0x080023bd
 8002398:	4a79      	ldr	r2, [pc, #484]	@ (8002580 <HAL_GPIO_Init+0x2b4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d013      	beq.n	80023c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800239e:	e02c      	b.n	80023fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	623b      	str	r3, [r7, #32]
          break;
 80023a6:	e029      	b.n	80023fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	3304      	adds	r3, #4
 80023ae:	623b      	str	r3, [r7, #32]
          break;
 80023b0:	e024      	b.n	80023fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	3308      	adds	r3, #8
 80023b8:	623b      	str	r3, [r7, #32]
          break;
 80023ba:	e01f      	b.n	80023fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	330c      	adds	r3, #12
 80023c2:	623b      	str	r3, [r7, #32]
          break;
 80023c4:	e01a      	b.n	80023fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d102      	bne.n	80023d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023ce:	2304      	movs	r3, #4
 80023d0:	623b      	str	r3, [r7, #32]
          break;
 80023d2:	e013      	b.n	80023fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d105      	bne.n	80023e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023dc:	2308      	movs	r3, #8
 80023de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	611a      	str	r2, [r3, #16]
          break;
 80023e6:	e009      	b.n	80023fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023e8:	2308      	movs	r3, #8
 80023ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	615a      	str	r2, [r3, #20]
          break;
 80023f2:	e003      	b.n	80023fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023f4:	2300      	movs	r3, #0
 80023f6:	623b      	str	r3, [r7, #32]
          break;
 80023f8:	e000      	b.n	80023fc <HAL_GPIO_Init+0x130>
          break;
 80023fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2bff      	cmp	r3, #255	@ 0xff
 8002400:	d801      	bhi.n	8002406 <HAL_GPIO_Init+0x13a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	e001      	b.n	800240a <HAL_GPIO_Init+0x13e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3304      	adds	r3, #4
 800240a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	2bff      	cmp	r3, #255	@ 0xff
 8002410:	d802      	bhi.n	8002418 <HAL_GPIO_Init+0x14c>
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	e002      	b.n	800241e <HAL_GPIO_Init+0x152>
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	3b08      	subs	r3, #8
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	210f      	movs	r1, #15
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	401a      	ands	r2, r3
 8002430:	6a39      	ldr	r1, [r7, #32]
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	431a      	orrs	r2, r3
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 80b1 	beq.w	80025ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800244c:	4b4d      	ldr	r3, [pc, #308]	@ (8002584 <HAL_GPIO_Init+0x2b8>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4a4c      	ldr	r2, [pc, #304]	@ (8002584 <HAL_GPIO_Init+0x2b8>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6193      	str	r3, [r2, #24]
 8002458:	4b4a      	ldr	r3, [pc, #296]	@ (8002584 <HAL_GPIO_Init+0x2b8>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002464:	4a48      	ldr	r2, [pc, #288]	@ (8002588 <HAL_GPIO_Init+0x2bc>)
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	089b      	lsrs	r3, r3, #2
 800246a:	3302      	adds	r3, #2
 800246c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002470:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	220f      	movs	r2, #15
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	4013      	ands	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a40      	ldr	r2, [pc, #256]	@ (800258c <HAL_GPIO_Init+0x2c0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d013      	beq.n	80024b8 <HAL_GPIO_Init+0x1ec>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a3f      	ldr	r2, [pc, #252]	@ (8002590 <HAL_GPIO_Init+0x2c4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d00d      	beq.n	80024b4 <HAL_GPIO_Init+0x1e8>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a3e      	ldr	r2, [pc, #248]	@ (8002594 <HAL_GPIO_Init+0x2c8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d007      	beq.n	80024b0 <HAL_GPIO_Init+0x1e4>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a3d      	ldr	r2, [pc, #244]	@ (8002598 <HAL_GPIO_Init+0x2cc>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d101      	bne.n	80024ac <HAL_GPIO_Init+0x1e0>
 80024a8:	2303      	movs	r3, #3
 80024aa:	e006      	b.n	80024ba <HAL_GPIO_Init+0x1ee>
 80024ac:	2304      	movs	r3, #4
 80024ae:	e004      	b.n	80024ba <HAL_GPIO_Init+0x1ee>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e002      	b.n	80024ba <HAL_GPIO_Init+0x1ee>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_GPIO_Init+0x1ee>
 80024b8:	2300      	movs	r3, #0
 80024ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024bc:	f002 0203 	and.w	r2, r2, #3
 80024c0:	0092      	lsls	r2, r2, #2
 80024c2:	4093      	lsls	r3, r2
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024ca:	492f      	ldr	r1, [pc, #188]	@ (8002588 <HAL_GPIO_Init+0x2bc>)
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	089b      	lsrs	r3, r3, #2
 80024d0:	3302      	adds	r3, #2
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d006      	beq.n	80024f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024e4:	4b2d      	ldr	r3, [pc, #180]	@ (800259c <HAL_GPIO_Init+0x2d0>)
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	492c      	ldr	r1, [pc, #176]	@ (800259c <HAL_GPIO_Init+0x2d0>)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	608b      	str	r3, [r1, #8]
 80024f0:	e006      	b.n	8002500 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024f2:	4b2a      	ldr	r3, [pc, #168]	@ (800259c <HAL_GPIO_Init+0x2d0>)
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	4928      	ldr	r1, [pc, #160]	@ (800259c <HAL_GPIO_Init+0x2d0>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d006      	beq.n	800251a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800250c:	4b23      	ldr	r3, [pc, #140]	@ (800259c <HAL_GPIO_Init+0x2d0>)
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	4922      	ldr	r1, [pc, #136]	@ (800259c <HAL_GPIO_Init+0x2d0>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	60cb      	str	r3, [r1, #12]
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800251a:	4b20      	ldr	r3, [pc, #128]	@ (800259c <HAL_GPIO_Init+0x2d0>)
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	43db      	mvns	r3, r3
 8002522:	491e      	ldr	r1, [pc, #120]	@ (800259c <HAL_GPIO_Init+0x2d0>)
 8002524:	4013      	ands	r3, r2
 8002526:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d006      	beq.n	8002542 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002534:	4b19      	ldr	r3, [pc, #100]	@ (800259c <HAL_GPIO_Init+0x2d0>)
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	4918      	ldr	r1, [pc, #96]	@ (800259c <HAL_GPIO_Init+0x2d0>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
 8002540:	e006      	b.n	8002550 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002542:	4b16      	ldr	r3, [pc, #88]	@ (800259c <HAL_GPIO_Init+0x2d0>)
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	43db      	mvns	r3, r3
 800254a:	4914      	ldr	r1, [pc, #80]	@ (800259c <HAL_GPIO_Init+0x2d0>)
 800254c:	4013      	ands	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d021      	beq.n	80025a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800255c:	4b0f      	ldr	r3, [pc, #60]	@ (800259c <HAL_GPIO_Init+0x2d0>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	490e      	ldr	r1, [pc, #56]	@ (800259c <HAL_GPIO_Init+0x2d0>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	600b      	str	r3, [r1, #0]
 8002568:	e021      	b.n	80025ae <HAL_GPIO_Init+0x2e2>
 800256a:	bf00      	nop
 800256c:	10320000 	.word	0x10320000
 8002570:	10310000 	.word	0x10310000
 8002574:	10220000 	.word	0x10220000
 8002578:	10210000 	.word	0x10210000
 800257c:	10120000 	.word	0x10120000
 8002580:	10110000 	.word	0x10110000
 8002584:	40021000 	.word	0x40021000
 8002588:	40010000 	.word	0x40010000
 800258c:	40010800 	.word	0x40010800
 8002590:	40010c00 	.word	0x40010c00
 8002594:	40011000 	.word	0x40011000
 8002598:	40011400 	.word	0x40011400
 800259c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025a0:	4b0b      	ldr	r3, [pc, #44]	@ (80025d0 <HAL_GPIO_Init+0x304>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	4909      	ldr	r1, [pc, #36]	@ (80025d0 <HAL_GPIO_Init+0x304>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	3301      	adds	r3, #1
 80025b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	fa22 f303 	lsr.w	r3, r2, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f47f ae8e 	bne.w	80022e0 <HAL_GPIO_Init+0x14>
  }
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	372c      	adds	r7, #44	@ 0x2c
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	40010400 	.word	0x40010400

080025d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	887b      	ldrh	r3, [r7, #2]
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	e001      	b.n	80025f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	460b      	mov	r3, r1
 800260c:	807b      	strh	r3, [r7, #2]
 800260e:	4613      	mov	r3, r2
 8002610:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002612:	787b      	ldrb	r3, [r7, #1]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002618:	887a      	ldrh	r2, [r7, #2]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800261e:	e003      	b.n	8002628 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002620:	887b      	ldrh	r3, [r7, #2]
 8002622:	041a      	lsls	r2, r3, #16
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	611a      	str	r2, [r3, #16]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
	...

08002634 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800263e:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	4013      	ands	r3, r2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d006      	beq.n	8002658 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800264a:	4a05      	ldr	r2, [pc, #20]	@ (8002660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002650:	88fb      	ldrh	r3, [r7, #6]
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f806 	bl	8002664 <HAL_GPIO_EXTI_Callback>
  }
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40010400 	.word	0x40010400

08002664 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e272      	b.n	8002b70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 8087 	beq.w	80027a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002698:	4b92      	ldr	r3, [pc, #584]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d00c      	beq.n	80026be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026a4:	4b8f      	ldr	r3, [pc, #572]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 030c 	and.w	r3, r3, #12
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d112      	bne.n	80026d6 <HAL_RCC_OscConfig+0x5e>
 80026b0:	4b8c      	ldr	r3, [pc, #560]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026bc:	d10b      	bne.n	80026d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026be:	4b89      	ldr	r3, [pc, #548]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d06c      	beq.n	80027a4 <HAL_RCC_OscConfig+0x12c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d168      	bne.n	80027a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e24c      	b.n	8002b70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026de:	d106      	bne.n	80026ee <HAL_RCC_OscConfig+0x76>
 80026e0:	4b80      	ldr	r3, [pc, #512]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a7f      	ldr	r2, [pc, #508]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	e02e      	b.n	800274c <HAL_RCC_OscConfig+0xd4>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10c      	bne.n	8002710 <HAL_RCC_OscConfig+0x98>
 80026f6:	4b7b      	ldr	r3, [pc, #492]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a7a      	ldr	r2, [pc, #488]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	4b78      	ldr	r3, [pc, #480]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a77      	ldr	r2, [pc, #476]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 8002708:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e01d      	b.n	800274c <HAL_RCC_OscConfig+0xd4>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0xbc>
 800271a:	4b72      	ldr	r3, [pc, #456]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a71      	ldr	r2, [pc, #452]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 8002720:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b6f      	ldr	r3, [pc, #444]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a6e      	ldr	r2, [pc, #440]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 800272c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e00b      	b.n	800274c <HAL_RCC_OscConfig+0xd4>
 8002734:	4b6b      	ldr	r3, [pc, #428]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a6a      	ldr	r2, [pc, #424]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 800273a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	4b68      	ldr	r3, [pc, #416]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a67      	ldr	r2, [pc, #412]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 8002746:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800274a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d013      	beq.n	800277c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7ff faa6 	bl	8001ca4 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800275c:	f7ff faa2 	bl	8001ca4 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	@ 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e200      	b.n	8002b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	4b5d      	ldr	r3, [pc, #372]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0xe4>
 800277a:	e014      	b.n	80027a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7ff fa92 	bl	8001ca4 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002784:	f7ff fa8e 	bl	8001ca4 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	@ 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e1ec      	b.n	8002b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002796:	4b53      	ldr	r3, [pc, #332]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x10c>
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d063      	beq.n	800287a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027b2:	4b4c      	ldr	r3, [pc, #304]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00b      	beq.n	80027d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027be:	4b49      	ldr	r3, [pc, #292]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d11c      	bne.n	8002804 <HAL_RCC_OscConfig+0x18c>
 80027ca:	4b46      	ldr	r3, [pc, #280]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d116      	bne.n	8002804 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d6:	4b43      	ldr	r3, [pc, #268]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_RCC_OscConfig+0x176>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d001      	beq.n	80027ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e1c0      	b.n	8002b70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ee:	4b3d      	ldr	r3, [pc, #244]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4939      	ldr	r1, [pc, #228]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002802:	e03a      	b.n	800287a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d020      	beq.n	800284e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800280c:	4b36      	ldr	r3, [pc, #216]	@ (80028e8 <HAL_RCC_OscConfig+0x270>)
 800280e:	2201      	movs	r2, #1
 8002810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002812:	f7ff fa47 	bl	8001ca4 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281a:	f7ff fa43 	bl	8001ca4 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e1a1      	b.n	8002b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282c:	4b2d      	ldr	r3, [pc, #180]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002838:	4b2a      	ldr	r3, [pc, #168]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4927      	ldr	r1, [pc, #156]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 8002848:	4313      	orrs	r3, r2
 800284a:	600b      	str	r3, [r1, #0]
 800284c:	e015      	b.n	800287a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800284e:	4b26      	ldr	r3, [pc, #152]	@ (80028e8 <HAL_RCC_OscConfig+0x270>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7ff fa26 	bl	8001ca4 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285c:	f7ff fa22 	bl	8001ca4 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e180      	b.n	8002b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286e:	4b1d      	ldr	r3, [pc, #116]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d03a      	beq.n	80028fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d019      	beq.n	80028c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800288e:	4b17      	ldr	r3, [pc, #92]	@ (80028ec <HAL_RCC_OscConfig+0x274>)
 8002890:	2201      	movs	r2, #1
 8002892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002894:	f7ff fa06 	bl	8001ca4 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800289c:	f7ff fa02 	bl	8001ca4 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e160      	b.n	8002b70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ae:	4b0d      	ldr	r3, [pc, #52]	@ (80028e4 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028ba:	2001      	movs	r0, #1
 80028bc:	f000 face 	bl	8002e5c <RCC_Delay>
 80028c0:	e01c      	b.n	80028fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c2:	4b0a      	ldr	r3, [pc, #40]	@ (80028ec <HAL_RCC_OscConfig+0x274>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c8:	f7ff f9ec 	bl	8001ca4 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ce:	e00f      	b.n	80028f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d0:	f7ff f9e8 	bl	8001ca4 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d908      	bls.n	80028f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e146      	b.n	8002b70 <HAL_RCC_OscConfig+0x4f8>
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
 80028e8:	42420000 	.word	0x42420000
 80028ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f0:	4b92      	ldr	r3, [pc, #584]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1e9      	bne.n	80028d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80a6 	beq.w	8002a56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290a:	2300      	movs	r3, #0
 800290c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290e:	4b8b      	ldr	r3, [pc, #556]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10d      	bne.n	8002936 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291a:	4b88      	ldr	r3, [pc, #544]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	4a87      	ldr	r2, [pc, #540]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 8002920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002924:	61d3      	str	r3, [r2, #28]
 8002926:	4b85      	ldr	r3, [pc, #532]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002932:	2301      	movs	r3, #1
 8002934:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002936:	4b82      	ldr	r3, [pc, #520]	@ (8002b40 <HAL_RCC_OscConfig+0x4c8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d118      	bne.n	8002974 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002942:	4b7f      	ldr	r3, [pc, #508]	@ (8002b40 <HAL_RCC_OscConfig+0x4c8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a7e      	ldr	r2, [pc, #504]	@ (8002b40 <HAL_RCC_OscConfig+0x4c8>)
 8002948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800294c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294e:	f7ff f9a9 	bl	8001ca4 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002956:	f7ff f9a5 	bl	8001ca4 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b64      	cmp	r3, #100	@ 0x64
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e103      	b.n	8002b70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002968:	4b75      	ldr	r3, [pc, #468]	@ (8002b40 <HAL_RCC_OscConfig+0x4c8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d106      	bne.n	800298a <HAL_RCC_OscConfig+0x312>
 800297c:	4b6f      	ldr	r3, [pc, #444]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	4a6e      	ldr	r2, [pc, #440]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6213      	str	r3, [r2, #32]
 8002988:	e02d      	b.n	80029e6 <HAL_RCC_OscConfig+0x36e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0x334>
 8002992:	4b6a      	ldr	r3, [pc, #424]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	4a69      	ldr	r2, [pc, #420]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 8002998:	f023 0301 	bic.w	r3, r3, #1
 800299c:	6213      	str	r3, [r2, #32]
 800299e:	4b67      	ldr	r3, [pc, #412]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	4a66      	ldr	r2, [pc, #408]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	f023 0304 	bic.w	r3, r3, #4
 80029a8:	6213      	str	r3, [r2, #32]
 80029aa:	e01c      	b.n	80029e6 <HAL_RCC_OscConfig+0x36e>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b05      	cmp	r3, #5
 80029b2:	d10c      	bne.n	80029ce <HAL_RCC_OscConfig+0x356>
 80029b4:	4b61      	ldr	r3, [pc, #388]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	4a60      	ldr	r2, [pc, #384]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 80029ba:	f043 0304 	orr.w	r3, r3, #4
 80029be:	6213      	str	r3, [r2, #32]
 80029c0:	4b5e      	ldr	r3, [pc, #376]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	4a5d      	ldr	r2, [pc, #372]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6213      	str	r3, [r2, #32]
 80029cc:	e00b      	b.n	80029e6 <HAL_RCC_OscConfig+0x36e>
 80029ce:	4b5b      	ldr	r3, [pc, #364]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	4a5a      	ldr	r2, [pc, #360]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	6213      	str	r3, [r2, #32]
 80029da:	4b58      	ldr	r3, [pc, #352]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	4a57      	ldr	r2, [pc, #348]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	f023 0304 	bic.w	r3, r3, #4
 80029e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d015      	beq.n	8002a1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ee:	f7ff f959 	bl	8001ca4 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7ff f955 	bl	8001ca4 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e0b1      	b.n	8002b70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0c:	4b4b      	ldr	r3, [pc, #300]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0ee      	beq.n	80029f6 <HAL_RCC_OscConfig+0x37e>
 8002a18:	e014      	b.n	8002a44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1a:	f7ff f943 	bl	8001ca4 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a20:	e00a      	b.n	8002a38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7ff f93f 	bl	8001ca4 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e09b      	b.n	8002b70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a38:	4b40      	ldr	r3, [pc, #256]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ee      	bne.n	8002a22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a44:	7dfb      	ldrb	r3, [r7, #23]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d105      	bne.n	8002a56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4a:	4b3c      	ldr	r3, [pc, #240]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	4a3b      	ldr	r2, [pc, #236]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 8002a50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 8087 	beq.w	8002b6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a60:	4b36      	ldr	r3, [pc, #216]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d061      	beq.n	8002b30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d146      	bne.n	8002b02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a74:	4b33      	ldr	r3, [pc, #204]	@ (8002b44 <HAL_RCC_OscConfig+0x4cc>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7a:	f7ff f913 	bl	8001ca4 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a82:	f7ff f90f 	bl	8001ca4 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e06d      	b.n	8002b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a94:	4b29      	ldr	r3, [pc, #164]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f0      	bne.n	8002a82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aa8:	d108      	bne.n	8002abc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aaa:	4b24      	ldr	r3, [pc, #144]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	4921      	ldr	r1, [pc, #132]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002abc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a19      	ldr	r1, [r3, #32]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	430b      	orrs	r3, r1
 8002ace:	491b      	ldr	r1, [pc, #108]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b44 <HAL_RCC_OscConfig+0x4cc>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ada:	f7ff f8e3 	bl	8001ca4 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae2:	f7ff f8df 	bl	8001ca4 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e03d      	b.n	8002b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af4:	4b11      	ldr	r3, [pc, #68]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0f0      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x46a>
 8002b00:	e035      	b.n	8002b6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b02:	4b10      	ldr	r3, [pc, #64]	@ (8002b44 <HAL_RCC_OscConfig+0x4cc>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7ff f8cc 	bl	8001ca4 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b10:	f7ff f8c8 	bl	8001ca4 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e026      	b.n	8002b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b22:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x498>
 8002b2e:	e01e      	b.n	8002b6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d107      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e019      	b.n	8002b70 <HAL_RCC_OscConfig+0x4f8>
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40007000 	.word	0x40007000
 8002b44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b48:	4b0b      	ldr	r3, [pc, #44]	@ (8002b78 <HAL_RCC_OscConfig+0x500>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d106      	bne.n	8002b6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d001      	beq.n	8002b6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000

08002b7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0d0      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b90:	4b6a      	ldr	r3, [pc, #424]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d910      	bls.n	8002bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b67      	ldr	r3, [pc, #412]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 0207 	bic.w	r2, r3, #7
 8002ba6:	4965      	ldr	r1, [pc, #404]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bae:	4b63      	ldr	r3, [pc, #396]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0b8      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d020      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bd8:	4b59      	ldr	r3, [pc, #356]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4a58      	ldr	r2, [pc, #352]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002be2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bf0:	4b53      	ldr	r3, [pc, #332]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4a52      	ldr	r2, [pc, #328]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002bfa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bfc:	4b50      	ldr	r3, [pc, #320]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	494d      	ldr	r1, [pc, #308]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d040      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	4b47      	ldr	r3, [pc, #284]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d115      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e07f      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3a:	4b41      	ldr	r3, [pc, #260]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e073      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e06b      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5a:	4b39      	ldr	r3, [pc, #228]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f023 0203 	bic.w	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4936      	ldr	r1, [pc, #216]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c6c:	f7ff f81a 	bl	8001ca4 <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c74:	f7ff f816 	bl	8001ca4 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e053      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 020c 	and.w	r2, r3, #12
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d1eb      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b27      	ldr	r3, [pc, #156]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d210      	bcs.n	8002ccc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b24      	ldr	r3, [pc, #144]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 0207 	bic.w	r2, r3, #7
 8002cb2:	4922      	ldr	r1, [pc, #136]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cba:	4b20      	ldr	r3, [pc, #128]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e032      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd8:	4b19      	ldr	r3, [pc, #100]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4916      	ldr	r1, [pc, #88]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d009      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cf6:	4b12      	ldr	r3, [pc, #72]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	490e      	ldr	r1, [pc, #56]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d0a:	f000 f821 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	4b0b      	ldr	r3, [pc, #44]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	490a      	ldr	r1, [pc, #40]	@ (8002d44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1c:	5ccb      	ldrb	r3, [r1, r3]
 8002d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d22:	4a09      	ldr	r2, [pc, #36]	@ (8002d48 <HAL_RCC_ClockConfig+0x1cc>)
 8002d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d26:	4b09      	ldr	r3, [pc, #36]	@ (8002d4c <HAL_RCC_ClockConfig+0x1d0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe ff78 	bl	8001c20 <HAL_InitTick>

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40022000 	.word	0x40022000
 8002d40:	40021000 	.word	0x40021000
 8002d44:	08006680 	.word	0x08006680
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	20000004 	.word	0x20000004

08002d50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	2300      	movs	r3, #0
 8002d64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d002      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x30>
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d003      	beq.n	8002d86 <HAL_RCC_GetSysClockFreq+0x36>
 8002d7e:	e027      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d80:	4b19      	ldr	r3, [pc, #100]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d82:	613b      	str	r3, [r7, #16]
      break;
 8002d84:	e027      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	0c9b      	lsrs	r3, r3, #18
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	4a17      	ldr	r2, [pc, #92]	@ (8002dec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d90:	5cd3      	ldrb	r3, [r2, r3]
 8002d92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d010      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d9e:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	0c5b      	lsrs	r3, r3, #17
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	4a11      	ldr	r2, [pc, #68]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002daa:	5cd3      	ldrb	r3, [r2, r3]
 8002dac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a0d      	ldr	r2, [pc, #52]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002db2:	fb03 f202 	mul.w	r2, r3, r2
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	e004      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a0c      	ldr	r2, [pc, #48]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dc4:	fb02 f303 	mul.w	r3, r2, r3
 8002dc8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	613b      	str	r3, [r7, #16]
      break;
 8002dce:	e002      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dd0:	4b05      	ldr	r3, [pc, #20]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dd2:	613b      	str	r3, [r7, #16]
      break;
 8002dd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd6:	693b      	ldr	r3, [r7, #16]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	371c      	adds	r7, #28
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
 8002de8:	007a1200 	.word	0x007a1200
 8002dec:	08006698 	.word	0x08006698
 8002df0:	080066a8 	.word	0x080066a8
 8002df4:	003d0900 	.word	0x003d0900

08002df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dfc:	4b02      	ldr	r3, [pc, #8]	@ (8002e08 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	20000000 	.word	0x20000000

08002e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e10:	f7ff fff2 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	0a1b      	lsrs	r3, r3, #8
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	4903      	ldr	r1, [pc, #12]	@ (8002e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e22:	5ccb      	ldrb	r3, [r1, r3]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	08006690 	.word	0x08006690

08002e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e38:	f7ff ffde 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	0adb      	lsrs	r3, r3, #11
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	4903      	ldr	r1, [pc, #12]	@ (8002e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40021000 	.word	0x40021000
 8002e58:	08006690 	.word	0x08006690

08002e5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e64:	4b0a      	ldr	r3, [pc, #40]	@ (8002e90 <RCC_Delay+0x34>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a0a      	ldr	r2, [pc, #40]	@ (8002e94 <RCC_Delay+0x38>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	0a5b      	lsrs	r3, r3, #9
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e78:	bf00      	nop
  }
  while (Delay --);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1e5a      	subs	r2, r3, #1
 8002e7e:	60fa      	str	r2, [r7, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1f9      	bne.n	8002e78 <RCC_Delay+0x1c>
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	20000000 	.word	0x20000000
 8002e94:	10624dd3 	.word	0x10624dd3

08002e98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e076      	b.n	8002f98 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d108      	bne.n	8002ec4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eba:	d009      	beq.n	8002ed0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	61da      	str	r2, [r3, #28]
 8002ec2:	e005      	b.n	8002ed0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fe fc58 	bl	80017a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f54:	ea42 0103 	orr.w	r1, r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	0c1a      	lsrs	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f002 0204 	and.w	r2, r2, #4
 8002f76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	69da      	ldr	r2, [r3, #28]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	4613      	mov	r3, r2
 8002fae:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fb0:	f7fe fe78 	bl	8001ca4 <HAL_GetTick>
 8002fb4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d001      	beq.n	8002fca <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e12a      	b.n	8003220 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <HAL_SPI_Transmit+0x36>
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e122      	b.n	8003220 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_SPI_Transmit+0x48>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e11b      	b.n	8003220 <HAL_SPI_Transmit+0x280>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	88fa      	ldrh	r2, [r7, #6]
 8003008:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003036:	d10f      	bne.n	8003058 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003046:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003056:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003062:	2b40      	cmp	r3, #64	@ 0x40
 8003064:	d007      	beq.n	8003076 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003074:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800307e:	d152      	bne.n	8003126 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_SPI_Transmit+0xee>
 8003088:	8b7b      	ldrh	r3, [r7, #26]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d145      	bne.n	800311a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	881a      	ldrh	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309e:	1c9a      	adds	r2, r3, #2
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030b2:	e032      	b.n	800311a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d112      	bne.n	80030e8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c6:	881a      	ldrh	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	1c9a      	adds	r2, r3, #2
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80030e6:	e018      	b.n	800311a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030e8:	f7fe fddc 	bl	8001ca4 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d803      	bhi.n	8003100 <HAL_SPI_Transmit+0x160>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fe:	d102      	bne.n	8003106 <HAL_SPI_Transmit+0x166>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e082      	b.n	8003220 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1c7      	bne.n	80030b4 <HAL_SPI_Transmit+0x114>
 8003124:	e053      	b.n	80031ce <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_SPI_Transmit+0x194>
 800312e:	8b7b      	ldrh	r3, [r7, #26]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d147      	bne.n	80031c4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	330c      	adds	r3, #12
 800313e:	7812      	ldrb	r2, [r2, #0]
 8003140:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800315a:	e033      	b.n	80031c4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b02      	cmp	r3, #2
 8003168:	d113      	bne.n	8003192 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	330c      	adds	r3, #12
 8003174:	7812      	ldrb	r2, [r2, #0]
 8003176:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003190:	e018      	b.n	80031c4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003192:	f7fe fd87 	bl	8001ca4 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d803      	bhi.n	80031aa <HAL_SPI_Transmit+0x20a>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a8:	d102      	bne.n	80031b0 <HAL_SPI_Transmit+0x210>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d109      	bne.n	80031c4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e02d      	b.n	8003220 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1c6      	bne.n	800315c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	6839      	ldr	r1, [r7, #0]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f9ac 	bl	8003530 <SPI_EndRxTxTransaction>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10a      	bne.n	8003202 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800321e:	2300      	movs	r3, #0
  }
}
 8003220:	4618      	mov	r0, r3
 8003222:	3720      	adds	r7, #32
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10e      	bne.n	8003268 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003250:	2b00      	cmp	r3, #0
 8003252:	d009      	beq.n	8003268 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	4798      	blx	r3
    return;
 8003266:	e0b7      	b.n	80033d8 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_SPI_IRQHandler+0x5e>
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003278:	2b00      	cmp	r3, #0
 800327a:	d004      	beq.n	8003286 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	4798      	blx	r3
    return;
 8003284:	e0a8      	b.n	80033d8 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <HAL_SPI_IRQHandler+0x74>
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 809e 	beq.w	80033d8 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8098 	beq.w	80033d8 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d023      	beq.n	80032fa <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d011      	beq.n	80032e2 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c2:	f043 0204 	orr.w	r2, r3, #4
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	e00b      	b.n	80032fa <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032e2:	2300      	movs	r3, #0
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	693b      	ldr	r3, [r7, #16]
        return;
 80032f8:	e06e      	b.n	80033d8 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b00      	cmp	r3, #0
 8003302:	d014      	beq.n	800332e <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003308:	f043 0201 	orr.w	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003332:	2b00      	cmp	r3, #0
 8003334:	d04f      	beq.n	80033d6 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003344:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d104      	bne.n	8003362 <HAL_SPI_IRQHandler+0x13a>
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d034      	beq.n	80033cc <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0203 	bic.w	r2, r2, #3
 8003370:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003376:	2b00      	cmp	r3, #0
 8003378:	d011      	beq.n	800339e <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337e:	4a18      	ldr	r2, [pc, #96]	@ (80033e0 <HAL_SPI_IRQHandler+0x1b8>)
 8003380:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fe22 	bl	8001fd0 <HAL_DMA_Abort_IT>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003396:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d016      	beq.n	80033d4 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033aa:	4a0d      	ldr	r2, [pc, #52]	@ (80033e0 <HAL_SPI_IRQHandler+0x1b8>)
 80033ac:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fe0c 	bl	8001fd0 <HAL_DMA_Abort_IT>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80033ca:	e003      	b.n	80033d4 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f809 	bl	80033e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80033d2:	e000      	b.n	80033d6 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 80033d4:	bf00      	nop
    return;
 80033d6:	bf00      	nop
  }
}
 80033d8:	3720      	adds	r7, #32
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	080033f7 	.word	0x080033f7

080033e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003402:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff ffe7 	bl	80033e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003430:	f7fe fc38 	bl	8001ca4 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	4413      	add	r3, r2
 800343e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003440:	f7fe fc30 	bl	8001ca4 <HAL_GetTick>
 8003444:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003446:	4b39      	ldr	r3, [pc, #228]	@ (800352c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	015b      	lsls	r3, r3, #5
 800344c:	0d1b      	lsrs	r3, r3, #20
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003456:	e054      	b.n	8003502 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	d050      	beq.n	8003502 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003460:	f7fe fc20 	bl	8001ca4 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	429a      	cmp	r2, r3
 800346e:	d902      	bls.n	8003476 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d13d      	bne.n	80034f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003484:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800348e:	d111      	bne.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003498:	d004      	beq.n	80034a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a2:	d107      	bne.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034bc:	d10f      	bne.n	80034de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e017      	b.n	8003522 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	3b01      	subs	r3, #1
 8003500:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4013      	ands	r3, r2
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	429a      	cmp	r2, r3
 8003510:	bf0c      	ite	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	2300      	movne	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	429a      	cmp	r2, r3
 800351e:	d19b      	bne.n	8003458 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000000 	.word	0x20000000

08003530 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2201      	movs	r2, #1
 8003544:	2102      	movs	r1, #2
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f7ff ff6a 	bl	8003420 <SPI_WaitFlagStateUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003556:	f043 0220 	orr.w	r2, r3, #32
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e013      	b.n	800358a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2200      	movs	r2, #0
 800356a:	2180      	movs	r1, #128	@ 0x80
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f7ff ff57 	bl	8003420 <SPI_WaitFlagStateUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800357c:	f043 0220 	orr.w	r2, r3, #32
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e000      	b.n	800358a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e041      	b.n	8003628 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d106      	bne.n	80035be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7fe f963 	bl	8001884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2202      	movs	r2, #2
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3304      	adds	r3, #4
 80035ce:	4619      	mov	r1, r3
 80035d0:	4610      	mov	r0, r2
 80035d2:	f000 f93f 	bl	8003854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	d001      	beq.n	8003648 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e032      	b.n	80036ae <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a18      	ldr	r2, [pc, #96]	@ (80036b8 <HAL_TIM_Base_Start+0x88>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00e      	beq.n	8003678 <HAL_TIM_Base_Start+0x48>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003662:	d009      	beq.n	8003678 <HAL_TIM_Base_Start+0x48>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a14      	ldr	r2, [pc, #80]	@ (80036bc <HAL_TIM_Base_Start+0x8c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <HAL_TIM_Base_Start+0x48>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a13      	ldr	r2, [pc, #76]	@ (80036c0 <HAL_TIM_Base_Start+0x90>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d111      	bne.n	800369c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b06      	cmp	r3, #6
 8003688:	d010      	beq.n	80036ac <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800369a:	e007      	b.n	80036ac <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr
 80036b8:	40012c00 	.word	0x40012c00
 80036bc:	40000400 	.word	0x40000400
 80036c0:	40000800 	.word	0x40000800

080036c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_TIM_ConfigClockSource+0x1c>
 80036dc:	2302      	movs	r3, #2
 80036de:	e0b4      	b.n	800384a <HAL_TIM_ConfigClockSource+0x186>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003706:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003718:	d03e      	beq.n	8003798 <HAL_TIM_ConfigClockSource+0xd4>
 800371a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800371e:	f200 8087 	bhi.w	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003726:	f000 8086 	beq.w	8003836 <HAL_TIM_ConfigClockSource+0x172>
 800372a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800372e:	d87f      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003730:	2b70      	cmp	r3, #112	@ 0x70
 8003732:	d01a      	beq.n	800376a <HAL_TIM_ConfigClockSource+0xa6>
 8003734:	2b70      	cmp	r3, #112	@ 0x70
 8003736:	d87b      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003738:	2b60      	cmp	r3, #96	@ 0x60
 800373a:	d050      	beq.n	80037de <HAL_TIM_ConfigClockSource+0x11a>
 800373c:	2b60      	cmp	r3, #96	@ 0x60
 800373e:	d877      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003740:	2b50      	cmp	r3, #80	@ 0x50
 8003742:	d03c      	beq.n	80037be <HAL_TIM_ConfigClockSource+0xfa>
 8003744:	2b50      	cmp	r3, #80	@ 0x50
 8003746:	d873      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003748:	2b40      	cmp	r3, #64	@ 0x40
 800374a:	d058      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x13a>
 800374c:	2b40      	cmp	r3, #64	@ 0x40
 800374e:	d86f      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b30      	cmp	r3, #48	@ 0x30
 8003752:	d064      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x15a>
 8003754:	2b30      	cmp	r3, #48	@ 0x30
 8003756:	d86b      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b20      	cmp	r3, #32
 800375a:	d060      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x15a>
 800375c:	2b20      	cmp	r3, #32
 800375e:	d867      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d05c      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x15a>
 8003764:	2b10      	cmp	r3, #16
 8003766:	d05a      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x15a>
 8003768:	e062      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800377a:	f000 f950 	bl	8003a1e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800378c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	609a      	str	r2, [r3, #8]
      break;
 8003796:	e04f      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037a8:	f000 f939 	bl	8003a1e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037ba:	609a      	str	r2, [r3, #8]
      break;
 80037bc:	e03c      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ca:	461a      	mov	r2, r3
 80037cc:	f000 f8b0 	bl	8003930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2150      	movs	r1, #80	@ 0x50
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 f907 	bl	80039ea <TIM_ITRx_SetConfig>
      break;
 80037dc:	e02c      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ea:	461a      	mov	r2, r3
 80037ec:	f000 f8ce 	bl	800398c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2160      	movs	r1, #96	@ 0x60
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f8f7 	bl	80039ea <TIM_ITRx_SetConfig>
      break;
 80037fc:	e01c      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800380a:	461a      	mov	r2, r3
 800380c:	f000 f890 	bl	8003930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2140      	movs	r1, #64	@ 0x40
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f8e7 	bl	80039ea <TIM_ITRx_SetConfig>
      break;
 800381c:	e00c      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4619      	mov	r1, r3
 8003828:	4610      	mov	r0, r2
 800382a:	f000 f8de 	bl	80039ea <TIM_ITRx_SetConfig>
      break;
 800382e:	e003      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
      break;
 8003834:	e000      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003836:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003848:	7bfb      	ldrb	r3, [r7, #15]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a2f      	ldr	r2, [pc, #188]	@ (8003924 <TIM_Base_SetConfig+0xd0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00b      	beq.n	8003884 <TIM_Base_SetConfig+0x30>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003872:	d007      	beq.n	8003884 <TIM_Base_SetConfig+0x30>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a2c      	ldr	r2, [pc, #176]	@ (8003928 <TIM_Base_SetConfig+0xd4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_Base_SetConfig+0x30>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a2b      	ldr	r2, [pc, #172]	@ (800392c <TIM_Base_SetConfig+0xd8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d108      	bne.n	8003896 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800388a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a22      	ldr	r2, [pc, #136]	@ (8003924 <TIM_Base_SetConfig+0xd0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00b      	beq.n	80038b6 <TIM_Base_SetConfig+0x62>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a4:	d007      	beq.n	80038b6 <TIM_Base_SetConfig+0x62>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003928 <TIM_Base_SetConfig+0xd4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d003      	beq.n	80038b6 <TIM_Base_SetConfig+0x62>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a1e      	ldr	r2, [pc, #120]	@ (800392c <TIM_Base_SetConfig+0xd8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d108      	bne.n	80038c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003924 <TIM_Base_SetConfig+0xd0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d103      	bne.n	80038fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f023 0201 	bic.w	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	611a      	str	r2, [r3, #16]
  }
}
 800391a:	bf00      	nop
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr
 8003924:	40012c00 	.word	0x40012c00
 8003928:	40000400 	.word	0x40000400
 800392c:	40000800 	.word	0x40000800

08003930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	f023 0201 	bic.w	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800395a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f023 030a 	bic.w	r3, r3, #10
 800396c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	f023 0210 	bic.w	r2, r3, #16
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	031b      	lsls	r3, r3, #12
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	621a      	str	r2, [r3, #32]
}
 80039e0:	bf00      	nop
 80039e2:	371c      	adds	r7, #28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr

080039ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b085      	sub	sp, #20
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f043 0307 	orr.w	r3, r3, #7
 8003a0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	609a      	str	r2, [r3, #8]
}
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr

08003a1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b087      	sub	sp, #28
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]
 8003a2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	021a      	lsls	r2, r3, #8
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	431a      	orrs	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	609a      	str	r2, [r3, #8]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e046      	b.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a16      	ldr	r2, [pc, #88]	@ (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00e      	beq.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac0:	d009      	beq.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a12      	ldr	r2, [pc, #72]	@ (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d004      	beq.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a10      	ldr	r2, [pc, #64]	@ (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d10c      	bne.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003adc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40000800 	.word	0x40000800

08003b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e042      	b.n	8003bb0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fd febe 	bl	80018c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2224      	movs	r2, #36	@ 0x24
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f82b 	bl	8003bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003bf2:	f023 030c 	bic.w	r3, r3, #12
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	68b9      	ldr	r1, [r7, #8]
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699a      	ldr	r2, [r3, #24]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ccc <UART_SetConfig+0x114>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d103      	bne.n	8003c28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c20:	f7ff f908 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	e002      	b.n	8003c2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c28:	f7ff f8f0 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 8003c2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	009a      	lsls	r2, r3, #2
 8003c38:	441a      	add	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c44:	4a22      	ldr	r2, [pc, #136]	@ (8003cd0 <UART_SetConfig+0x118>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	0119      	lsls	r1, r3, #4
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	009a      	lsls	r2, r3, #2
 8003c58:	441a      	add	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c64:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd0 <UART_SetConfig+0x118>)
 8003c66:	fba3 0302 	umull	r0, r3, r3, r2
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	2064      	movs	r0, #100	@ 0x64
 8003c6e:	fb00 f303 	mul.w	r3, r0, r3
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	3332      	adds	r3, #50	@ 0x32
 8003c78:	4a15      	ldr	r2, [pc, #84]	@ (8003cd0 <UART_SetConfig+0x118>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c84:	4419      	add	r1, r3
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009a      	lsls	r2, r3, #2
 8003c90:	441a      	add	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd0 <UART_SetConfig+0x118>)
 8003c9e:	fba3 0302 	umull	r0, r3, r3, r2
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	2064      	movs	r0, #100	@ 0x64
 8003ca6:	fb00 f303 	mul.w	r3, r0, r3
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	3332      	adds	r3, #50	@ 0x32
 8003cb0:	4a07      	ldr	r2, [pc, #28]	@ (8003cd0 <UART_SetConfig+0x118>)
 8003cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	f003 020f 	and.w	r2, r3, #15
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	440a      	add	r2, r1
 8003cc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cc4:	bf00      	nop
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40013800 	.word	0x40013800
 8003cd0:	51eb851f 	.word	0x51eb851f

08003cd4 <__cvt>:
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cda:	461d      	mov	r5, r3
 8003cdc:	bfbb      	ittet	lt
 8003cde:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003ce2:	461d      	movlt	r5, r3
 8003ce4:	2300      	movge	r3, #0
 8003ce6:	232d      	movlt	r3, #45	@ 0x2d
 8003ce8:	b088      	sub	sp, #32
 8003cea:	4614      	mov	r4, r2
 8003cec:	bfb8      	it	lt
 8003cee:	4614      	movlt	r4, r2
 8003cf0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003cf2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003cf4:	7013      	strb	r3, [r2, #0]
 8003cf6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003cf8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003cfc:	f023 0820 	bic.w	r8, r3, #32
 8003d00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003d04:	d005      	beq.n	8003d12 <__cvt+0x3e>
 8003d06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003d0a:	d100      	bne.n	8003d0e <__cvt+0x3a>
 8003d0c:	3601      	adds	r6, #1
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e000      	b.n	8003d14 <__cvt+0x40>
 8003d12:	2303      	movs	r3, #3
 8003d14:	aa07      	add	r2, sp, #28
 8003d16:	9204      	str	r2, [sp, #16]
 8003d18:	aa06      	add	r2, sp, #24
 8003d1a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003d1e:	e9cd 3600 	strd	r3, r6, [sp]
 8003d22:	4622      	mov	r2, r4
 8003d24:	462b      	mov	r3, r5
 8003d26:	f000 fe5f 	bl	80049e8 <_dtoa_r>
 8003d2a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003d2e:	4607      	mov	r7, r0
 8003d30:	d119      	bne.n	8003d66 <__cvt+0x92>
 8003d32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003d34:	07db      	lsls	r3, r3, #31
 8003d36:	d50e      	bpl.n	8003d56 <__cvt+0x82>
 8003d38:	eb00 0906 	add.w	r9, r0, r6
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2300      	movs	r3, #0
 8003d40:	4620      	mov	r0, r4
 8003d42:	4629      	mov	r1, r5
 8003d44:	f7fc fe30 	bl	80009a8 <__aeabi_dcmpeq>
 8003d48:	b108      	cbz	r0, 8003d4e <__cvt+0x7a>
 8003d4a:	f8cd 901c 	str.w	r9, [sp, #28]
 8003d4e:	2230      	movs	r2, #48	@ 0x30
 8003d50:	9b07      	ldr	r3, [sp, #28]
 8003d52:	454b      	cmp	r3, r9
 8003d54:	d31e      	bcc.n	8003d94 <__cvt+0xc0>
 8003d56:	4638      	mov	r0, r7
 8003d58:	9b07      	ldr	r3, [sp, #28]
 8003d5a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003d5c:	1bdb      	subs	r3, r3, r7
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	b008      	add	sp, #32
 8003d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d66:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003d6a:	eb00 0906 	add.w	r9, r0, r6
 8003d6e:	d1e5      	bne.n	8003d3c <__cvt+0x68>
 8003d70:	7803      	ldrb	r3, [r0, #0]
 8003d72:	2b30      	cmp	r3, #48	@ 0x30
 8003d74:	d10a      	bne.n	8003d8c <__cvt+0xb8>
 8003d76:	2200      	movs	r2, #0
 8003d78:	2300      	movs	r3, #0
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	f7fc fe13 	bl	80009a8 <__aeabi_dcmpeq>
 8003d82:	b918      	cbnz	r0, 8003d8c <__cvt+0xb8>
 8003d84:	f1c6 0601 	rsb	r6, r6, #1
 8003d88:	f8ca 6000 	str.w	r6, [sl]
 8003d8c:	f8da 3000 	ldr.w	r3, [sl]
 8003d90:	4499      	add	r9, r3
 8003d92:	e7d3      	b.n	8003d3c <__cvt+0x68>
 8003d94:	1c59      	adds	r1, r3, #1
 8003d96:	9107      	str	r1, [sp, #28]
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	e7d9      	b.n	8003d50 <__cvt+0x7c>

08003d9c <__exponent>:
 8003d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d9e:	2900      	cmp	r1, #0
 8003da0:	bfb6      	itet	lt
 8003da2:	232d      	movlt	r3, #45	@ 0x2d
 8003da4:	232b      	movge	r3, #43	@ 0x2b
 8003da6:	4249      	neglt	r1, r1
 8003da8:	2909      	cmp	r1, #9
 8003daa:	7002      	strb	r2, [r0, #0]
 8003dac:	7043      	strb	r3, [r0, #1]
 8003dae:	dd29      	ble.n	8003e04 <__exponent+0x68>
 8003db0:	f10d 0307 	add.w	r3, sp, #7
 8003db4:	461d      	mov	r5, r3
 8003db6:	270a      	movs	r7, #10
 8003db8:	fbb1 f6f7 	udiv	r6, r1, r7
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	fb07 1416 	mls	r4, r7, r6, r1
 8003dc2:	3430      	adds	r4, #48	@ 0x30
 8003dc4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003dc8:	460c      	mov	r4, r1
 8003dca:	2c63      	cmp	r4, #99	@ 0x63
 8003dcc:	4631      	mov	r1, r6
 8003dce:	f103 33ff 	add.w	r3, r3, #4294967295
 8003dd2:	dcf1      	bgt.n	8003db8 <__exponent+0x1c>
 8003dd4:	3130      	adds	r1, #48	@ 0x30
 8003dd6:	1e94      	subs	r4, r2, #2
 8003dd8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003ddc:	4623      	mov	r3, r4
 8003dde:	1c41      	adds	r1, r0, #1
 8003de0:	42ab      	cmp	r3, r5
 8003de2:	d30a      	bcc.n	8003dfa <__exponent+0x5e>
 8003de4:	f10d 0309 	add.w	r3, sp, #9
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	42ac      	cmp	r4, r5
 8003dec:	bf88      	it	hi
 8003dee:	2300      	movhi	r3, #0
 8003df0:	3302      	adds	r3, #2
 8003df2:	4403      	add	r3, r0
 8003df4:	1a18      	subs	r0, r3, r0
 8003df6:	b003      	add	sp, #12
 8003df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dfa:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003dfe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003e02:	e7ed      	b.n	8003de0 <__exponent+0x44>
 8003e04:	2330      	movs	r3, #48	@ 0x30
 8003e06:	3130      	adds	r1, #48	@ 0x30
 8003e08:	7083      	strb	r3, [r0, #2]
 8003e0a:	70c1      	strb	r1, [r0, #3]
 8003e0c:	1d03      	adds	r3, r0, #4
 8003e0e:	e7f1      	b.n	8003df4 <__exponent+0x58>

08003e10 <_printf_float>:
 8003e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e14:	b091      	sub	sp, #68	@ 0x44
 8003e16:	460c      	mov	r4, r1
 8003e18:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003e1c:	4616      	mov	r6, r2
 8003e1e:	461f      	mov	r7, r3
 8003e20:	4605      	mov	r5, r0
 8003e22:	f000 fcd3 	bl	80047cc <_localeconv_r>
 8003e26:	6803      	ldr	r3, [r0, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	9308      	str	r3, [sp, #32]
 8003e2c:	f7fc f990 	bl	8000150 <strlen>
 8003e30:	2300      	movs	r3, #0
 8003e32:	930e      	str	r3, [sp, #56]	@ 0x38
 8003e34:	f8d8 3000 	ldr.w	r3, [r8]
 8003e38:	9009      	str	r0, [sp, #36]	@ 0x24
 8003e3a:	3307      	adds	r3, #7
 8003e3c:	f023 0307 	bic.w	r3, r3, #7
 8003e40:	f103 0208 	add.w	r2, r3, #8
 8003e44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003e48:	f8d4 b000 	ldr.w	fp, [r4]
 8003e4c:	f8c8 2000 	str.w	r2, [r8]
 8003e50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003e54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003e58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e5a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003e66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003e6a:	4b9c      	ldr	r3, [pc, #624]	@ (80040dc <_printf_float+0x2cc>)
 8003e6c:	f7fc fdce 	bl	8000a0c <__aeabi_dcmpun>
 8003e70:	bb70      	cbnz	r0, 8003ed0 <_printf_float+0xc0>
 8003e72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003e76:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7a:	4b98      	ldr	r3, [pc, #608]	@ (80040dc <_printf_float+0x2cc>)
 8003e7c:	f7fc fda8 	bl	80009d0 <__aeabi_dcmple>
 8003e80:	bb30      	cbnz	r0, 8003ed0 <_printf_float+0xc0>
 8003e82:	2200      	movs	r2, #0
 8003e84:	2300      	movs	r3, #0
 8003e86:	4640      	mov	r0, r8
 8003e88:	4649      	mov	r1, r9
 8003e8a:	f7fc fd97 	bl	80009bc <__aeabi_dcmplt>
 8003e8e:	b110      	cbz	r0, 8003e96 <_printf_float+0x86>
 8003e90:	232d      	movs	r3, #45	@ 0x2d
 8003e92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e96:	4a92      	ldr	r2, [pc, #584]	@ (80040e0 <_printf_float+0x2d0>)
 8003e98:	4b92      	ldr	r3, [pc, #584]	@ (80040e4 <_printf_float+0x2d4>)
 8003e9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003e9e:	bf94      	ite	ls
 8003ea0:	4690      	movls	r8, r2
 8003ea2:	4698      	movhi	r8, r3
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	f04f 0900 	mov.w	r9, #0
 8003eaa:	6123      	str	r3, [r4, #16]
 8003eac:	f02b 0304 	bic.w	r3, fp, #4
 8003eb0:	6023      	str	r3, [r4, #0]
 8003eb2:	4633      	mov	r3, r6
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	9700      	str	r7, [sp, #0]
 8003eba:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003ebc:	f000 f9d4 	bl	8004268 <_printf_common>
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	f040 8090 	bne.w	8003fe6 <_printf_float+0x1d6>
 8003ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eca:	b011      	add	sp, #68	@ 0x44
 8003ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ed0:	4642      	mov	r2, r8
 8003ed2:	464b      	mov	r3, r9
 8003ed4:	4640      	mov	r0, r8
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	f7fc fd98 	bl	8000a0c <__aeabi_dcmpun>
 8003edc:	b148      	cbz	r0, 8003ef2 <_printf_float+0xe2>
 8003ede:	464b      	mov	r3, r9
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bfb8      	it	lt
 8003ee4:	232d      	movlt	r3, #45	@ 0x2d
 8003ee6:	4a80      	ldr	r2, [pc, #512]	@ (80040e8 <_printf_float+0x2d8>)
 8003ee8:	bfb8      	it	lt
 8003eea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003eee:	4b7f      	ldr	r3, [pc, #508]	@ (80040ec <_printf_float+0x2dc>)
 8003ef0:	e7d3      	b.n	8003e9a <_printf_float+0x8a>
 8003ef2:	6863      	ldr	r3, [r4, #4]
 8003ef4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	d13f      	bne.n	8003f7c <_printf_float+0x16c>
 8003efc:	2306      	movs	r3, #6
 8003efe:	6063      	str	r3, [r4, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003f06:	6023      	str	r3, [r4, #0]
 8003f08:	9206      	str	r2, [sp, #24]
 8003f0a:	aa0e      	add	r2, sp, #56	@ 0x38
 8003f0c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003f10:	aa0d      	add	r2, sp, #52	@ 0x34
 8003f12:	9203      	str	r2, [sp, #12]
 8003f14:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003f18:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003f1c:	6863      	ldr	r3, [r4, #4]
 8003f1e:	4642      	mov	r2, r8
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	4628      	mov	r0, r5
 8003f24:	464b      	mov	r3, r9
 8003f26:	910a      	str	r1, [sp, #40]	@ 0x28
 8003f28:	f7ff fed4 	bl	8003cd4 <__cvt>
 8003f2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003f2e:	4680      	mov	r8, r0
 8003f30:	2947      	cmp	r1, #71	@ 0x47
 8003f32:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003f34:	d128      	bne.n	8003f88 <_printf_float+0x178>
 8003f36:	1cc8      	adds	r0, r1, #3
 8003f38:	db02      	blt.n	8003f40 <_printf_float+0x130>
 8003f3a:	6863      	ldr	r3, [r4, #4]
 8003f3c:	4299      	cmp	r1, r3
 8003f3e:	dd40      	ble.n	8003fc2 <_printf_float+0x1b2>
 8003f40:	f1aa 0a02 	sub.w	sl, sl, #2
 8003f44:	fa5f fa8a 	uxtb.w	sl, sl
 8003f48:	4652      	mov	r2, sl
 8003f4a:	3901      	subs	r1, #1
 8003f4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003f50:	910d      	str	r1, [sp, #52]	@ 0x34
 8003f52:	f7ff ff23 	bl	8003d9c <__exponent>
 8003f56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003f58:	4681      	mov	r9, r0
 8003f5a:	1813      	adds	r3, r2, r0
 8003f5c:	2a01      	cmp	r2, #1
 8003f5e:	6123      	str	r3, [r4, #16]
 8003f60:	dc02      	bgt.n	8003f68 <_printf_float+0x158>
 8003f62:	6822      	ldr	r2, [r4, #0]
 8003f64:	07d2      	lsls	r2, r2, #31
 8003f66:	d501      	bpl.n	8003f6c <_printf_float+0x15c>
 8003f68:	3301      	adds	r3, #1
 8003f6a:	6123      	str	r3, [r4, #16]
 8003f6c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d09e      	beq.n	8003eb2 <_printf_float+0xa2>
 8003f74:	232d      	movs	r3, #45	@ 0x2d
 8003f76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f7a:	e79a      	b.n	8003eb2 <_printf_float+0xa2>
 8003f7c:	2947      	cmp	r1, #71	@ 0x47
 8003f7e:	d1bf      	bne.n	8003f00 <_printf_float+0xf0>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1bd      	bne.n	8003f00 <_printf_float+0xf0>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e7ba      	b.n	8003efe <_printf_float+0xee>
 8003f88:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f8c:	d9dc      	bls.n	8003f48 <_printf_float+0x138>
 8003f8e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003f92:	d118      	bne.n	8003fc6 <_printf_float+0x1b6>
 8003f94:	2900      	cmp	r1, #0
 8003f96:	6863      	ldr	r3, [r4, #4]
 8003f98:	dd0b      	ble.n	8003fb2 <_printf_float+0x1a2>
 8003f9a:	6121      	str	r1, [r4, #16]
 8003f9c:	b913      	cbnz	r3, 8003fa4 <_printf_float+0x194>
 8003f9e:	6822      	ldr	r2, [r4, #0]
 8003fa0:	07d0      	lsls	r0, r2, #31
 8003fa2:	d502      	bpl.n	8003faa <_printf_float+0x19a>
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	440b      	add	r3, r1
 8003fa8:	6123      	str	r3, [r4, #16]
 8003faa:	f04f 0900 	mov.w	r9, #0
 8003fae:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003fb0:	e7dc      	b.n	8003f6c <_printf_float+0x15c>
 8003fb2:	b913      	cbnz	r3, 8003fba <_printf_float+0x1aa>
 8003fb4:	6822      	ldr	r2, [r4, #0]
 8003fb6:	07d2      	lsls	r2, r2, #31
 8003fb8:	d501      	bpl.n	8003fbe <_printf_float+0x1ae>
 8003fba:	3302      	adds	r3, #2
 8003fbc:	e7f4      	b.n	8003fa8 <_printf_float+0x198>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e7f2      	b.n	8003fa8 <_printf_float+0x198>
 8003fc2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003fc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003fc8:	4299      	cmp	r1, r3
 8003fca:	db05      	blt.n	8003fd8 <_printf_float+0x1c8>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	6121      	str	r1, [r4, #16]
 8003fd0:	07d8      	lsls	r0, r3, #31
 8003fd2:	d5ea      	bpl.n	8003faa <_printf_float+0x19a>
 8003fd4:	1c4b      	adds	r3, r1, #1
 8003fd6:	e7e7      	b.n	8003fa8 <_printf_float+0x198>
 8003fd8:	2900      	cmp	r1, #0
 8003fda:	bfcc      	ite	gt
 8003fdc:	2201      	movgt	r2, #1
 8003fde:	f1c1 0202 	rsble	r2, r1, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	e7e0      	b.n	8003fa8 <_printf_float+0x198>
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	055a      	lsls	r2, r3, #21
 8003fea:	d407      	bmi.n	8003ffc <_printf_float+0x1ec>
 8003fec:	6923      	ldr	r3, [r4, #16]
 8003fee:	4642      	mov	r2, r8
 8003ff0:	4631      	mov	r1, r6
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	47b8      	blx	r7
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	d12b      	bne.n	8004052 <_printf_float+0x242>
 8003ffa:	e764      	b.n	8003ec6 <_printf_float+0xb6>
 8003ffc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004000:	f240 80dc 	bls.w	80041bc <_printf_float+0x3ac>
 8004004:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004008:	2200      	movs	r2, #0
 800400a:	2300      	movs	r3, #0
 800400c:	f7fc fccc 	bl	80009a8 <__aeabi_dcmpeq>
 8004010:	2800      	cmp	r0, #0
 8004012:	d033      	beq.n	800407c <_printf_float+0x26c>
 8004014:	2301      	movs	r3, #1
 8004016:	4631      	mov	r1, r6
 8004018:	4628      	mov	r0, r5
 800401a:	4a35      	ldr	r2, [pc, #212]	@ (80040f0 <_printf_float+0x2e0>)
 800401c:	47b8      	blx	r7
 800401e:	3001      	adds	r0, #1
 8004020:	f43f af51 	beq.w	8003ec6 <_printf_float+0xb6>
 8004024:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004028:	4543      	cmp	r3, r8
 800402a:	db02      	blt.n	8004032 <_printf_float+0x222>
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	07d8      	lsls	r0, r3, #31
 8004030:	d50f      	bpl.n	8004052 <_printf_float+0x242>
 8004032:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004036:	4631      	mov	r1, r6
 8004038:	4628      	mov	r0, r5
 800403a:	47b8      	blx	r7
 800403c:	3001      	adds	r0, #1
 800403e:	f43f af42 	beq.w	8003ec6 <_printf_float+0xb6>
 8004042:	f04f 0900 	mov.w	r9, #0
 8004046:	f108 38ff 	add.w	r8, r8, #4294967295
 800404a:	f104 0a1a 	add.w	sl, r4, #26
 800404e:	45c8      	cmp	r8, r9
 8004050:	dc09      	bgt.n	8004066 <_printf_float+0x256>
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	079b      	lsls	r3, r3, #30
 8004056:	f100 8102 	bmi.w	800425e <_printf_float+0x44e>
 800405a:	68e0      	ldr	r0, [r4, #12]
 800405c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800405e:	4298      	cmp	r0, r3
 8004060:	bfb8      	it	lt
 8004062:	4618      	movlt	r0, r3
 8004064:	e731      	b.n	8003eca <_printf_float+0xba>
 8004066:	2301      	movs	r3, #1
 8004068:	4652      	mov	r2, sl
 800406a:	4631      	mov	r1, r6
 800406c:	4628      	mov	r0, r5
 800406e:	47b8      	blx	r7
 8004070:	3001      	adds	r0, #1
 8004072:	f43f af28 	beq.w	8003ec6 <_printf_float+0xb6>
 8004076:	f109 0901 	add.w	r9, r9, #1
 800407a:	e7e8      	b.n	800404e <_printf_float+0x23e>
 800407c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800407e:	2b00      	cmp	r3, #0
 8004080:	dc38      	bgt.n	80040f4 <_printf_float+0x2e4>
 8004082:	2301      	movs	r3, #1
 8004084:	4631      	mov	r1, r6
 8004086:	4628      	mov	r0, r5
 8004088:	4a19      	ldr	r2, [pc, #100]	@ (80040f0 <_printf_float+0x2e0>)
 800408a:	47b8      	blx	r7
 800408c:	3001      	adds	r0, #1
 800408e:	f43f af1a 	beq.w	8003ec6 <_printf_float+0xb6>
 8004092:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004096:	ea59 0303 	orrs.w	r3, r9, r3
 800409a:	d102      	bne.n	80040a2 <_printf_float+0x292>
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	07d9      	lsls	r1, r3, #31
 80040a0:	d5d7      	bpl.n	8004052 <_printf_float+0x242>
 80040a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80040a6:	4631      	mov	r1, r6
 80040a8:	4628      	mov	r0, r5
 80040aa:	47b8      	blx	r7
 80040ac:	3001      	adds	r0, #1
 80040ae:	f43f af0a 	beq.w	8003ec6 <_printf_float+0xb6>
 80040b2:	f04f 0a00 	mov.w	sl, #0
 80040b6:	f104 0b1a 	add.w	fp, r4, #26
 80040ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80040bc:	425b      	negs	r3, r3
 80040be:	4553      	cmp	r3, sl
 80040c0:	dc01      	bgt.n	80040c6 <_printf_float+0x2b6>
 80040c2:	464b      	mov	r3, r9
 80040c4:	e793      	b.n	8003fee <_printf_float+0x1de>
 80040c6:	2301      	movs	r3, #1
 80040c8:	465a      	mov	r2, fp
 80040ca:	4631      	mov	r1, r6
 80040cc:	4628      	mov	r0, r5
 80040ce:	47b8      	blx	r7
 80040d0:	3001      	adds	r0, #1
 80040d2:	f43f aef8 	beq.w	8003ec6 <_printf_float+0xb6>
 80040d6:	f10a 0a01 	add.w	sl, sl, #1
 80040da:	e7ee      	b.n	80040ba <_printf_float+0x2aa>
 80040dc:	7fefffff 	.word	0x7fefffff
 80040e0:	080066aa 	.word	0x080066aa
 80040e4:	080066ae 	.word	0x080066ae
 80040e8:	080066b2 	.word	0x080066b2
 80040ec:	080066b6 	.word	0x080066b6
 80040f0:	080066ba 	.word	0x080066ba
 80040f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80040f6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80040fa:	4553      	cmp	r3, sl
 80040fc:	bfa8      	it	ge
 80040fe:	4653      	movge	r3, sl
 8004100:	2b00      	cmp	r3, #0
 8004102:	4699      	mov	r9, r3
 8004104:	dc36      	bgt.n	8004174 <_printf_float+0x364>
 8004106:	f04f 0b00 	mov.w	fp, #0
 800410a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800410e:	f104 021a 	add.w	r2, r4, #26
 8004112:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004114:	930a      	str	r3, [sp, #40]	@ 0x28
 8004116:	eba3 0309 	sub.w	r3, r3, r9
 800411a:	455b      	cmp	r3, fp
 800411c:	dc31      	bgt.n	8004182 <_printf_float+0x372>
 800411e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004120:	459a      	cmp	sl, r3
 8004122:	dc3a      	bgt.n	800419a <_printf_float+0x38a>
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	07da      	lsls	r2, r3, #31
 8004128:	d437      	bmi.n	800419a <_printf_float+0x38a>
 800412a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800412c:	ebaa 0903 	sub.w	r9, sl, r3
 8004130:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004132:	ebaa 0303 	sub.w	r3, sl, r3
 8004136:	4599      	cmp	r9, r3
 8004138:	bfa8      	it	ge
 800413a:	4699      	movge	r9, r3
 800413c:	f1b9 0f00 	cmp.w	r9, #0
 8004140:	dc33      	bgt.n	80041aa <_printf_float+0x39a>
 8004142:	f04f 0800 	mov.w	r8, #0
 8004146:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800414a:	f104 0b1a 	add.w	fp, r4, #26
 800414e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004150:	ebaa 0303 	sub.w	r3, sl, r3
 8004154:	eba3 0309 	sub.w	r3, r3, r9
 8004158:	4543      	cmp	r3, r8
 800415a:	f77f af7a 	ble.w	8004052 <_printf_float+0x242>
 800415e:	2301      	movs	r3, #1
 8004160:	465a      	mov	r2, fp
 8004162:	4631      	mov	r1, r6
 8004164:	4628      	mov	r0, r5
 8004166:	47b8      	blx	r7
 8004168:	3001      	adds	r0, #1
 800416a:	f43f aeac 	beq.w	8003ec6 <_printf_float+0xb6>
 800416e:	f108 0801 	add.w	r8, r8, #1
 8004172:	e7ec      	b.n	800414e <_printf_float+0x33e>
 8004174:	4642      	mov	r2, r8
 8004176:	4631      	mov	r1, r6
 8004178:	4628      	mov	r0, r5
 800417a:	47b8      	blx	r7
 800417c:	3001      	adds	r0, #1
 800417e:	d1c2      	bne.n	8004106 <_printf_float+0x2f6>
 8004180:	e6a1      	b.n	8003ec6 <_printf_float+0xb6>
 8004182:	2301      	movs	r3, #1
 8004184:	4631      	mov	r1, r6
 8004186:	4628      	mov	r0, r5
 8004188:	920a      	str	r2, [sp, #40]	@ 0x28
 800418a:	47b8      	blx	r7
 800418c:	3001      	adds	r0, #1
 800418e:	f43f ae9a 	beq.w	8003ec6 <_printf_float+0xb6>
 8004192:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004194:	f10b 0b01 	add.w	fp, fp, #1
 8004198:	e7bb      	b.n	8004112 <_printf_float+0x302>
 800419a:	4631      	mov	r1, r6
 800419c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041a0:	4628      	mov	r0, r5
 80041a2:	47b8      	blx	r7
 80041a4:	3001      	adds	r0, #1
 80041a6:	d1c0      	bne.n	800412a <_printf_float+0x31a>
 80041a8:	e68d      	b.n	8003ec6 <_printf_float+0xb6>
 80041aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80041ac:	464b      	mov	r3, r9
 80041ae:	4631      	mov	r1, r6
 80041b0:	4628      	mov	r0, r5
 80041b2:	4442      	add	r2, r8
 80041b4:	47b8      	blx	r7
 80041b6:	3001      	adds	r0, #1
 80041b8:	d1c3      	bne.n	8004142 <_printf_float+0x332>
 80041ba:	e684      	b.n	8003ec6 <_printf_float+0xb6>
 80041bc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80041c0:	f1ba 0f01 	cmp.w	sl, #1
 80041c4:	dc01      	bgt.n	80041ca <_printf_float+0x3ba>
 80041c6:	07db      	lsls	r3, r3, #31
 80041c8:	d536      	bpl.n	8004238 <_printf_float+0x428>
 80041ca:	2301      	movs	r3, #1
 80041cc:	4642      	mov	r2, r8
 80041ce:	4631      	mov	r1, r6
 80041d0:	4628      	mov	r0, r5
 80041d2:	47b8      	blx	r7
 80041d4:	3001      	adds	r0, #1
 80041d6:	f43f ae76 	beq.w	8003ec6 <_printf_float+0xb6>
 80041da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041de:	4631      	mov	r1, r6
 80041e0:	4628      	mov	r0, r5
 80041e2:	47b8      	blx	r7
 80041e4:	3001      	adds	r0, #1
 80041e6:	f43f ae6e 	beq.w	8003ec6 <_printf_float+0xb6>
 80041ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80041ee:	2200      	movs	r2, #0
 80041f0:	2300      	movs	r3, #0
 80041f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041f6:	f7fc fbd7 	bl	80009a8 <__aeabi_dcmpeq>
 80041fa:	b9c0      	cbnz	r0, 800422e <_printf_float+0x41e>
 80041fc:	4653      	mov	r3, sl
 80041fe:	f108 0201 	add.w	r2, r8, #1
 8004202:	4631      	mov	r1, r6
 8004204:	4628      	mov	r0, r5
 8004206:	47b8      	blx	r7
 8004208:	3001      	adds	r0, #1
 800420a:	d10c      	bne.n	8004226 <_printf_float+0x416>
 800420c:	e65b      	b.n	8003ec6 <_printf_float+0xb6>
 800420e:	2301      	movs	r3, #1
 8004210:	465a      	mov	r2, fp
 8004212:	4631      	mov	r1, r6
 8004214:	4628      	mov	r0, r5
 8004216:	47b8      	blx	r7
 8004218:	3001      	adds	r0, #1
 800421a:	f43f ae54 	beq.w	8003ec6 <_printf_float+0xb6>
 800421e:	f108 0801 	add.w	r8, r8, #1
 8004222:	45d0      	cmp	r8, sl
 8004224:	dbf3      	blt.n	800420e <_printf_float+0x3fe>
 8004226:	464b      	mov	r3, r9
 8004228:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800422c:	e6e0      	b.n	8003ff0 <_printf_float+0x1e0>
 800422e:	f04f 0800 	mov.w	r8, #0
 8004232:	f104 0b1a 	add.w	fp, r4, #26
 8004236:	e7f4      	b.n	8004222 <_printf_float+0x412>
 8004238:	2301      	movs	r3, #1
 800423a:	4642      	mov	r2, r8
 800423c:	e7e1      	b.n	8004202 <_printf_float+0x3f2>
 800423e:	2301      	movs	r3, #1
 8004240:	464a      	mov	r2, r9
 8004242:	4631      	mov	r1, r6
 8004244:	4628      	mov	r0, r5
 8004246:	47b8      	blx	r7
 8004248:	3001      	adds	r0, #1
 800424a:	f43f ae3c 	beq.w	8003ec6 <_printf_float+0xb6>
 800424e:	f108 0801 	add.w	r8, r8, #1
 8004252:	68e3      	ldr	r3, [r4, #12]
 8004254:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004256:	1a5b      	subs	r3, r3, r1
 8004258:	4543      	cmp	r3, r8
 800425a:	dcf0      	bgt.n	800423e <_printf_float+0x42e>
 800425c:	e6fd      	b.n	800405a <_printf_float+0x24a>
 800425e:	f04f 0800 	mov.w	r8, #0
 8004262:	f104 0919 	add.w	r9, r4, #25
 8004266:	e7f4      	b.n	8004252 <_printf_float+0x442>

08004268 <_printf_common>:
 8004268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800426c:	4616      	mov	r6, r2
 800426e:	4698      	mov	r8, r3
 8004270:	688a      	ldr	r2, [r1, #8]
 8004272:	690b      	ldr	r3, [r1, #16]
 8004274:	4607      	mov	r7, r0
 8004276:	4293      	cmp	r3, r2
 8004278:	bfb8      	it	lt
 800427a:	4613      	movlt	r3, r2
 800427c:	6033      	str	r3, [r6, #0]
 800427e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004282:	460c      	mov	r4, r1
 8004284:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004288:	b10a      	cbz	r2, 800428e <_printf_common+0x26>
 800428a:	3301      	adds	r3, #1
 800428c:	6033      	str	r3, [r6, #0]
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	0699      	lsls	r1, r3, #26
 8004292:	bf42      	ittt	mi
 8004294:	6833      	ldrmi	r3, [r6, #0]
 8004296:	3302      	addmi	r3, #2
 8004298:	6033      	strmi	r3, [r6, #0]
 800429a:	6825      	ldr	r5, [r4, #0]
 800429c:	f015 0506 	ands.w	r5, r5, #6
 80042a0:	d106      	bne.n	80042b0 <_printf_common+0x48>
 80042a2:	f104 0a19 	add.w	sl, r4, #25
 80042a6:	68e3      	ldr	r3, [r4, #12]
 80042a8:	6832      	ldr	r2, [r6, #0]
 80042aa:	1a9b      	subs	r3, r3, r2
 80042ac:	42ab      	cmp	r3, r5
 80042ae:	dc2b      	bgt.n	8004308 <_printf_common+0xa0>
 80042b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042b4:	6822      	ldr	r2, [r4, #0]
 80042b6:	3b00      	subs	r3, #0
 80042b8:	bf18      	it	ne
 80042ba:	2301      	movne	r3, #1
 80042bc:	0692      	lsls	r2, r2, #26
 80042be:	d430      	bmi.n	8004322 <_printf_common+0xba>
 80042c0:	4641      	mov	r1, r8
 80042c2:	4638      	mov	r0, r7
 80042c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042c8:	47c8      	blx	r9
 80042ca:	3001      	adds	r0, #1
 80042cc:	d023      	beq.n	8004316 <_printf_common+0xae>
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	6922      	ldr	r2, [r4, #16]
 80042d2:	f003 0306 	and.w	r3, r3, #6
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	bf14      	ite	ne
 80042da:	2500      	movne	r5, #0
 80042dc:	6833      	ldreq	r3, [r6, #0]
 80042de:	f04f 0600 	mov.w	r6, #0
 80042e2:	bf08      	it	eq
 80042e4:	68e5      	ldreq	r5, [r4, #12]
 80042e6:	f104 041a 	add.w	r4, r4, #26
 80042ea:	bf08      	it	eq
 80042ec:	1aed      	subeq	r5, r5, r3
 80042ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80042f2:	bf08      	it	eq
 80042f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042f8:	4293      	cmp	r3, r2
 80042fa:	bfc4      	itt	gt
 80042fc:	1a9b      	subgt	r3, r3, r2
 80042fe:	18ed      	addgt	r5, r5, r3
 8004300:	42b5      	cmp	r5, r6
 8004302:	d11a      	bne.n	800433a <_printf_common+0xd2>
 8004304:	2000      	movs	r0, #0
 8004306:	e008      	b.n	800431a <_printf_common+0xb2>
 8004308:	2301      	movs	r3, #1
 800430a:	4652      	mov	r2, sl
 800430c:	4641      	mov	r1, r8
 800430e:	4638      	mov	r0, r7
 8004310:	47c8      	blx	r9
 8004312:	3001      	adds	r0, #1
 8004314:	d103      	bne.n	800431e <_printf_common+0xb6>
 8004316:	f04f 30ff 	mov.w	r0, #4294967295
 800431a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800431e:	3501      	adds	r5, #1
 8004320:	e7c1      	b.n	80042a6 <_printf_common+0x3e>
 8004322:	2030      	movs	r0, #48	@ 0x30
 8004324:	18e1      	adds	r1, r4, r3
 8004326:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004330:	4422      	add	r2, r4
 8004332:	3302      	adds	r3, #2
 8004334:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004338:	e7c2      	b.n	80042c0 <_printf_common+0x58>
 800433a:	2301      	movs	r3, #1
 800433c:	4622      	mov	r2, r4
 800433e:	4641      	mov	r1, r8
 8004340:	4638      	mov	r0, r7
 8004342:	47c8      	blx	r9
 8004344:	3001      	adds	r0, #1
 8004346:	d0e6      	beq.n	8004316 <_printf_common+0xae>
 8004348:	3601      	adds	r6, #1
 800434a:	e7d9      	b.n	8004300 <_printf_common+0x98>

0800434c <_printf_i>:
 800434c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004350:	7e0f      	ldrb	r7, [r1, #24]
 8004352:	4691      	mov	r9, r2
 8004354:	2f78      	cmp	r7, #120	@ 0x78
 8004356:	4680      	mov	r8, r0
 8004358:	460c      	mov	r4, r1
 800435a:	469a      	mov	sl, r3
 800435c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800435e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004362:	d807      	bhi.n	8004374 <_printf_i+0x28>
 8004364:	2f62      	cmp	r7, #98	@ 0x62
 8004366:	d80a      	bhi.n	800437e <_printf_i+0x32>
 8004368:	2f00      	cmp	r7, #0
 800436a:	f000 80d3 	beq.w	8004514 <_printf_i+0x1c8>
 800436e:	2f58      	cmp	r7, #88	@ 0x58
 8004370:	f000 80ba 	beq.w	80044e8 <_printf_i+0x19c>
 8004374:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004378:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800437c:	e03a      	b.n	80043f4 <_printf_i+0xa8>
 800437e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004382:	2b15      	cmp	r3, #21
 8004384:	d8f6      	bhi.n	8004374 <_printf_i+0x28>
 8004386:	a101      	add	r1, pc, #4	@ (adr r1, 800438c <_printf_i+0x40>)
 8004388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800438c:	080043e5 	.word	0x080043e5
 8004390:	080043f9 	.word	0x080043f9
 8004394:	08004375 	.word	0x08004375
 8004398:	08004375 	.word	0x08004375
 800439c:	08004375 	.word	0x08004375
 80043a0:	08004375 	.word	0x08004375
 80043a4:	080043f9 	.word	0x080043f9
 80043a8:	08004375 	.word	0x08004375
 80043ac:	08004375 	.word	0x08004375
 80043b0:	08004375 	.word	0x08004375
 80043b4:	08004375 	.word	0x08004375
 80043b8:	080044fb 	.word	0x080044fb
 80043bc:	08004423 	.word	0x08004423
 80043c0:	080044b5 	.word	0x080044b5
 80043c4:	08004375 	.word	0x08004375
 80043c8:	08004375 	.word	0x08004375
 80043cc:	0800451d 	.word	0x0800451d
 80043d0:	08004375 	.word	0x08004375
 80043d4:	08004423 	.word	0x08004423
 80043d8:	08004375 	.word	0x08004375
 80043dc:	08004375 	.word	0x08004375
 80043e0:	080044bd 	.word	0x080044bd
 80043e4:	6833      	ldr	r3, [r6, #0]
 80043e6:	1d1a      	adds	r2, r3, #4
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6032      	str	r2, [r6, #0]
 80043ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043f4:	2301      	movs	r3, #1
 80043f6:	e09e      	b.n	8004536 <_printf_i+0x1ea>
 80043f8:	6833      	ldr	r3, [r6, #0]
 80043fa:	6820      	ldr	r0, [r4, #0]
 80043fc:	1d19      	adds	r1, r3, #4
 80043fe:	6031      	str	r1, [r6, #0]
 8004400:	0606      	lsls	r6, r0, #24
 8004402:	d501      	bpl.n	8004408 <_printf_i+0xbc>
 8004404:	681d      	ldr	r5, [r3, #0]
 8004406:	e003      	b.n	8004410 <_printf_i+0xc4>
 8004408:	0645      	lsls	r5, r0, #25
 800440a:	d5fb      	bpl.n	8004404 <_printf_i+0xb8>
 800440c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004410:	2d00      	cmp	r5, #0
 8004412:	da03      	bge.n	800441c <_printf_i+0xd0>
 8004414:	232d      	movs	r3, #45	@ 0x2d
 8004416:	426d      	negs	r5, r5
 8004418:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800441c:	230a      	movs	r3, #10
 800441e:	4859      	ldr	r0, [pc, #356]	@ (8004584 <_printf_i+0x238>)
 8004420:	e011      	b.n	8004446 <_printf_i+0xfa>
 8004422:	6821      	ldr	r1, [r4, #0]
 8004424:	6833      	ldr	r3, [r6, #0]
 8004426:	0608      	lsls	r0, r1, #24
 8004428:	f853 5b04 	ldr.w	r5, [r3], #4
 800442c:	d402      	bmi.n	8004434 <_printf_i+0xe8>
 800442e:	0649      	lsls	r1, r1, #25
 8004430:	bf48      	it	mi
 8004432:	b2ad      	uxthmi	r5, r5
 8004434:	2f6f      	cmp	r7, #111	@ 0x6f
 8004436:	6033      	str	r3, [r6, #0]
 8004438:	bf14      	ite	ne
 800443a:	230a      	movne	r3, #10
 800443c:	2308      	moveq	r3, #8
 800443e:	4851      	ldr	r0, [pc, #324]	@ (8004584 <_printf_i+0x238>)
 8004440:	2100      	movs	r1, #0
 8004442:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004446:	6866      	ldr	r6, [r4, #4]
 8004448:	2e00      	cmp	r6, #0
 800444a:	bfa8      	it	ge
 800444c:	6821      	ldrge	r1, [r4, #0]
 800444e:	60a6      	str	r6, [r4, #8]
 8004450:	bfa4      	itt	ge
 8004452:	f021 0104 	bicge.w	r1, r1, #4
 8004456:	6021      	strge	r1, [r4, #0]
 8004458:	b90d      	cbnz	r5, 800445e <_printf_i+0x112>
 800445a:	2e00      	cmp	r6, #0
 800445c:	d04b      	beq.n	80044f6 <_printf_i+0x1aa>
 800445e:	4616      	mov	r6, r2
 8004460:	fbb5 f1f3 	udiv	r1, r5, r3
 8004464:	fb03 5711 	mls	r7, r3, r1, r5
 8004468:	5dc7      	ldrb	r7, [r0, r7]
 800446a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800446e:	462f      	mov	r7, r5
 8004470:	42bb      	cmp	r3, r7
 8004472:	460d      	mov	r5, r1
 8004474:	d9f4      	bls.n	8004460 <_printf_i+0x114>
 8004476:	2b08      	cmp	r3, #8
 8004478:	d10b      	bne.n	8004492 <_printf_i+0x146>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	07df      	lsls	r7, r3, #31
 800447e:	d508      	bpl.n	8004492 <_printf_i+0x146>
 8004480:	6923      	ldr	r3, [r4, #16]
 8004482:	6861      	ldr	r1, [r4, #4]
 8004484:	4299      	cmp	r1, r3
 8004486:	bfde      	ittt	le
 8004488:	2330      	movle	r3, #48	@ 0x30
 800448a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800448e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004492:	1b92      	subs	r2, r2, r6
 8004494:	6122      	str	r2, [r4, #16]
 8004496:	464b      	mov	r3, r9
 8004498:	4621      	mov	r1, r4
 800449a:	4640      	mov	r0, r8
 800449c:	f8cd a000 	str.w	sl, [sp]
 80044a0:	aa03      	add	r2, sp, #12
 80044a2:	f7ff fee1 	bl	8004268 <_printf_common>
 80044a6:	3001      	adds	r0, #1
 80044a8:	d14a      	bne.n	8004540 <_printf_i+0x1f4>
 80044aa:	f04f 30ff 	mov.w	r0, #4294967295
 80044ae:	b004      	add	sp, #16
 80044b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	f043 0320 	orr.w	r3, r3, #32
 80044ba:	6023      	str	r3, [r4, #0]
 80044bc:	2778      	movs	r7, #120	@ 0x78
 80044be:	4832      	ldr	r0, [pc, #200]	@ (8004588 <_printf_i+0x23c>)
 80044c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	6831      	ldr	r1, [r6, #0]
 80044c8:	061f      	lsls	r7, r3, #24
 80044ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80044ce:	d402      	bmi.n	80044d6 <_printf_i+0x18a>
 80044d0:	065f      	lsls	r7, r3, #25
 80044d2:	bf48      	it	mi
 80044d4:	b2ad      	uxthmi	r5, r5
 80044d6:	6031      	str	r1, [r6, #0]
 80044d8:	07d9      	lsls	r1, r3, #31
 80044da:	bf44      	itt	mi
 80044dc:	f043 0320 	orrmi.w	r3, r3, #32
 80044e0:	6023      	strmi	r3, [r4, #0]
 80044e2:	b11d      	cbz	r5, 80044ec <_printf_i+0x1a0>
 80044e4:	2310      	movs	r3, #16
 80044e6:	e7ab      	b.n	8004440 <_printf_i+0xf4>
 80044e8:	4826      	ldr	r0, [pc, #152]	@ (8004584 <_printf_i+0x238>)
 80044ea:	e7e9      	b.n	80044c0 <_printf_i+0x174>
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	f023 0320 	bic.w	r3, r3, #32
 80044f2:	6023      	str	r3, [r4, #0]
 80044f4:	e7f6      	b.n	80044e4 <_printf_i+0x198>
 80044f6:	4616      	mov	r6, r2
 80044f8:	e7bd      	b.n	8004476 <_printf_i+0x12a>
 80044fa:	6833      	ldr	r3, [r6, #0]
 80044fc:	6825      	ldr	r5, [r4, #0]
 80044fe:	1d18      	adds	r0, r3, #4
 8004500:	6961      	ldr	r1, [r4, #20]
 8004502:	6030      	str	r0, [r6, #0]
 8004504:	062e      	lsls	r6, r5, #24
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	d501      	bpl.n	800450e <_printf_i+0x1c2>
 800450a:	6019      	str	r1, [r3, #0]
 800450c:	e002      	b.n	8004514 <_printf_i+0x1c8>
 800450e:	0668      	lsls	r0, r5, #25
 8004510:	d5fb      	bpl.n	800450a <_printf_i+0x1be>
 8004512:	8019      	strh	r1, [r3, #0]
 8004514:	2300      	movs	r3, #0
 8004516:	4616      	mov	r6, r2
 8004518:	6123      	str	r3, [r4, #16]
 800451a:	e7bc      	b.n	8004496 <_printf_i+0x14a>
 800451c:	6833      	ldr	r3, [r6, #0]
 800451e:	2100      	movs	r1, #0
 8004520:	1d1a      	adds	r2, r3, #4
 8004522:	6032      	str	r2, [r6, #0]
 8004524:	681e      	ldr	r6, [r3, #0]
 8004526:	6862      	ldr	r2, [r4, #4]
 8004528:	4630      	mov	r0, r6
 800452a:	f000 f9c6 	bl	80048ba <memchr>
 800452e:	b108      	cbz	r0, 8004534 <_printf_i+0x1e8>
 8004530:	1b80      	subs	r0, r0, r6
 8004532:	6060      	str	r0, [r4, #4]
 8004534:	6863      	ldr	r3, [r4, #4]
 8004536:	6123      	str	r3, [r4, #16]
 8004538:	2300      	movs	r3, #0
 800453a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800453e:	e7aa      	b.n	8004496 <_printf_i+0x14a>
 8004540:	4632      	mov	r2, r6
 8004542:	4649      	mov	r1, r9
 8004544:	4640      	mov	r0, r8
 8004546:	6923      	ldr	r3, [r4, #16]
 8004548:	47d0      	blx	sl
 800454a:	3001      	adds	r0, #1
 800454c:	d0ad      	beq.n	80044aa <_printf_i+0x15e>
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	079b      	lsls	r3, r3, #30
 8004552:	d413      	bmi.n	800457c <_printf_i+0x230>
 8004554:	68e0      	ldr	r0, [r4, #12]
 8004556:	9b03      	ldr	r3, [sp, #12]
 8004558:	4298      	cmp	r0, r3
 800455a:	bfb8      	it	lt
 800455c:	4618      	movlt	r0, r3
 800455e:	e7a6      	b.n	80044ae <_printf_i+0x162>
 8004560:	2301      	movs	r3, #1
 8004562:	4632      	mov	r2, r6
 8004564:	4649      	mov	r1, r9
 8004566:	4640      	mov	r0, r8
 8004568:	47d0      	blx	sl
 800456a:	3001      	adds	r0, #1
 800456c:	d09d      	beq.n	80044aa <_printf_i+0x15e>
 800456e:	3501      	adds	r5, #1
 8004570:	68e3      	ldr	r3, [r4, #12]
 8004572:	9903      	ldr	r1, [sp, #12]
 8004574:	1a5b      	subs	r3, r3, r1
 8004576:	42ab      	cmp	r3, r5
 8004578:	dcf2      	bgt.n	8004560 <_printf_i+0x214>
 800457a:	e7eb      	b.n	8004554 <_printf_i+0x208>
 800457c:	2500      	movs	r5, #0
 800457e:	f104 0619 	add.w	r6, r4, #25
 8004582:	e7f5      	b.n	8004570 <_printf_i+0x224>
 8004584:	080066bc 	.word	0x080066bc
 8004588:	080066cd 	.word	0x080066cd

0800458c <std>:
 800458c:	2300      	movs	r3, #0
 800458e:	b510      	push	{r4, lr}
 8004590:	4604      	mov	r4, r0
 8004592:	e9c0 3300 	strd	r3, r3, [r0]
 8004596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800459a:	6083      	str	r3, [r0, #8]
 800459c:	8181      	strh	r1, [r0, #12]
 800459e:	6643      	str	r3, [r0, #100]	@ 0x64
 80045a0:	81c2      	strh	r2, [r0, #14]
 80045a2:	6183      	str	r3, [r0, #24]
 80045a4:	4619      	mov	r1, r3
 80045a6:	2208      	movs	r2, #8
 80045a8:	305c      	adds	r0, #92	@ 0x5c
 80045aa:	f000 f906 	bl	80047ba <memset>
 80045ae:	4b0d      	ldr	r3, [pc, #52]	@ (80045e4 <std+0x58>)
 80045b0:	6224      	str	r4, [r4, #32]
 80045b2:	6263      	str	r3, [r4, #36]	@ 0x24
 80045b4:	4b0c      	ldr	r3, [pc, #48]	@ (80045e8 <std+0x5c>)
 80045b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80045b8:	4b0c      	ldr	r3, [pc, #48]	@ (80045ec <std+0x60>)
 80045ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80045bc:	4b0c      	ldr	r3, [pc, #48]	@ (80045f0 <std+0x64>)
 80045be:	6323      	str	r3, [r4, #48]	@ 0x30
 80045c0:	4b0c      	ldr	r3, [pc, #48]	@ (80045f4 <std+0x68>)
 80045c2:	429c      	cmp	r4, r3
 80045c4:	d006      	beq.n	80045d4 <std+0x48>
 80045c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80045ca:	4294      	cmp	r4, r2
 80045cc:	d002      	beq.n	80045d4 <std+0x48>
 80045ce:	33d0      	adds	r3, #208	@ 0xd0
 80045d0:	429c      	cmp	r4, r3
 80045d2:	d105      	bne.n	80045e0 <std+0x54>
 80045d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80045d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045dc:	f000 b96a 	b.w	80048b4 <__retarget_lock_init_recursive>
 80045e0:	bd10      	pop	{r4, pc}
 80045e2:	bf00      	nop
 80045e4:	08004735 	.word	0x08004735
 80045e8:	08004757 	.word	0x08004757
 80045ec:	0800478f 	.word	0x0800478f
 80045f0:	080047b3 	.word	0x080047b3
 80045f4:	20000358 	.word	0x20000358

080045f8 <stdio_exit_handler>:
 80045f8:	4a02      	ldr	r2, [pc, #8]	@ (8004604 <stdio_exit_handler+0xc>)
 80045fa:	4903      	ldr	r1, [pc, #12]	@ (8004608 <stdio_exit_handler+0x10>)
 80045fc:	4803      	ldr	r0, [pc, #12]	@ (800460c <stdio_exit_handler+0x14>)
 80045fe:	f000 b869 	b.w	80046d4 <_fwalk_sglue>
 8004602:	bf00      	nop
 8004604:	2000000c 	.word	0x2000000c
 8004608:	080061f5 	.word	0x080061f5
 800460c:	2000001c 	.word	0x2000001c

08004610 <cleanup_stdio>:
 8004610:	6841      	ldr	r1, [r0, #4]
 8004612:	4b0c      	ldr	r3, [pc, #48]	@ (8004644 <cleanup_stdio+0x34>)
 8004614:	b510      	push	{r4, lr}
 8004616:	4299      	cmp	r1, r3
 8004618:	4604      	mov	r4, r0
 800461a:	d001      	beq.n	8004620 <cleanup_stdio+0x10>
 800461c:	f001 fdea 	bl	80061f4 <_fflush_r>
 8004620:	68a1      	ldr	r1, [r4, #8]
 8004622:	4b09      	ldr	r3, [pc, #36]	@ (8004648 <cleanup_stdio+0x38>)
 8004624:	4299      	cmp	r1, r3
 8004626:	d002      	beq.n	800462e <cleanup_stdio+0x1e>
 8004628:	4620      	mov	r0, r4
 800462a:	f001 fde3 	bl	80061f4 <_fflush_r>
 800462e:	68e1      	ldr	r1, [r4, #12]
 8004630:	4b06      	ldr	r3, [pc, #24]	@ (800464c <cleanup_stdio+0x3c>)
 8004632:	4299      	cmp	r1, r3
 8004634:	d004      	beq.n	8004640 <cleanup_stdio+0x30>
 8004636:	4620      	mov	r0, r4
 8004638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800463c:	f001 bdda 	b.w	80061f4 <_fflush_r>
 8004640:	bd10      	pop	{r4, pc}
 8004642:	bf00      	nop
 8004644:	20000358 	.word	0x20000358
 8004648:	200003c0 	.word	0x200003c0
 800464c:	20000428 	.word	0x20000428

08004650 <global_stdio_init.part.0>:
 8004650:	b510      	push	{r4, lr}
 8004652:	4b0b      	ldr	r3, [pc, #44]	@ (8004680 <global_stdio_init.part.0+0x30>)
 8004654:	4c0b      	ldr	r4, [pc, #44]	@ (8004684 <global_stdio_init.part.0+0x34>)
 8004656:	4a0c      	ldr	r2, [pc, #48]	@ (8004688 <global_stdio_init.part.0+0x38>)
 8004658:	4620      	mov	r0, r4
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	2104      	movs	r1, #4
 800465e:	2200      	movs	r2, #0
 8004660:	f7ff ff94 	bl	800458c <std>
 8004664:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004668:	2201      	movs	r2, #1
 800466a:	2109      	movs	r1, #9
 800466c:	f7ff ff8e 	bl	800458c <std>
 8004670:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004674:	2202      	movs	r2, #2
 8004676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800467a:	2112      	movs	r1, #18
 800467c:	f7ff bf86 	b.w	800458c <std>
 8004680:	20000490 	.word	0x20000490
 8004684:	20000358 	.word	0x20000358
 8004688:	080045f9 	.word	0x080045f9

0800468c <__sfp_lock_acquire>:
 800468c:	4801      	ldr	r0, [pc, #4]	@ (8004694 <__sfp_lock_acquire+0x8>)
 800468e:	f000 b912 	b.w	80048b6 <__retarget_lock_acquire_recursive>
 8004692:	bf00      	nop
 8004694:	20000499 	.word	0x20000499

08004698 <__sfp_lock_release>:
 8004698:	4801      	ldr	r0, [pc, #4]	@ (80046a0 <__sfp_lock_release+0x8>)
 800469a:	f000 b90d 	b.w	80048b8 <__retarget_lock_release_recursive>
 800469e:	bf00      	nop
 80046a0:	20000499 	.word	0x20000499

080046a4 <__sinit>:
 80046a4:	b510      	push	{r4, lr}
 80046a6:	4604      	mov	r4, r0
 80046a8:	f7ff fff0 	bl	800468c <__sfp_lock_acquire>
 80046ac:	6a23      	ldr	r3, [r4, #32]
 80046ae:	b11b      	cbz	r3, 80046b8 <__sinit+0x14>
 80046b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b4:	f7ff bff0 	b.w	8004698 <__sfp_lock_release>
 80046b8:	4b04      	ldr	r3, [pc, #16]	@ (80046cc <__sinit+0x28>)
 80046ba:	6223      	str	r3, [r4, #32]
 80046bc:	4b04      	ldr	r3, [pc, #16]	@ (80046d0 <__sinit+0x2c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f5      	bne.n	80046b0 <__sinit+0xc>
 80046c4:	f7ff ffc4 	bl	8004650 <global_stdio_init.part.0>
 80046c8:	e7f2      	b.n	80046b0 <__sinit+0xc>
 80046ca:	bf00      	nop
 80046cc:	08004611 	.word	0x08004611
 80046d0:	20000490 	.word	0x20000490

080046d4 <_fwalk_sglue>:
 80046d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046d8:	4607      	mov	r7, r0
 80046da:	4688      	mov	r8, r1
 80046dc:	4614      	mov	r4, r2
 80046de:	2600      	movs	r6, #0
 80046e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046e4:	f1b9 0901 	subs.w	r9, r9, #1
 80046e8:	d505      	bpl.n	80046f6 <_fwalk_sglue+0x22>
 80046ea:	6824      	ldr	r4, [r4, #0]
 80046ec:	2c00      	cmp	r4, #0
 80046ee:	d1f7      	bne.n	80046e0 <_fwalk_sglue+0xc>
 80046f0:	4630      	mov	r0, r6
 80046f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046f6:	89ab      	ldrh	r3, [r5, #12]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d907      	bls.n	800470c <_fwalk_sglue+0x38>
 80046fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004700:	3301      	adds	r3, #1
 8004702:	d003      	beq.n	800470c <_fwalk_sglue+0x38>
 8004704:	4629      	mov	r1, r5
 8004706:	4638      	mov	r0, r7
 8004708:	47c0      	blx	r8
 800470a:	4306      	orrs	r6, r0
 800470c:	3568      	adds	r5, #104	@ 0x68
 800470e:	e7e9      	b.n	80046e4 <_fwalk_sglue+0x10>

08004710 <iprintf>:
 8004710:	b40f      	push	{r0, r1, r2, r3}
 8004712:	b507      	push	{r0, r1, r2, lr}
 8004714:	4906      	ldr	r1, [pc, #24]	@ (8004730 <iprintf+0x20>)
 8004716:	ab04      	add	r3, sp, #16
 8004718:	6808      	ldr	r0, [r1, #0]
 800471a:	f853 2b04 	ldr.w	r2, [r3], #4
 800471e:	6881      	ldr	r1, [r0, #8]
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	f001 fbcf 	bl	8005ec4 <_vfiprintf_r>
 8004726:	b003      	add	sp, #12
 8004728:	f85d eb04 	ldr.w	lr, [sp], #4
 800472c:	b004      	add	sp, #16
 800472e:	4770      	bx	lr
 8004730:	20000018 	.word	0x20000018

08004734 <__sread>:
 8004734:	b510      	push	{r4, lr}
 8004736:	460c      	mov	r4, r1
 8004738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800473c:	f000 f86c 	bl	8004818 <_read_r>
 8004740:	2800      	cmp	r0, #0
 8004742:	bfab      	itete	ge
 8004744:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004746:	89a3      	ldrhlt	r3, [r4, #12]
 8004748:	181b      	addge	r3, r3, r0
 800474a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800474e:	bfac      	ite	ge
 8004750:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004752:	81a3      	strhlt	r3, [r4, #12]
 8004754:	bd10      	pop	{r4, pc}

08004756 <__swrite>:
 8004756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800475a:	461f      	mov	r7, r3
 800475c:	898b      	ldrh	r3, [r1, #12]
 800475e:	4605      	mov	r5, r0
 8004760:	05db      	lsls	r3, r3, #23
 8004762:	460c      	mov	r4, r1
 8004764:	4616      	mov	r6, r2
 8004766:	d505      	bpl.n	8004774 <__swrite+0x1e>
 8004768:	2302      	movs	r3, #2
 800476a:	2200      	movs	r2, #0
 800476c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004770:	f000 f840 	bl	80047f4 <_lseek_r>
 8004774:	89a3      	ldrh	r3, [r4, #12]
 8004776:	4632      	mov	r2, r6
 8004778:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800477c:	81a3      	strh	r3, [r4, #12]
 800477e:	4628      	mov	r0, r5
 8004780:	463b      	mov	r3, r7
 8004782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800478a:	f000 b857 	b.w	800483c <_write_r>

0800478e <__sseek>:
 800478e:	b510      	push	{r4, lr}
 8004790:	460c      	mov	r4, r1
 8004792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004796:	f000 f82d 	bl	80047f4 <_lseek_r>
 800479a:	1c43      	adds	r3, r0, #1
 800479c:	89a3      	ldrh	r3, [r4, #12]
 800479e:	bf15      	itete	ne
 80047a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80047a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80047a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80047aa:	81a3      	strheq	r3, [r4, #12]
 80047ac:	bf18      	it	ne
 80047ae:	81a3      	strhne	r3, [r4, #12]
 80047b0:	bd10      	pop	{r4, pc}

080047b2 <__sclose>:
 80047b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047b6:	f000 b80d 	b.w	80047d4 <_close_r>

080047ba <memset>:
 80047ba:	4603      	mov	r3, r0
 80047bc:	4402      	add	r2, r0
 80047be:	4293      	cmp	r3, r2
 80047c0:	d100      	bne.n	80047c4 <memset+0xa>
 80047c2:	4770      	bx	lr
 80047c4:	f803 1b01 	strb.w	r1, [r3], #1
 80047c8:	e7f9      	b.n	80047be <memset+0x4>
	...

080047cc <_localeconv_r>:
 80047cc:	4800      	ldr	r0, [pc, #0]	@ (80047d0 <_localeconv_r+0x4>)
 80047ce:	4770      	bx	lr
 80047d0:	20000158 	.word	0x20000158

080047d4 <_close_r>:
 80047d4:	b538      	push	{r3, r4, r5, lr}
 80047d6:	2300      	movs	r3, #0
 80047d8:	4d05      	ldr	r5, [pc, #20]	@ (80047f0 <_close_r+0x1c>)
 80047da:	4604      	mov	r4, r0
 80047dc:	4608      	mov	r0, r1
 80047de:	602b      	str	r3, [r5, #0]
 80047e0:	f7fd f975 	bl	8001ace <_close>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d102      	bne.n	80047ee <_close_r+0x1a>
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	b103      	cbz	r3, 80047ee <_close_r+0x1a>
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
 80047f0:	20000494 	.word	0x20000494

080047f4 <_lseek_r>:
 80047f4:	b538      	push	{r3, r4, r5, lr}
 80047f6:	4604      	mov	r4, r0
 80047f8:	4608      	mov	r0, r1
 80047fa:	4611      	mov	r1, r2
 80047fc:	2200      	movs	r2, #0
 80047fe:	4d05      	ldr	r5, [pc, #20]	@ (8004814 <_lseek_r+0x20>)
 8004800:	602a      	str	r2, [r5, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	f7fd f987 	bl	8001b16 <_lseek>
 8004808:	1c43      	adds	r3, r0, #1
 800480a:	d102      	bne.n	8004812 <_lseek_r+0x1e>
 800480c:	682b      	ldr	r3, [r5, #0]
 800480e:	b103      	cbz	r3, 8004812 <_lseek_r+0x1e>
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	bd38      	pop	{r3, r4, r5, pc}
 8004814:	20000494 	.word	0x20000494

08004818 <_read_r>:
 8004818:	b538      	push	{r3, r4, r5, lr}
 800481a:	4604      	mov	r4, r0
 800481c:	4608      	mov	r0, r1
 800481e:	4611      	mov	r1, r2
 8004820:	2200      	movs	r2, #0
 8004822:	4d05      	ldr	r5, [pc, #20]	@ (8004838 <_read_r+0x20>)
 8004824:	602a      	str	r2, [r5, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	f7fd f918 	bl	8001a5c <_read>
 800482c:	1c43      	adds	r3, r0, #1
 800482e:	d102      	bne.n	8004836 <_read_r+0x1e>
 8004830:	682b      	ldr	r3, [r5, #0]
 8004832:	b103      	cbz	r3, 8004836 <_read_r+0x1e>
 8004834:	6023      	str	r3, [r4, #0]
 8004836:	bd38      	pop	{r3, r4, r5, pc}
 8004838:	20000494 	.word	0x20000494

0800483c <_write_r>:
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	4604      	mov	r4, r0
 8004840:	4608      	mov	r0, r1
 8004842:	4611      	mov	r1, r2
 8004844:	2200      	movs	r2, #0
 8004846:	4d05      	ldr	r5, [pc, #20]	@ (800485c <_write_r+0x20>)
 8004848:	602a      	str	r2, [r5, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	f7fd f923 	bl	8001a96 <_write>
 8004850:	1c43      	adds	r3, r0, #1
 8004852:	d102      	bne.n	800485a <_write_r+0x1e>
 8004854:	682b      	ldr	r3, [r5, #0]
 8004856:	b103      	cbz	r3, 800485a <_write_r+0x1e>
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	bd38      	pop	{r3, r4, r5, pc}
 800485c:	20000494 	.word	0x20000494

08004860 <__errno>:
 8004860:	4b01      	ldr	r3, [pc, #4]	@ (8004868 <__errno+0x8>)
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	20000018 	.word	0x20000018

0800486c <__libc_init_array>:
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	2600      	movs	r6, #0
 8004870:	4d0c      	ldr	r5, [pc, #48]	@ (80048a4 <__libc_init_array+0x38>)
 8004872:	4c0d      	ldr	r4, [pc, #52]	@ (80048a8 <__libc_init_array+0x3c>)
 8004874:	1b64      	subs	r4, r4, r5
 8004876:	10a4      	asrs	r4, r4, #2
 8004878:	42a6      	cmp	r6, r4
 800487a:	d109      	bne.n	8004890 <__libc_init_array+0x24>
 800487c:	f001 fec8 	bl	8006610 <_init>
 8004880:	2600      	movs	r6, #0
 8004882:	4d0a      	ldr	r5, [pc, #40]	@ (80048ac <__libc_init_array+0x40>)
 8004884:	4c0a      	ldr	r4, [pc, #40]	@ (80048b0 <__libc_init_array+0x44>)
 8004886:	1b64      	subs	r4, r4, r5
 8004888:	10a4      	asrs	r4, r4, #2
 800488a:	42a6      	cmp	r6, r4
 800488c:	d105      	bne.n	800489a <__libc_init_array+0x2e>
 800488e:	bd70      	pop	{r4, r5, r6, pc}
 8004890:	f855 3b04 	ldr.w	r3, [r5], #4
 8004894:	4798      	blx	r3
 8004896:	3601      	adds	r6, #1
 8004898:	e7ee      	b.n	8004878 <__libc_init_array+0xc>
 800489a:	f855 3b04 	ldr.w	r3, [r5], #4
 800489e:	4798      	blx	r3
 80048a0:	3601      	adds	r6, #1
 80048a2:	e7f2      	b.n	800488a <__libc_init_array+0x1e>
 80048a4:	08006a20 	.word	0x08006a20
 80048a8:	08006a20 	.word	0x08006a20
 80048ac:	08006a20 	.word	0x08006a20
 80048b0:	08006a24 	.word	0x08006a24

080048b4 <__retarget_lock_init_recursive>:
 80048b4:	4770      	bx	lr

080048b6 <__retarget_lock_acquire_recursive>:
 80048b6:	4770      	bx	lr

080048b8 <__retarget_lock_release_recursive>:
 80048b8:	4770      	bx	lr

080048ba <memchr>:
 80048ba:	4603      	mov	r3, r0
 80048bc:	b510      	push	{r4, lr}
 80048be:	b2c9      	uxtb	r1, r1
 80048c0:	4402      	add	r2, r0
 80048c2:	4293      	cmp	r3, r2
 80048c4:	4618      	mov	r0, r3
 80048c6:	d101      	bne.n	80048cc <memchr+0x12>
 80048c8:	2000      	movs	r0, #0
 80048ca:	e003      	b.n	80048d4 <memchr+0x1a>
 80048cc:	7804      	ldrb	r4, [r0, #0]
 80048ce:	3301      	adds	r3, #1
 80048d0:	428c      	cmp	r4, r1
 80048d2:	d1f6      	bne.n	80048c2 <memchr+0x8>
 80048d4:	bd10      	pop	{r4, pc}

080048d6 <quorem>:
 80048d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048da:	6903      	ldr	r3, [r0, #16]
 80048dc:	690c      	ldr	r4, [r1, #16]
 80048de:	4607      	mov	r7, r0
 80048e0:	42a3      	cmp	r3, r4
 80048e2:	db7e      	blt.n	80049e2 <quorem+0x10c>
 80048e4:	3c01      	subs	r4, #1
 80048e6:	00a3      	lsls	r3, r4, #2
 80048e8:	f100 0514 	add.w	r5, r0, #20
 80048ec:	f101 0814 	add.w	r8, r1, #20
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80048fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004900:	3301      	adds	r3, #1
 8004902:	429a      	cmp	r2, r3
 8004904:	fbb2 f6f3 	udiv	r6, r2, r3
 8004908:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800490c:	d32e      	bcc.n	800496c <quorem+0x96>
 800490e:	f04f 0a00 	mov.w	sl, #0
 8004912:	46c4      	mov	ip, r8
 8004914:	46ae      	mov	lr, r5
 8004916:	46d3      	mov	fp, sl
 8004918:	f85c 3b04 	ldr.w	r3, [ip], #4
 800491c:	b298      	uxth	r0, r3
 800491e:	fb06 a000 	mla	r0, r6, r0, sl
 8004922:	0c1b      	lsrs	r3, r3, #16
 8004924:	0c02      	lsrs	r2, r0, #16
 8004926:	fb06 2303 	mla	r3, r6, r3, r2
 800492a:	f8de 2000 	ldr.w	r2, [lr]
 800492e:	b280      	uxth	r0, r0
 8004930:	b292      	uxth	r2, r2
 8004932:	1a12      	subs	r2, r2, r0
 8004934:	445a      	add	r2, fp
 8004936:	f8de 0000 	ldr.w	r0, [lr]
 800493a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800493e:	b29b      	uxth	r3, r3
 8004940:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004944:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004948:	b292      	uxth	r2, r2
 800494a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800494e:	45e1      	cmp	r9, ip
 8004950:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004954:	f84e 2b04 	str.w	r2, [lr], #4
 8004958:	d2de      	bcs.n	8004918 <quorem+0x42>
 800495a:	9b00      	ldr	r3, [sp, #0]
 800495c:	58eb      	ldr	r3, [r5, r3]
 800495e:	b92b      	cbnz	r3, 800496c <quorem+0x96>
 8004960:	9b01      	ldr	r3, [sp, #4]
 8004962:	3b04      	subs	r3, #4
 8004964:	429d      	cmp	r5, r3
 8004966:	461a      	mov	r2, r3
 8004968:	d32f      	bcc.n	80049ca <quorem+0xf4>
 800496a:	613c      	str	r4, [r7, #16]
 800496c:	4638      	mov	r0, r7
 800496e:	f001 f979 	bl	8005c64 <__mcmp>
 8004972:	2800      	cmp	r0, #0
 8004974:	db25      	blt.n	80049c2 <quorem+0xec>
 8004976:	4629      	mov	r1, r5
 8004978:	2000      	movs	r0, #0
 800497a:	f858 2b04 	ldr.w	r2, [r8], #4
 800497e:	f8d1 c000 	ldr.w	ip, [r1]
 8004982:	fa1f fe82 	uxth.w	lr, r2
 8004986:	fa1f f38c 	uxth.w	r3, ip
 800498a:	eba3 030e 	sub.w	r3, r3, lr
 800498e:	4403      	add	r3, r0
 8004990:	0c12      	lsrs	r2, r2, #16
 8004992:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004996:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800499a:	b29b      	uxth	r3, r3
 800499c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049a0:	45c1      	cmp	r9, r8
 80049a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80049a6:	f841 3b04 	str.w	r3, [r1], #4
 80049aa:	d2e6      	bcs.n	800497a <quorem+0xa4>
 80049ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049b4:	b922      	cbnz	r2, 80049c0 <quorem+0xea>
 80049b6:	3b04      	subs	r3, #4
 80049b8:	429d      	cmp	r5, r3
 80049ba:	461a      	mov	r2, r3
 80049bc:	d30b      	bcc.n	80049d6 <quorem+0x100>
 80049be:	613c      	str	r4, [r7, #16]
 80049c0:	3601      	adds	r6, #1
 80049c2:	4630      	mov	r0, r6
 80049c4:	b003      	add	sp, #12
 80049c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	3b04      	subs	r3, #4
 80049ce:	2a00      	cmp	r2, #0
 80049d0:	d1cb      	bne.n	800496a <quorem+0x94>
 80049d2:	3c01      	subs	r4, #1
 80049d4:	e7c6      	b.n	8004964 <quorem+0x8e>
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	3b04      	subs	r3, #4
 80049da:	2a00      	cmp	r2, #0
 80049dc:	d1ef      	bne.n	80049be <quorem+0xe8>
 80049de:	3c01      	subs	r4, #1
 80049e0:	e7ea      	b.n	80049b8 <quorem+0xe2>
 80049e2:	2000      	movs	r0, #0
 80049e4:	e7ee      	b.n	80049c4 <quorem+0xee>
	...

080049e8 <_dtoa_r>:
 80049e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ec:	4614      	mov	r4, r2
 80049ee:	461d      	mov	r5, r3
 80049f0:	69c7      	ldr	r7, [r0, #28]
 80049f2:	b097      	sub	sp, #92	@ 0x5c
 80049f4:	4683      	mov	fp, r0
 80049f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80049fa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80049fc:	b97f      	cbnz	r7, 8004a1e <_dtoa_r+0x36>
 80049fe:	2010      	movs	r0, #16
 8004a00:	f000 fe02 	bl	8005608 <malloc>
 8004a04:	4602      	mov	r2, r0
 8004a06:	f8cb 001c 	str.w	r0, [fp, #28]
 8004a0a:	b920      	cbnz	r0, 8004a16 <_dtoa_r+0x2e>
 8004a0c:	21ef      	movs	r1, #239	@ 0xef
 8004a0e:	4ba8      	ldr	r3, [pc, #672]	@ (8004cb0 <_dtoa_r+0x2c8>)
 8004a10:	48a8      	ldr	r0, [pc, #672]	@ (8004cb4 <_dtoa_r+0x2cc>)
 8004a12:	f001 fcc9 	bl	80063a8 <__assert_func>
 8004a16:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004a1a:	6007      	str	r7, [r0, #0]
 8004a1c:	60c7      	str	r7, [r0, #12]
 8004a1e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004a22:	6819      	ldr	r1, [r3, #0]
 8004a24:	b159      	cbz	r1, 8004a3e <_dtoa_r+0x56>
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	2301      	movs	r3, #1
 8004a2a:	4093      	lsls	r3, r2
 8004a2c:	604a      	str	r2, [r1, #4]
 8004a2e:	608b      	str	r3, [r1, #8]
 8004a30:	4658      	mov	r0, fp
 8004a32:	f000 fedf 	bl	80057f4 <_Bfree>
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	1e2b      	subs	r3, r5, #0
 8004a40:	bfaf      	iteee	ge
 8004a42:	2300      	movge	r3, #0
 8004a44:	2201      	movlt	r2, #1
 8004a46:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004a4a:	9303      	strlt	r3, [sp, #12]
 8004a4c:	bfa8      	it	ge
 8004a4e:	6033      	strge	r3, [r6, #0]
 8004a50:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004a54:	4b98      	ldr	r3, [pc, #608]	@ (8004cb8 <_dtoa_r+0x2d0>)
 8004a56:	bfb8      	it	lt
 8004a58:	6032      	strlt	r2, [r6, #0]
 8004a5a:	ea33 0308 	bics.w	r3, r3, r8
 8004a5e:	d112      	bne.n	8004a86 <_dtoa_r+0x9e>
 8004a60:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004a64:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004a6c:	4323      	orrs	r3, r4
 8004a6e:	f000 8550 	beq.w	8005512 <_dtoa_r+0xb2a>
 8004a72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004a74:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004cbc <_dtoa_r+0x2d4>
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8552 	beq.w	8005522 <_dtoa_r+0xb3a>
 8004a7e:	f10a 0303 	add.w	r3, sl, #3
 8004a82:	f000 bd4c 	b.w	800551e <_dtoa_r+0xb36>
 8004a86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a8a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004a8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a92:	2200      	movs	r2, #0
 8004a94:	2300      	movs	r3, #0
 8004a96:	f7fb ff87 	bl	80009a8 <__aeabi_dcmpeq>
 8004a9a:	4607      	mov	r7, r0
 8004a9c:	b158      	cbz	r0, 8004ab6 <_dtoa_r+0xce>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004aa6:	b113      	cbz	r3, 8004aae <_dtoa_r+0xc6>
 8004aa8:	4b85      	ldr	r3, [pc, #532]	@ (8004cc0 <_dtoa_r+0x2d8>)
 8004aaa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004cc4 <_dtoa_r+0x2dc>
 8004ab2:	f000 bd36 	b.w	8005522 <_dtoa_r+0xb3a>
 8004ab6:	ab14      	add	r3, sp, #80	@ 0x50
 8004ab8:	9301      	str	r3, [sp, #4]
 8004aba:	ab15      	add	r3, sp, #84	@ 0x54
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	4658      	mov	r0, fp
 8004ac0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004ac4:	f001 f97e 	bl	8005dc4 <__d2b>
 8004ac8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004acc:	4681      	mov	r9, r0
 8004ace:	2e00      	cmp	r6, #0
 8004ad0:	d077      	beq.n	8004bc2 <_dtoa_r+0x1da>
 8004ad2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ad6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ad8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ae0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004ae4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004ae8:	9712      	str	r7, [sp, #72]	@ 0x48
 8004aea:	4619      	mov	r1, r3
 8004aec:	2200      	movs	r2, #0
 8004aee:	4b76      	ldr	r3, [pc, #472]	@ (8004cc8 <_dtoa_r+0x2e0>)
 8004af0:	f7fb fb3a 	bl	8000168 <__aeabi_dsub>
 8004af4:	a368      	add	r3, pc, #416	@ (adr r3, 8004c98 <_dtoa_r+0x2b0>)
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	f7fb fced 	bl	80004d8 <__aeabi_dmul>
 8004afe:	a368      	add	r3, pc, #416	@ (adr r3, 8004ca0 <_dtoa_r+0x2b8>)
 8004b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b04:	f7fb fb32 	bl	800016c <__adddf3>
 8004b08:	4604      	mov	r4, r0
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	460d      	mov	r5, r1
 8004b0e:	f7fb fc79 	bl	8000404 <__aeabi_i2d>
 8004b12:	a365      	add	r3, pc, #404	@ (adr r3, 8004ca8 <_dtoa_r+0x2c0>)
 8004b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b18:	f7fb fcde 	bl	80004d8 <__aeabi_dmul>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4620      	mov	r0, r4
 8004b22:	4629      	mov	r1, r5
 8004b24:	f7fb fb22 	bl	800016c <__adddf3>
 8004b28:	4604      	mov	r4, r0
 8004b2a:	460d      	mov	r5, r1
 8004b2c:	f7fb ff84 	bl	8000a38 <__aeabi_d2iz>
 8004b30:	2200      	movs	r2, #0
 8004b32:	4607      	mov	r7, r0
 8004b34:	2300      	movs	r3, #0
 8004b36:	4620      	mov	r0, r4
 8004b38:	4629      	mov	r1, r5
 8004b3a:	f7fb ff3f 	bl	80009bc <__aeabi_dcmplt>
 8004b3e:	b140      	cbz	r0, 8004b52 <_dtoa_r+0x16a>
 8004b40:	4638      	mov	r0, r7
 8004b42:	f7fb fc5f 	bl	8000404 <__aeabi_i2d>
 8004b46:	4622      	mov	r2, r4
 8004b48:	462b      	mov	r3, r5
 8004b4a:	f7fb ff2d 	bl	80009a8 <__aeabi_dcmpeq>
 8004b4e:	b900      	cbnz	r0, 8004b52 <_dtoa_r+0x16a>
 8004b50:	3f01      	subs	r7, #1
 8004b52:	2f16      	cmp	r7, #22
 8004b54:	d853      	bhi.n	8004bfe <_dtoa_r+0x216>
 8004b56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b5a:	4b5c      	ldr	r3, [pc, #368]	@ (8004ccc <_dtoa_r+0x2e4>)
 8004b5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b64:	f7fb ff2a 	bl	80009bc <__aeabi_dcmplt>
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	d04a      	beq.n	8004c02 <_dtoa_r+0x21a>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	3f01      	subs	r7, #1
 8004b70:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004b72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004b74:	1b9b      	subs	r3, r3, r6
 8004b76:	1e5a      	subs	r2, r3, #1
 8004b78:	bf46      	itte	mi
 8004b7a:	f1c3 0801 	rsbmi	r8, r3, #1
 8004b7e:	2300      	movmi	r3, #0
 8004b80:	f04f 0800 	movpl.w	r8, #0
 8004b84:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b86:	bf48      	it	mi
 8004b88:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004b8a:	2f00      	cmp	r7, #0
 8004b8c:	db3b      	blt.n	8004c06 <_dtoa_r+0x21e>
 8004b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b90:	970e      	str	r7, [sp, #56]	@ 0x38
 8004b92:	443b      	add	r3, r7
 8004b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b96:	2300      	movs	r3, #0
 8004b98:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b9c:	2b09      	cmp	r3, #9
 8004b9e:	d866      	bhi.n	8004c6e <_dtoa_r+0x286>
 8004ba0:	2b05      	cmp	r3, #5
 8004ba2:	bfc4      	itt	gt
 8004ba4:	3b04      	subgt	r3, #4
 8004ba6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004ba8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004baa:	bfc8      	it	gt
 8004bac:	2400      	movgt	r4, #0
 8004bae:	f1a3 0302 	sub.w	r3, r3, #2
 8004bb2:	bfd8      	it	le
 8004bb4:	2401      	movle	r4, #1
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d864      	bhi.n	8004c84 <_dtoa_r+0x29c>
 8004bba:	e8df f003 	tbb	[pc, r3]
 8004bbe:	382b      	.short	0x382b
 8004bc0:	5636      	.short	0x5636
 8004bc2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004bc6:	441e      	add	r6, r3
 8004bc8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004bcc:	2b20      	cmp	r3, #32
 8004bce:	bfc1      	itttt	gt
 8004bd0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004bd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8004bd8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004bdc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004be0:	bfd6      	itet	le
 8004be2:	f1c3 0320 	rsble	r3, r3, #32
 8004be6:	ea48 0003 	orrgt.w	r0, r8, r3
 8004bea:	fa04 f003 	lslle.w	r0, r4, r3
 8004bee:	f7fb fbf9 	bl	80003e4 <__aeabi_ui2d>
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004bf8:	3e01      	subs	r6, #1
 8004bfa:	9212      	str	r2, [sp, #72]	@ 0x48
 8004bfc:	e775      	b.n	8004aea <_dtoa_r+0x102>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e7b6      	b.n	8004b70 <_dtoa_r+0x188>
 8004c02:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004c04:	e7b5      	b.n	8004b72 <_dtoa_r+0x18a>
 8004c06:	427b      	negs	r3, r7
 8004c08:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	eba8 0807 	sub.w	r8, r8, r7
 8004c10:	930e      	str	r3, [sp, #56]	@ 0x38
 8004c12:	e7c2      	b.n	8004b9a <_dtoa_r+0x1b2>
 8004c14:	2300      	movs	r3, #0
 8004c16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	dc35      	bgt.n	8004c8a <_dtoa_r+0x2a2>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	461a      	mov	r2, r3
 8004c22:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004c26:	9221      	str	r2, [sp, #132]	@ 0x84
 8004c28:	e00b      	b.n	8004c42 <_dtoa_r+0x25a>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e7f3      	b.n	8004c16 <_dtoa_r+0x22e>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c34:	18fb      	adds	r3, r7, r3
 8004c36:	9308      	str	r3, [sp, #32]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	9307      	str	r3, [sp, #28]
 8004c3e:	bfb8      	it	lt
 8004c40:	2301      	movlt	r3, #1
 8004c42:	2100      	movs	r1, #0
 8004c44:	2204      	movs	r2, #4
 8004c46:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004c4a:	f102 0514 	add.w	r5, r2, #20
 8004c4e:	429d      	cmp	r5, r3
 8004c50:	d91f      	bls.n	8004c92 <_dtoa_r+0x2aa>
 8004c52:	6041      	str	r1, [r0, #4]
 8004c54:	4658      	mov	r0, fp
 8004c56:	f000 fd8d 	bl	8005774 <_Balloc>
 8004c5a:	4682      	mov	sl, r0
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d139      	bne.n	8004cd4 <_dtoa_r+0x2ec>
 8004c60:	4602      	mov	r2, r0
 8004c62:	f240 11af 	movw	r1, #431	@ 0x1af
 8004c66:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd0 <_dtoa_r+0x2e8>)
 8004c68:	e6d2      	b.n	8004a10 <_dtoa_r+0x28>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e7e0      	b.n	8004c30 <_dtoa_r+0x248>
 8004c6e:	2401      	movs	r4, #1
 8004c70:	2300      	movs	r3, #0
 8004c72:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004c74:	9320      	str	r3, [sp, #128]	@ 0x80
 8004c76:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004c80:	2312      	movs	r3, #18
 8004c82:	e7d0      	b.n	8004c26 <_dtoa_r+0x23e>
 8004c84:	2301      	movs	r3, #1
 8004c86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c88:	e7f5      	b.n	8004c76 <_dtoa_r+0x28e>
 8004c8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c8c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004c90:	e7d7      	b.n	8004c42 <_dtoa_r+0x25a>
 8004c92:	3101      	adds	r1, #1
 8004c94:	0052      	lsls	r2, r2, #1
 8004c96:	e7d8      	b.n	8004c4a <_dtoa_r+0x262>
 8004c98:	636f4361 	.word	0x636f4361
 8004c9c:	3fd287a7 	.word	0x3fd287a7
 8004ca0:	8b60c8b3 	.word	0x8b60c8b3
 8004ca4:	3fc68a28 	.word	0x3fc68a28
 8004ca8:	509f79fb 	.word	0x509f79fb
 8004cac:	3fd34413 	.word	0x3fd34413
 8004cb0:	080066eb 	.word	0x080066eb
 8004cb4:	08006702 	.word	0x08006702
 8004cb8:	7ff00000 	.word	0x7ff00000
 8004cbc:	080066e7 	.word	0x080066e7
 8004cc0:	080066bb 	.word	0x080066bb
 8004cc4:	080066ba 	.word	0x080066ba
 8004cc8:	3ff80000 	.word	0x3ff80000
 8004ccc:	080067f8 	.word	0x080067f8
 8004cd0:	0800675a 	.word	0x0800675a
 8004cd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004cd8:	6018      	str	r0, [r3, #0]
 8004cda:	9b07      	ldr	r3, [sp, #28]
 8004cdc:	2b0e      	cmp	r3, #14
 8004cde:	f200 80a4 	bhi.w	8004e2a <_dtoa_r+0x442>
 8004ce2:	2c00      	cmp	r4, #0
 8004ce4:	f000 80a1 	beq.w	8004e2a <_dtoa_r+0x442>
 8004ce8:	2f00      	cmp	r7, #0
 8004cea:	dd33      	ble.n	8004d54 <_dtoa_r+0x36c>
 8004cec:	4b86      	ldr	r3, [pc, #536]	@ (8004f08 <_dtoa_r+0x520>)
 8004cee:	f007 020f 	and.w	r2, r7, #15
 8004cf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cf6:	05f8      	lsls	r0, r7, #23
 8004cf8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004cfc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004d00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004d04:	d516      	bpl.n	8004d34 <_dtoa_r+0x34c>
 8004d06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d0a:	4b80      	ldr	r3, [pc, #512]	@ (8004f0c <_dtoa_r+0x524>)
 8004d0c:	2603      	movs	r6, #3
 8004d0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d12:	f7fb fd0b 	bl	800072c <__aeabi_ddiv>
 8004d16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d1a:	f004 040f 	and.w	r4, r4, #15
 8004d1e:	4d7b      	ldr	r5, [pc, #492]	@ (8004f0c <_dtoa_r+0x524>)
 8004d20:	b954      	cbnz	r4, 8004d38 <_dtoa_r+0x350>
 8004d22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d2a:	f7fb fcff 	bl	800072c <__aeabi_ddiv>
 8004d2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d32:	e028      	b.n	8004d86 <_dtoa_r+0x39e>
 8004d34:	2602      	movs	r6, #2
 8004d36:	e7f2      	b.n	8004d1e <_dtoa_r+0x336>
 8004d38:	07e1      	lsls	r1, r4, #31
 8004d3a:	d508      	bpl.n	8004d4e <_dtoa_r+0x366>
 8004d3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004d44:	f7fb fbc8 	bl	80004d8 <__aeabi_dmul>
 8004d48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d4c:	3601      	adds	r6, #1
 8004d4e:	1064      	asrs	r4, r4, #1
 8004d50:	3508      	adds	r5, #8
 8004d52:	e7e5      	b.n	8004d20 <_dtoa_r+0x338>
 8004d54:	f000 80d2 	beq.w	8004efc <_dtoa_r+0x514>
 8004d58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d5c:	427c      	negs	r4, r7
 8004d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f08 <_dtoa_r+0x520>)
 8004d60:	f004 020f 	and.w	r2, r4, #15
 8004d64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	f7fb fbb4 	bl	80004d8 <__aeabi_dmul>
 8004d70:	2602      	movs	r6, #2
 8004d72:	2300      	movs	r3, #0
 8004d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d78:	4d64      	ldr	r5, [pc, #400]	@ (8004f0c <_dtoa_r+0x524>)
 8004d7a:	1124      	asrs	r4, r4, #4
 8004d7c:	2c00      	cmp	r4, #0
 8004d7e:	f040 80b2 	bne.w	8004ee6 <_dtoa_r+0x4fe>
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1d3      	bne.n	8004d2e <_dtoa_r+0x346>
 8004d86:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004d8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80b7 	beq.w	8004f00 <_dtoa_r+0x518>
 8004d92:	2200      	movs	r2, #0
 8004d94:	4620      	mov	r0, r4
 8004d96:	4629      	mov	r1, r5
 8004d98:	4b5d      	ldr	r3, [pc, #372]	@ (8004f10 <_dtoa_r+0x528>)
 8004d9a:	f7fb fe0f 	bl	80009bc <__aeabi_dcmplt>
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	f000 80ae 	beq.w	8004f00 <_dtoa_r+0x518>
 8004da4:	9b07      	ldr	r3, [sp, #28]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 80aa 	beq.w	8004f00 <_dtoa_r+0x518>
 8004dac:	9b08      	ldr	r3, [sp, #32]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	dd37      	ble.n	8004e22 <_dtoa_r+0x43a>
 8004db2:	1e7b      	subs	r3, r7, #1
 8004db4:	4620      	mov	r0, r4
 8004db6:	9304      	str	r3, [sp, #16]
 8004db8:	2200      	movs	r2, #0
 8004dba:	4629      	mov	r1, r5
 8004dbc:	4b55      	ldr	r3, [pc, #340]	@ (8004f14 <_dtoa_r+0x52c>)
 8004dbe:	f7fb fb8b 	bl	80004d8 <__aeabi_dmul>
 8004dc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dc6:	9c08      	ldr	r4, [sp, #32]
 8004dc8:	3601      	adds	r6, #1
 8004dca:	4630      	mov	r0, r6
 8004dcc:	f7fb fb1a 	bl	8000404 <__aeabi_i2d>
 8004dd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004dd4:	f7fb fb80 	bl	80004d8 <__aeabi_dmul>
 8004dd8:	2200      	movs	r2, #0
 8004dda:	4b4f      	ldr	r3, [pc, #316]	@ (8004f18 <_dtoa_r+0x530>)
 8004ddc:	f7fb f9c6 	bl	800016c <__adddf3>
 8004de0:	4605      	mov	r5, r0
 8004de2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004de6:	2c00      	cmp	r4, #0
 8004de8:	f040 809a 	bne.w	8004f20 <_dtoa_r+0x538>
 8004dec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004df0:	2200      	movs	r2, #0
 8004df2:	4b4a      	ldr	r3, [pc, #296]	@ (8004f1c <_dtoa_r+0x534>)
 8004df4:	f7fb f9b8 	bl	8000168 <__aeabi_dsub>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e00:	462a      	mov	r2, r5
 8004e02:	4633      	mov	r3, r6
 8004e04:	f7fb fdf8 	bl	80009f8 <__aeabi_dcmpgt>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	f040 828e 	bne.w	800532a <_dtoa_r+0x942>
 8004e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e12:	462a      	mov	r2, r5
 8004e14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004e18:	f7fb fdd0 	bl	80009bc <__aeabi_dcmplt>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	f040 8127 	bne.w	8005070 <_dtoa_r+0x688>
 8004e22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004e26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004e2a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f2c0 8163 	blt.w	80050f8 <_dtoa_r+0x710>
 8004e32:	2f0e      	cmp	r7, #14
 8004e34:	f300 8160 	bgt.w	80050f8 <_dtoa_r+0x710>
 8004e38:	4b33      	ldr	r3, [pc, #204]	@ (8004f08 <_dtoa_r+0x520>)
 8004e3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004e3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e42:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004e46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	da03      	bge.n	8004e54 <_dtoa_r+0x46c>
 8004e4c:	9b07      	ldr	r3, [sp, #28]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f340 8100 	ble.w	8005054 <_dtoa_r+0x66c>
 8004e54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004e58:	4656      	mov	r6, sl
 8004e5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e5e:	4620      	mov	r0, r4
 8004e60:	4629      	mov	r1, r5
 8004e62:	f7fb fc63 	bl	800072c <__aeabi_ddiv>
 8004e66:	f7fb fde7 	bl	8000a38 <__aeabi_d2iz>
 8004e6a:	4680      	mov	r8, r0
 8004e6c:	f7fb faca 	bl	8000404 <__aeabi_i2d>
 8004e70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e74:	f7fb fb30 	bl	80004d8 <__aeabi_dmul>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	4629      	mov	r1, r5
 8004e80:	f7fb f972 	bl	8000168 <__aeabi_dsub>
 8004e84:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004e88:	9d07      	ldr	r5, [sp, #28]
 8004e8a:	f806 4b01 	strb.w	r4, [r6], #1
 8004e8e:	eba6 040a 	sub.w	r4, r6, sl
 8004e92:	42a5      	cmp	r5, r4
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	f040 8116 	bne.w	80050c8 <_dtoa_r+0x6e0>
 8004e9c:	f7fb f966 	bl	800016c <__adddf3>
 8004ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	460d      	mov	r5, r1
 8004ea8:	f7fb fda6 	bl	80009f8 <__aeabi_dcmpgt>
 8004eac:	2800      	cmp	r0, #0
 8004eae:	f040 80f8 	bne.w	80050a2 <_dtoa_r+0x6ba>
 8004eb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	4629      	mov	r1, r5
 8004eba:	f7fb fd75 	bl	80009a8 <__aeabi_dcmpeq>
 8004ebe:	b118      	cbz	r0, 8004ec8 <_dtoa_r+0x4e0>
 8004ec0:	f018 0f01 	tst.w	r8, #1
 8004ec4:	f040 80ed 	bne.w	80050a2 <_dtoa_r+0x6ba>
 8004ec8:	4649      	mov	r1, r9
 8004eca:	4658      	mov	r0, fp
 8004ecc:	f000 fc92 	bl	80057f4 <_Bfree>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	7033      	strb	r3, [r6, #0]
 8004ed4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004ed6:	3701      	adds	r7, #1
 8004ed8:	601f      	str	r7, [r3, #0]
 8004eda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8320 	beq.w	8005522 <_dtoa_r+0xb3a>
 8004ee2:	601e      	str	r6, [r3, #0]
 8004ee4:	e31d      	b.n	8005522 <_dtoa_r+0xb3a>
 8004ee6:	07e2      	lsls	r2, r4, #31
 8004ee8:	d505      	bpl.n	8004ef6 <_dtoa_r+0x50e>
 8004eea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004eee:	f7fb faf3 	bl	80004d8 <__aeabi_dmul>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	3601      	adds	r6, #1
 8004ef6:	1064      	asrs	r4, r4, #1
 8004ef8:	3508      	adds	r5, #8
 8004efa:	e73f      	b.n	8004d7c <_dtoa_r+0x394>
 8004efc:	2602      	movs	r6, #2
 8004efe:	e742      	b.n	8004d86 <_dtoa_r+0x39e>
 8004f00:	9c07      	ldr	r4, [sp, #28]
 8004f02:	9704      	str	r7, [sp, #16]
 8004f04:	e761      	b.n	8004dca <_dtoa_r+0x3e2>
 8004f06:	bf00      	nop
 8004f08:	080067f8 	.word	0x080067f8
 8004f0c:	080067d0 	.word	0x080067d0
 8004f10:	3ff00000 	.word	0x3ff00000
 8004f14:	40240000 	.word	0x40240000
 8004f18:	401c0000 	.word	0x401c0000
 8004f1c:	40140000 	.word	0x40140000
 8004f20:	4b70      	ldr	r3, [pc, #448]	@ (80050e4 <_dtoa_r+0x6fc>)
 8004f22:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004f24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f2c:	4454      	add	r4, sl
 8004f2e:	2900      	cmp	r1, #0
 8004f30:	d045      	beq.n	8004fbe <_dtoa_r+0x5d6>
 8004f32:	2000      	movs	r0, #0
 8004f34:	496c      	ldr	r1, [pc, #432]	@ (80050e8 <_dtoa_r+0x700>)
 8004f36:	f7fb fbf9 	bl	800072c <__aeabi_ddiv>
 8004f3a:	4633      	mov	r3, r6
 8004f3c:	462a      	mov	r2, r5
 8004f3e:	f7fb f913 	bl	8000168 <__aeabi_dsub>
 8004f42:	4656      	mov	r6, sl
 8004f44:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004f48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f4c:	f7fb fd74 	bl	8000a38 <__aeabi_d2iz>
 8004f50:	4605      	mov	r5, r0
 8004f52:	f7fb fa57 	bl	8000404 <__aeabi_i2d>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f5e:	f7fb f903 	bl	8000168 <__aeabi_dsub>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	3530      	adds	r5, #48	@ 0x30
 8004f68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004f70:	f806 5b01 	strb.w	r5, [r6], #1
 8004f74:	f7fb fd22 	bl	80009bc <__aeabi_dcmplt>
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	d163      	bne.n	8005044 <_dtoa_r+0x65c>
 8004f7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f80:	2000      	movs	r0, #0
 8004f82:	495a      	ldr	r1, [pc, #360]	@ (80050ec <_dtoa_r+0x704>)
 8004f84:	f7fb f8f0 	bl	8000168 <__aeabi_dsub>
 8004f88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004f8c:	f7fb fd16 	bl	80009bc <__aeabi_dcmplt>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	f040 8087 	bne.w	80050a4 <_dtoa_r+0x6bc>
 8004f96:	42a6      	cmp	r6, r4
 8004f98:	f43f af43 	beq.w	8004e22 <_dtoa_r+0x43a>
 8004f9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	4b53      	ldr	r3, [pc, #332]	@ (80050f0 <_dtoa_r+0x708>)
 8004fa4:	f7fb fa98 	bl	80004d8 <__aeabi_dmul>
 8004fa8:	2200      	movs	r2, #0
 8004faa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fb2:	4b4f      	ldr	r3, [pc, #316]	@ (80050f0 <_dtoa_r+0x708>)
 8004fb4:	f7fb fa90 	bl	80004d8 <__aeabi_dmul>
 8004fb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fbc:	e7c4      	b.n	8004f48 <_dtoa_r+0x560>
 8004fbe:	4631      	mov	r1, r6
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	f7fb fa89 	bl	80004d8 <__aeabi_dmul>
 8004fc6:	4656      	mov	r6, sl
 8004fc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004fcc:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fd2:	f7fb fd31 	bl	8000a38 <__aeabi_d2iz>
 8004fd6:	4605      	mov	r5, r0
 8004fd8:	f7fb fa14 	bl	8000404 <__aeabi_i2d>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fe4:	f7fb f8c0 	bl	8000168 <__aeabi_dsub>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	3530      	adds	r5, #48	@ 0x30
 8004fee:	f806 5b01 	strb.w	r5, [r6], #1
 8004ff2:	42a6      	cmp	r6, r4
 8004ff4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	d124      	bne.n	8005048 <_dtoa_r+0x660>
 8004ffe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005002:	4b39      	ldr	r3, [pc, #228]	@ (80050e8 <_dtoa_r+0x700>)
 8005004:	f7fb f8b2 	bl	800016c <__adddf3>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005010:	f7fb fcf2 	bl	80009f8 <__aeabi_dcmpgt>
 8005014:	2800      	cmp	r0, #0
 8005016:	d145      	bne.n	80050a4 <_dtoa_r+0x6bc>
 8005018:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800501c:	2000      	movs	r0, #0
 800501e:	4932      	ldr	r1, [pc, #200]	@ (80050e8 <_dtoa_r+0x700>)
 8005020:	f7fb f8a2 	bl	8000168 <__aeabi_dsub>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800502c:	f7fb fcc6 	bl	80009bc <__aeabi_dcmplt>
 8005030:	2800      	cmp	r0, #0
 8005032:	f43f aef6 	beq.w	8004e22 <_dtoa_r+0x43a>
 8005036:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005038:	1e73      	subs	r3, r6, #1
 800503a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800503c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005040:	2b30      	cmp	r3, #48	@ 0x30
 8005042:	d0f8      	beq.n	8005036 <_dtoa_r+0x64e>
 8005044:	9f04      	ldr	r7, [sp, #16]
 8005046:	e73f      	b.n	8004ec8 <_dtoa_r+0x4e0>
 8005048:	4b29      	ldr	r3, [pc, #164]	@ (80050f0 <_dtoa_r+0x708>)
 800504a:	f7fb fa45 	bl	80004d8 <__aeabi_dmul>
 800504e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005052:	e7bc      	b.n	8004fce <_dtoa_r+0x5e6>
 8005054:	d10c      	bne.n	8005070 <_dtoa_r+0x688>
 8005056:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800505a:	2200      	movs	r2, #0
 800505c:	4b25      	ldr	r3, [pc, #148]	@ (80050f4 <_dtoa_r+0x70c>)
 800505e:	f7fb fa3b 	bl	80004d8 <__aeabi_dmul>
 8005062:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005066:	f7fb fcbd 	bl	80009e4 <__aeabi_dcmpge>
 800506a:	2800      	cmp	r0, #0
 800506c:	f000 815b 	beq.w	8005326 <_dtoa_r+0x93e>
 8005070:	2400      	movs	r4, #0
 8005072:	4625      	mov	r5, r4
 8005074:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005076:	4656      	mov	r6, sl
 8005078:	43db      	mvns	r3, r3
 800507a:	9304      	str	r3, [sp, #16]
 800507c:	2700      	movs	r7, #0
 800507e:	4621      	mov	r1, r4
 8005080:	4658      	mov	r0, fp
 8005082:	f000 fbb7 	bl	80057f4 <_Bfree>
 8005086:	2d00      	cmp	r5, #0
 8005088:	d0dc      	beq.n	8005044 <_dtoa_r+0x65c>
 800508a:	b12f      	cbz	r7, 8005098 <_dtoa_r+0x6b0>
 800508c:	42af      	cmp	r7, r5
 800508e:	d003      	beq.n	8005098 <_dtoa_r+0x6b0>
 8005090:	4639      	mov	r1, r7
 8005092:	4658      	mov	r0, fp
 8005094:	f000 fbae 	bl	80057f4 <_Bfree>
 8005098:	4629      	mov	r1, r5
 800509a:	4658      	mov	r0, fp
 800509c:	f000 fbaa 	bl	80057f4 <_Bfree>
 80050a0:	e7d0      	b.n	8005044 <_dtoa_r+0x65c>
 80050a2:	9704      	str	r7, [sp, #16]
 80050a4:	4633      	mov	r3, r6
 80050a6:	461e      	mov	r6, r3
 80050a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80050ac:	2a39      	cmp	r2, #57	@ 0x39
 80050ae:	d107      	bne.n	80050c0 <_dtoa_r+0x6d8>
 80050b0:	459a      	cmp	sl, r3
 80050b2:	d1f8      	bne.n	80050a6 <_dtoa_r+0x6be>
 80050b4:	9a04      	ldr	r2, [sp, #16]
 80050b6:	3201      	adds	r2, #1
 80050b8:	9204      	str	r2, [sp, #16]
 80050ba:	2230      	movs	r2, #48	@ 0x30
 80050bc:	f88a 2000 	strb.w	r2, [sl]
 80050c0:	781a      	ldrb	r2, [r3, #0]
 80050c2:	3201      	adds	r2, #1
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	e7bd      	b.n	8005044 <_dtoa_r+0x65c>
 80050c8:	2200      	movs	r2, #0
 80050ca:	4b09      	ldr	r3, [pc, #36]	@ (80050f0 <_dtoa_r+0x708>)
 80050cc:	f7fb fa04 	bl	80004d8 <__aeabi_dmul>
 80050d0:	2200      	movs	r2, #0
 80050d2:	2300      	movs	r3, #0
 80050d4:	4604      	mov	r4, r0
 80050d6:	460d      	mov	r5, r1
 80050d8:	f7fb fc66 	bl	80009a8 <__aeabi_dcmpeq>
 80050dc:	2800      	cmp	r0, #0
 80050de:	f43f aebc 	beq.w	8004e5a <_dtoa_r+0x472>
 80050e2:	e6f1      	b.n	8004ec8 <_dtoa_r+0x4e0>
 80050e4:	080067f8 	.word	0x080067f8
 80050e8:	3fe00000 	.word	0x3fe00000
 80050ec:	3ff00000 	.word	0x3ff00000
 80050f0:	40240000 	.word	0x40240000
 80050f4:	40140000 	.word	0x40140000
 80050f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80050fa:	2a00      	cmp	r2, #0
 80050fc:	f000 80db 	beq.w	80052b6 <_dtoa_r+0x8ce>
 8005100:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005102:	2a01      	cmp	r2, #1
 8005104:	f300 80bf 	bgt.w	8005286 <_dtoa_r+0x89e>
 8005108:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800510a:	2a00      	cmp	r2, #0
 800510c:	f000 80b7 	beq.w	800527e <_dtoa_r+0x896>
 8005110:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005114:	4646      	mov	r6, r8
 8005116:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005118:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800511a:	2101      	movs	r1, #1
 800511c:	441a      	add	r2, r3
 800511e:	4658      	mov	r0, fp
 8005120:	4498      	add	r8, r3
 8005122:	9209      	str	r2, [sp, #36]	@ 0x24
 8005124:	f000 fc1a 	bl	800595c <__i2b>
 8005128:	4605      	mov	r5, r0
 800512a:	b15e      	cbz	r6, 8005144 <_dtoa_r+0x75c>
 800512c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	dd08      	ble.n	8005144 <_dtoa_r+0x75c>
 8005132:	42b3      	cmp	r3, r6
 8005134:	bfa8      	it	ge
 8005136:	4633      	movge	r3, r6
 8005138:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800513a:	eba8 0803 	sub.w	r8, r8, r3
 800513e:	1af6      	subs	r6, r6, r3
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	9309      	str	r3, [sp, #36]	@ 0x24
 8005144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005146:	b1f3      	cbz	r3, 8005186 <_dtoa_r+0x79e>
 8005148:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 80b7 	beq.w	80052be <_dtoa_r+0x8d6>
 8005150:	b18c      	cbz	r4, 8005176 <_dtoa_r+0x78e>
 8005152:	4629      	mov	r1, r5
 8005154:	4622      	mov	r2, r4
 8005156:	4658      	mov	r0, fp
 8005158:	f000 fcbe 	bl	8005ad8 <__pow5mult>
 800515c:	464a      	mov	r2, r9
 800515e:	4601      	mov	r1, r0
 8005160:	4605      	mov	r5, r0
 8005162:	4658      	mov	r0, fp
 8005164:	f000 fc10 	bl	8005988 <__multiply>
 8005168:	4649      	mov	r1, r9
 800516a:	9004      	str	r0, [sp, #16]
 800516c:	4658      	mov	r0, fp
 800516e:	f000 fb41 	bl	80057f4 <_Bfree>
 8005172:	9b04      	ldr	r3, [sp, #16]
 8005174:	4699      	mov	r9, r3
 8005176:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005178:	1b1a      	subs	r2, r3, r4
 800517a:	d004      	beq.n	8005186 <_dtoa_r+0x79e>
 800517c:	4649      	mov	r1, r9
 800517e:	4658      	mov	r0, fp
 8005180:	f000 fcaa 	bl	8005ad8 <__pow5mult>
 8005184:	4681      	mov	r9, r0
 8005186:	2101      	movs	r1, #1
 8005188:	4658      	mov	r0, fp
 800518a:	f000 fbe7 	bl	800595c <__i2b>
 800518e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005190:	4604      	mov	r4, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 81c9 	beq.w	800552a <_dtoa_r+0xb42>
 8005198:	461a      	mov	r2, r3
 800519a:	4601      	mov	r1, r0
 800519c:	4658      	mov	r0, fp
 800519e:	f000 fc9b 	bl	8005ad8 <__pow5mult>
 80051a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051a4:	4604      	mov	r4, r0
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	f300 808f 	bgt.w	80052ca <_dtoa_r+0x8e2>
 80051ac:	9b02      	ldr	r3, [sp, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f040 8087 	bne.w	80052c2 <_dtoa_r+0x8da>
 80051b4:	9b03      	ldr	r3, [sp, #12]
 80051b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f040 8083 	bne.w	80052c6 <_dtoa_r+0x8de>
 80051c0:	9b03      	ldr	r3, [sp, #12]
 80051c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80051c6:	0d1b      	lsrs	r3, r3, #20
 80051c8:	051b      	lsls	r3, r3, #20
 80051ca:	b12b      	cbz	r3, 80051d8 <_dtoa_r+0x7f0>
 80051cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051ce:	f108 0801 	add.w	r8, r8, #1
 80051d2:	3301      	adds	r3, #1
 80051d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80051d6:	2301      	movs	r3, #1
 80051d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80051da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 81aa 	beq.w	8005536 <_dtoa_r+0xb4e>
 80051e2:	6923      	ldr	r3, [r4, #16]
 80051e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80051e8:	6918      	ldr	r0, [r3, #16]
 80051ea:	f000 fb6b 	bl	80058c4 <__hi0bits>
 80051ee:	f1c0 0020 	rsb	r0, r0, #32
 80051f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051f4:	4418      	add	r0, r3
 80051f6:	f010 001f 	ands.w	r0, r0, #31
 80051fa:	d071      	beq.n	80052e0 <_dtoa_r+0x8f8>
 80051fc:	f1c0 0320 	rsb	r3, r0, #32
 8005200:	2b04      	cmp	r3, #4
 8005202:	dd65      	ble.n	80052d0 <_dtoa_r+0x8e8>
 8005204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005206:	f1c0 001c 	rsb	r0, r0, #28
 800520a:	4403      	add	r3, r0
 800520c:	4480      	add	r8, r0
 800520e:	4406      	add	r6, r0
 8005210:	9309      	str	r3, [sp, #36]	@ 0x24
 8005212:	f1b8 0f00 	cmp.w	r8, #0
 8005216:	dd05      	ble.n	8005224 <_dtoa_r+0x83c>
 8005218:	4649      	mov	r1, r9
 800521a:	4642      	mov	r2, r8
 800521c:	4658      	mov	r0, fp
 800521e:	f000 fcb5 	bl	8005b8c <__lshift>
 8005222:	4681      	mov	r9, r0
 8005224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005226:	2b00      	cmp	r3, #0
 8005228:	dd05      	ble.n	8005236 <_dtoa_r+0x84e>
 800522a:	4621      	mov	r1, r4
 800522c:	461a      	mov	r2, r3
 800522e:	4658      	mov	r0, fp
 8005230:	f000 fcac 	bl	8005b8c <__lshift>
 8005234:	4604      	mov	r4, r0
 8005236:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d053      	beq.n	80052e4 <_dtoa_r+0x8fc>
 800523c:	4621      	mov	r1, r4
 800523e:	4648      	mov	r0, r9
 8005240:	f000 fd10 	bl	8005c64 <__mcmp>
 8005244:	2800      	cmp	r0, #0
 8005246:	da4d      	bge.n	80052e4 <_dtoa_r+0x8fc>
 8005248:	1e7b      	subs	r3, r7, #1
 800524a:	4649      	mov	r1, r9
 800524c:	9304      	str	r3, [sp, #16]
 800524e:	220a      	movs	r2, #10
 8005250:	2300      	movs	r3, #0
 8005252:	4658      	mov	r0, fp
 8005254:	f000 faf0 	bl	8005838 <__multadd>
 8005258:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800525a:	4681      	mov	r9, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 816c 	beq.w	800553a <_dtoa_r+0xb52>
 8005262:	2300      	movs	r3, #0
 8005264:	4629      	mov	r1, r5
 8005266:	220a      	movs	r2, #10
 8005268:	4658      	mov	r0, fp
 800526a:	f000 fae5 	bl	8005838 <__multadd>
 800526e:	9b08      	ldr	r3, [sp, #32]
 8005270:	4605      	mov	r5, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	dc61      	bgt.n	800533a <_dtoa_r+0x952>
 8005276:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005278:	2b02      	cmp	r3, #2
 800527a:	dc3b      	bgt.n	80052f4 <_dtoa_r+0x90c>
 800527c:	e05d      	b.n	800533a <_dtoa_r+0x952>
 800527e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005280:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005284:	e746      	b.n	8005114 <_dtoa_r+0x72c>
 8005286:	9b07      	ldr	r3, [sp, #28]
 8005288:	1e5c      	subs	r4, r3, #1
 800528a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800528c:	42a3      	cmp	r3, r4
 800528e:	bfbf      	itttt	lt
 8005290:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005292:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005294:	1ae3      	sublt	r3, r4, r3
 8005296:	18d2      	addlt	r2, r2, r3
 8005298:	bfa8      	it	ge
 800529a:	1b1c      	subge	r4, r3, r4
 800529c:	9b07      	ldr	r3, [sp, #28]
 800529e:	bfbe      	ittt	lt
 80052a0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80052a2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80052a4:	2400      	movlt	r4, #0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bfb5      	itete	lt
 80052aa:	eba8 0603 	sublt.w	r6, r8, r3
 80052ae:	4646      	movge	r6, r8
 80052b0:	2300      	movlt	r3, #0
 80052b2:	9b07      	ldrge	r3, [sp, #28]
 80052b4:	e730      	b.n	8005118 <_dtoa_r+0x730>
 80052b6:	4646      	mov	r6, r8
 80052b8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80052ba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80052bc:	e735      	b.n	800512a <_dtoa_r+0x742>
 80052be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80052c0:	e75c      	b.n	800517c <_dtoa_r+0x794>
 80052c2:	2300      	movs	r3, #0
 80052c4:	e788      	b.n	80051d8 <_dtoa_r+0x7f0>
 80052c6:	9b02      	ldr	r3, [sp, #8]
 80052c8:	e786      	b.n	80051d8 <_dtoa_r+0x7f0>
 80052ca:	2300      	movs	r3, #0
 80052cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80052ce:	e788      	b.n	80051e2 <_dtoa_r+0x7fa>
 80052d0:	d09f      	beq.n	8005212 <_dtoa_r+0x82a>
 80052d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052d4:	331c      	adds	r3, #28
 80052d6:	441a      	add	r2, r3
 80052d8:	4498      	add	r8, r3
 80052da:	441e      	add	r6, r3
 80052dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80052de:	e798      	b.n	8005212 <_dtoa_r+0x82a>
 80052e0:	4603      	mov	r3, r0
 80052e2:	e7f6      	b.n	80052d2 <_dtoa_r+0x8ea>
 80052e4:	9b07      	ldr	r3, [sp, #28]
 80052e6:	9704      	str	r7, [sp, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	dc20      	bgt.n	800532e <_dtoa_r+0x946>
 80052ec:	9308      	str	r3, [sp, #32]
 80052ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	dd1e      	ble.n	8005332 <_dtoa_r+0x94a>
 80052f4:	9b08      	ldr	r3, [sp, #32]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f47f aebc 	bne.w	8005074 <_dtoa_r+0x68c>
 80052fc:	4621      	mov	r1, r4
 80052fe:	2205      	movs	r2, #5
 8005300:	4658      	mov	r0, fp
 8005302:	f000 fa99 	bl	8005838 <__multadd>
 8005306:	4601      	mov	r1, r0
 8005308:	4604      	mov	r4, r0
 800530a:	4648      	mov	r0, r9
 800530c:	f000 fcaa 	bl	8005c64 <__mcmp>
 8005310:	2800      	cmp	r0, #0
 8005312:	f77f aeaf 	ble.w	8005074 <_dtoa_r+0x68c>
 8005316:	2331      	movs	r3, #49	@ 0x31
 8005318:	4656      	mov	r6, sl
 800531a:	f806 3b01 	strb.w	r3, [r6], #1
 800531e:	9b04      	ldr	r3, [sp, #16]
 8005320:	3301      	adds	r3, #1
 8005322:	9304      	str	r3, [sp, #16]
 8005324:	e6aa      	b.n	800507c <_dtoa_r+0x694>
 8005326:	9c07      	ldr	r4, [sp, #28]
 8005328:	9704      	str	r7, [sp, #16]
 800532a:	4625      	mov	r5, r4
 800532c:	e7f3      	b.n	8005316 <_dtoa_r+0x92e>
 800532e:	9b07      	ldr	r3, [sp, #28]
 8005330:	9308      	str	r3, [sp, #32]
 8005332:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8104 	beq.w	8005542 <_dtoa_r+0xb5a>
 800533a:	2e00      	cmp	r6, #0
 800533c:	dd05      	ble.n	800534a <_dtoa_r+0x962>
 800533e:	4629      	mov	r1, r5
 8005340:	4632      	mov	r2, r6
 8005342:	4658      	mov	r0, fp
 8005344:	f000 fc22 	bl	8005b8c <__lshift>
 8005348:	4605      	mov	r5, r0
 800534a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800534c:	2b00      	cmp	r3, #0
 800534e:	d05a      	beq.n	8005406 <_dtoa_r+0xa1e>
 8005350:	4658      	mov	r0, fp
 8005352:	6869      	ldr	r1, [r5, #4]
 8005354:	f000 fa0e 	bl	8005774 <_Balloc>
 8005358:	4606      	mov	r6, r0
 800535a:	b928      	cbnz	r0, 8005368 <_dtoa_r+0x980>
 800535c:	4602      	mov	r2, r0
 800535e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005362:	4b83      	ldr	r3, [pc, #524]	@ (8005570 <_dtoa_r+0xb88>)
 8005364:	f7ff bb54 	b.w	8004a10 <_dtoa_r+0x28>
 8005368:	692a      	ldr	r2, [r5, #16]
 800536a:	f105 010c 	add.w	r1, r5, #12
 800536e:	3202      	adds	r2, #2
 8005370:	0092      	lsls	r2, r2, #2
 8005372:	300c      	adds	r0, #12
 8005374:	f001 f80a 	bl	800638c <memcpy>
 8005378:	2201      	movs	r2, #1
 800537a:	4631      	mov	r1, r6
 800537c:	4658      	mov	r0, fp
 800537e:	f000 fc05 	bl	8005b8c <__lshift>
 8005382:	462f      	mov	r7, r5
 8005384:	4605      	mov	r5, r0
 8005386:	f10a 0301 	add.w	r3, sl, #1
 800538a:	9307      	str	r3, [sp, #28]
 800538c:	9b08      	ldr	r3, [sp, #32]
 800538e:	4453      	add	r3, sl
 8005390:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005392:	9b02      	ldr	r3, [sp, #8]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	930a      	str	r3, [sp, #40]	@ 0x28
 800539a:	9b07      	ldr	r3, [sp, #28]
 800539c:	4621      	mov	r1, r4
 800539e:	3b01      	subs	r3, #1
 80053a0:	4648      	mov	r0, r9
 80053a2:	9302      	str	r3, [sp, #8]
 80053a4:	f7ff fa97 	bl	80048d6 <quorem>
 80053a8:	4639      	mov	r1, r7
 80053aa:	9008      	str	r0, [sp, #32]
 80053ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80053b0:	4648      	mov	r0, r9
 80053b2:	f000 fc57 	bl	8005c64 <__mcmp>
 80053b6:	462a      	mov	r2, r5
 80053b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80053ba:	4621      	mov	r1, r4
 80053bc:	4658      	mov	r0, fp
 80053be:	f000 fc6d 	bl	8005c9c <__mdiff>
 80053c2:	68c2      	ldr	r2, [r0, #12]
 80053c4:	4606      	mov	r6, r0
 80053c6:	bb02      	cbnz	r2, 800540a <_dtoa_r+0xa22>
 80053c8:	4601      	mov	r1, r0
 80053ca:	4648      	mov	r0, r9
 80053cc:	f000 fc4a 	bl	8005c64 <__mcmp>
 80053d0:	4602      	mov	r2, r0
 80053d2:	4631      	mov	r1, r6
 80053d4:	4658      	mov	r0, fp
 80053d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80053d8:	f000 fa0c 	bl	80057f4 <_Bfree>
 80053dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80053de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80053e0:	9e07      	ldr	r6, [sp, #28]
 80053e2:	ea43 0102 	orr.w	r1, r3, r2
 80053e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053e8:	4319      	orrs	r1, r3
 80053ea:	d110      	bne.n	800540e <_dtoa_r+0xa26>
 80053ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80053f0:	d029      	beq.n	8005446 <_dtoa_r+0xa5e>
 80053f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	dd02      	ble.n	80053fe <_dtoa_r+0xa16>
 80053f8:	9b08      	ldr	r3, [sp, #32]
 80053fa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80053fe:	9b02      	ldr	r3, [sp, #8]
 8005400:	f883 8000 	strb.w	r8, [r3]
 8005404:	e63b      	b.n	800507e <_dtoa_r+0x696>
 8005406:	4628      	mov	r0, r5
 8005408:	e7bb      	b.n	8005382 <_dtoa_r+0x99a>
 800540a:	2201      	movs	r2, #1
 800540c:	e7e1      	b.n	80053d2 <_dtoa_r+0x9ea>
 800540e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005410:	2b00      	cmp	r3, #0
 8005412:	db04      	blt.n	800541e <_dtoa_r+0xa36>
 8005414:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005416:	430b      	orrs	r3, r1
 8005418:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800541a:	430b      	orrs	r3, r1
 800541c:	d120      	bne.n	8005460 <_dtoa_r+0xa78>
 800541e:	2a00      	cmp	r2, #0
 8005420:	dded      	ble.n	80053fe <_dtoa_r+0xa16>
 8005422:	4649      	mov	r1, r9
 8005424:	2201      	movs	r2, #1
 8005426:	4658      	mov	r0, fp
 8005428:	f000 fbb0 	bl	8005b8c <__lshift>
 800542c:	4621      	mov	r1, r4
 800542e:	4681      	mov	r9, r0
 8005430:	f000 fc18 	bl	8005c64 <__mcmp>
 8005434:	2800      	cmp	r0, #0
 8005436:	dc03      	bgt.n	8005440 <_dtoa_r+0xa58>
 8005438:	d1e1      	bne.n	80053fe <_dtoa_r+0xa16>
 800543a:	f018 0f01 	tst.w	r8, #1
 800543e:	d0de      	beq.n	80053fe <_dtoa_r+0xa16>
 8005440:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005444:	d1d8      	bne.n	80053f8 <_dtoa_r+0xa10>
 8005446:	2339      	movs	r3, #57	@ 0x39
 8005448:	9a02      	ldr	r2, [sp, #8]
 800544a:	7013      	strb	r3, [r2, #0]
 800544c:	4633      	mov	r3, r6
 800544e:	461e      	mov	r6, r3
 8005450:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005454:	3b01      	subs	r3, #1
 8005456:	2a39      	cmp	r2, #57	@ 0x39
 8005458:	d052      	beq.n	8005500 <_dtoa_r+0xb18>
 800545a:	3201      	adds	r2, #1
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	e60e      	b.n	800507e <_dtoa_r+0x696>
 8005460:	2a00      	cmp	r2, #0
 8005462:	dd07      	ble.n	8005474 <_dtoa_r+0xa8c>
 8005464:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005468:	d0ed      	beq.n	8005446 <_dtoa_r+0xa5e>
 800546a:	9a02      	ldr	r2, [sp, #8]
 800546c:	f108 0301 	add.w	r3, r8, #1
 8005470:	7013      	strb	r3, [r2, #0]
 8005472:	e604      	b.n	800507e <_dtoa_r+0x696>
 8005474:	9b07      	ldr	r3, [sp, #28]
 8005476:	9a07      	ldr	r2, [sp, #28]
 8005478:	f803 8c01 	strb.w	r8, [r3, #-1]
 800547c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800547e:	4293      	cmp	r3, r2
 8005480:	d028      	beq.n	80054d4 <_dtoa_r+0xaec>
 8005482:	4649      	mov	r1, r9
 8005484:	2300      	movs	r3, #0
 8005486:	220a      	movs	r2, #10
 8005488:	4658      	mov	r0, fp
 800548a:	f000 f9d5 	bl	8005838 <__multadd>
 800548e:	42af      	cmp	r7, r5
 8005490:	4681      	mov	r9, r0
 8005492:	f04f 0300 	mov.w	r3, #0
 8005496:	f04f 020a 	mov.w	r2, #10
 800549a:	4639      	mov	r1, r7
 800549c:	4658      	mov	r0, fp
 800549e:	d107      	bne.n	80054b0 <_dtoa_r+0xac8>
 80054a0:	f000 f9ca 	bl	8005838 <__multadd>
 80054a4:	4607      	mov	r7, r0
 80054a6:	4605      	mov	r5, r0
 80054a8:	9b07      	ldr	r3, [sp, #28]
 80054aa:	3301      	adds	r3, #1
 80054ac:	9307      	str	r3, [sp, #28]
 80054ae:	e774      	b.n	800539a <_dtoa_r+0x9b2>
 80054b0:	f000 f9c2 	bl	8005838 <__multadd>
 80054b4:	4629      	mov	r1, r5
 80054b6:	4607      	mov	r7, r0
 80054b8:	2300      	movs	r3, #0
 80054ba:	220a      	movs	r2, #10
 80054bc:	4658      	mov	r0, fp
 80054be:	f000 f9bb 	bl	8005838 <__multadd>
 80054c2:	4605      	mov	r5, r0
 80054c4:	e7f0      	b.n	80054a8 <_dtoa_r+0xac0>
 80054c6:	9b08      	ldr	r3, [sp, #32]
 80054c8:	2700      	movs	r7, #0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bfcc      	ite	gt
 80054ce:	461e      	movgt	r6, r3
 80054d0:	2601      	movle	r6, #1
 80054d2:	4456      	add	r6, sl
 80054d4:	4649      	mov	r1, r9
 80054d6:	2201      	movs	r2, #1
 80054d8:	4658      	mov	r0, fp
 80054da:	f000 fb57 	bl	8005b8c <__lshift>
 80054de:	4621      	mov	r1, r4
 80054e0:	4681      	mov	r9, r0
 80054e2:	f000 fbbf 	bl	8005c64 <__mcmp>
 80054e6:	2800      	cmp	r0, #0
 80054e8:	dcb0      	bgt.n	800544c <_dtoa_r+0xa64>
 80054ea:	d102      	bne.n	80054f2 <_dtoa_r+0xb0a>
 80054ec:	f018 0f01 	tst.w	r8, #1
 80054f0:	d1ac      	bne.n	800544c <_dtoa_r+0xa64>
 80054f2:	4633      	mov	r3, r6
 80054f4:	461e      	mov	r6, r3
 80054f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054fa:	2a30      	cmp	r2, #48	@ 0x30
 80054fc:	d0fa      	beq.n	80054f4 <_dtoa_r+0xb0c>
 80054fe:	e5be      	b.n	800507e <_dtoa_r+0x696>
 8005500:	459a      	cmp	sl, r3
 8005502:	d1a4      	bne.n	800544e <_dtoa_r+0xa66>
 8005504:	9b04      	ldr	r3, [sp, #16]
 8005506:	3301      	adds	r3, #1
 8005508:	9304      	str	r3, [sp, #16]
 800550a:	2331      	movs	r3, #49	@ 0x31
 800550c:	f88a 3000 	strb.w	r3, [sl]
 8005510:	e5b5      	b.n	800507e <_dtoa_r+0x696>
 8005512:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005514:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005574 <_dtoa_r+0xb8c>
 8005518:	b11b      	cbz	r3, 8005522 <_dtoa_r+0xb3a>
 800551a:	f10a 0308 	add.w	r3, sl, #8
 800551e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	4650      	mov	r0, sl
 8005524:	b017      	add	sp, #92	@ 0x5c
 8005526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800552c:	2b01      	cmp	r3, #1
 800552e:	f77f ae3d 	ble.w	80051ac <_dtoa_r+0x7c4>
 8005532:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005534:	930a      	str	r3, [sp, #40]	@ 0x28
 8005536:	2001      	movs	r0, #1
 8005538:	e65b      	b.n	80051f2 <_dtoa_r+0x80a>
 800553a:	9b08      	ldr	r3, [sp, #32]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f77f aed6 	ble.w	80052ee <_dtoa_r+0x906>
 8005542:	4656      	mov	r6, sl
 8005544:	4621      	mov	r1, r4
 8005546:	4648      	mov	r0, r9
 8005548:	f7ff f9c5 	bl	80048d6 <quorem>
 800554c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005550:	9b08      	ldr	r3, [sp, #32]
 8005552:	f806 8b01 	strb.w	r8, [r6], #1
 8005556:	eba6 020a 	sub.w	r2, r6, sl
 800555a:	4293      	cmp	r3, r2
 800555c:	ddb3      	ble.n	80054c6 <_dtoa_r+0xade>
 800555e:	4649      	mov	r1, r9
 8005560:	2300      	movs	r3, #0
 8005562:	220a      	movs	r2, #10
 8005564:	4658      	mov	r0, fp
 8005566:	f000 f967 	bl	8005838 <__multadd>
 800556a:	4681      	mov	r9, r0
 800556c:	e7ea      	b.n	8005544 <_dtoa_r+0xb5c>
 800556e:	bf00      	nop
 8005570:	0800675a 	.word	0x0800675a
 8005574:	080066de 	.word	0x080066de

08005578 <_free_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	4605      	mov	r5, r0
 800557c:	2900      	cmp	r1, #0
 800557e:	d040      	beq.n	8005602 <_free_r+0x8a>
 8005580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005584:	1f0c      	subs	r4, r1, #4
 8005586:	2b00      	cmp	r3, #0
 8005588:	bfb8      	it	lt
 800558a:	18e4      	addlt	r4, r4, r3
 800558c:	f000 f8e6 	bl	800575c <__malloc_lock>
 8005590:	4a1c      	ldr	r2, [pc, #112]	@ (8005604 <_free_r+0x8c>)
 8005592:	6813      	ldr	r3, [r2, #0]
 8005594:	b933      	cbnz	r3, 80055a4 <_free_r+0x2c>
 8005596:	6063      	str	r3, [r4, #4]
 8005598:	6014      	str	r4, [r2, #0]
 800559a:	4628      	mov	r0, r5
 800559c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055a0:	f000 b8e2 	b.w	8005768 <__malloc_unlock>
 80055a4:	42a3      	cmp	r3, r4
 80055a6:	d908      	bls.n	80055ba <_free_r+0x42>
 80055a8:	6820      	ldr	r0, [r4, #0]
 80055aa:	1821      	adds	r1, r4, r0
 80055ac:	428b      	cmp	r3, r1
 80055ae:	bf01      	itttt	eq
 80055b0:	6819      	ldreq	r1, [r3, #0]
 80055b2:	685b      	ldreq	r3, [r3, #4]
 80055b4:	1809      	addeq	r1, r1, r0
 80055b6:	6021      	streq	r1, [r4, #0]
 80055b8:	e7ed      	b.n	8005596 <_free_r+0x1e>
 80055ba:	461a      	mov	r2, r3
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	b10b      	cbz	r3, 80055c4 <_free_r+0x4c>
 80055c0:	42a3      	cmp	r3, r4
 80055c2:	d9fa      	bls.n	80055ba <_free_r+0x42>
 80055c4:	6811      	ldr	r1, [r2, #0]
 80055c6:	1850      	adds	r0, r2, r1
 80055c8:	42a0      	cmp	r0, r4
 80055ca:	d10b      	bne.n	80055e4 <_free_r+0x6c>
 80055cc:	6820      	ldr	r0, [r4, #0]
 80055ce:	4401      	add	r1, r0
 80055d0:	1850      	adds	r0, r2, r1
 80055d2:	4283      	cmp	r3, r0
 80055d4:	6011      	str	r1, [r2, #0]
 80055d6:	d1e0      	bne.n	800559a <_free_r+0x22>
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4408      	add	r0, r1
 80055de:	6010      	str	r0, [r2, #0]
 80055e0:	6053      	str	r3, [r2, #4]
 80055e2:	e7da      	b.n	800559a <_free_r+0x22>
 80055e4:	d902      	bls.n	80055ec <_free_r+0x74>
 80055e6:	230c      	movs	r3, #12
 80055e8:	602b      	str	r3, [r5, #0]
 80055ea:	e7d6      	b.n	800559a <_free_r+0x22>
 80055ec:	6820      	ldr	r0, [r4, #0]
 80055ee:	1821      	adds	r1, r4, r0
 80055f0:	428b      	cmp	r3, r1
 80055f2:	bf01      	itttt	eq
 80055f4:	6819      	ldreq	r1, [r3, #0]
 80055f6:	685b      	ldreq	r3, [r3, #4]
 80055f8:	1809      	addeq	r1, r1, r0
 80055fa:	6021      	streq	r1, [r4, #0]
 80055fc:	6063      	str	r3, [r4, #4]
 80055fe:	6054      	str	r4, [r2, #4]
 8005600:	e7cb      	b.n	800559a <_free_r+0x22>
 8005602:	bd38      	pop	{r3, r4, r5, pc}
 8005604:	200004a0 	.word	0x200004a0

08005608 <malloc>:
 8005608:	4b02      	ldr	r3, [pc, #8]	@ (8005614 <malloc+0xc>)
 800560a:	4601      	mov	r1, r0
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	f000 b825 	b.w	800565c <_malloc_r>
 8005612:	bf00      	nop
 8005614:	20000018 	.word	0x20000018

08005618 <sbrk_aligned>:
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	4e0f      	ldr	r6, [pc, #60]	@ (8005658 <sbrk_aligned+0x40>)
 800561c:	460c      	mov	r4, r1
 800561e:	6831      	ldr	r1, [r6, #0]
 8005620:	4605      	mov	r5, r0
 8005622:	b911      	cbnz	r1, 800562a <sbrk_aligned+0x12>
 8005624:	f000 fea2 	bl	800636c <_sbrk_r>
 8005628:	6030      	str	r0, [r6, #0]
 800562a:	4621      	mov	r1, r4
 800562c:	4628      	mov	r0, r5
 800562e:	f000 fe9d 	bl	800636c <_sbrk_r>
 8005632:	1c43      	adds	r3, r0, #1
 8005634:	d103      	bne.n	800563e <sbrk_aligned+0x26>
 8005636:	f04f 34ff 	mov.w	r4, #4294967295
 800563a:	4620      	mov	r0, r4
 800563c:	bd70      	pop	{r4, r5, r6, pc}
 800563e:	1cc4      	adds	r4, r0, #3
 8005640:	f024 0403 	bic.w	r4, r4, #3
 8005644:	42a0      	cmp	r0, r4
 8005646:	d0f8      	beq.n	800563a <sbrk_aligned+0x22>
 8005648:	1a21      	subs	r1, r4, r0
 800564a:	4628      	mov	r0, r5
 800564c:	f000 fe8e 	bl	800636c <_sbrk_r>
 8005650:	3001      	adds	r0, #1
 8005652:	d1f2      	bne.n	800563a <sbrk_aligned+0x22>
 8005654:	e7ef      	b.n	8005636 <sbrk_aligned+0x1e>
 8005656:	bf00      	nop
 8005658:	2000049c 	.word	0x2000049c

0800565c <_malloc_r>:
 800565c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005660:	1ccd      	adds	r5, r1, #3
 8005662:	f025 0503 	bic.w	r5, r5, #3
 8005666:	3508      	adds	r5, #8
 8005668:	2d0c      	cmp	r5, #12
 800566a:	bf38      	it	cc
 800566c:	250c      	movcc	r5, #12
 800566e:	2d00      	cmp	r5, #0
 8005670:	4606      	mov	r6, r0
 8005672:	db01      	blt.n	8005678 <_malloc_r+0x1c>
 8005674:	42a9      	cmp	r1, r5
 8005676:	d904      	bls.n	8005682 <_malloc_r+0x26>
 8005678:	230c      	movs	r3, #12
 800567a:	6033      	str	r3, [r6, #0]
 800567c:	2000      	movs	r0, #0
 800567e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005682:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005758 <_malloc_r+0xfc>
 8005686:	f000 f869 	bl	800575c <__malloc_lock>
 800568a:	f8d8 3000 	ldr.w	r3, [r8]
 800568e:	461c      	mov	r4, r3
 8005690:	bb44      	cbnz	r4, 80056e4 <_malloc_r+0x88>
 8005692:	4629      	mov	r1, r5
 8005694:	4630      	mov	r0, r6
 8005696:	f7ff ffbf 	bl	8005618 <sbrk_aligned>
 800569a:	1c43      	adds	r3, r0, #1
 800569c:	4604      	mov	r4, r0
 800569e:	d158      	bne.n	8005752 <_malloc_r+0xf6>
 80056a0:	f8d8 4000 	ldr.w	r4, [r8]
 80056a4:	4627      	mov	r7, r4
 80056a6:	2f00      	cmp	r7, #0
 80056a8:	d143      	bne.n	8005732 <_malloc_r+0xd6>
 80056aa:	2c00      	cmp	r4, #0
 80056ac:	d04b      	beq.n	8005746 <_malloc_r+0xea>
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	4639      	mov	r1, r7
 80056b2:	4630      	mov	r0, r6
 80056b4:	eb04 0903 	add.w	r9, r4, r3
 80056b8:	f000 fe58 	bl	800636c <_sbrk_r>
 80056bc:	4581      	cmp	r9, r0
 80056be:	d142      	bne.n	8005746 <_malloc_r+0xea>
 80056c0:	6821      	ldr	r1, [r4, #0]
 80056c2:	4630      	mov	r0, r6
 80056c4:	1a6d      	subs	r5, r5, r1
 80056c6:	4629      	mov	r1, r5
 80056c8:	f7ff ffa6 	bl	8005618 <sbrk_aligned>
 80056cc:	3001      	adds	r0, #1
 80056ce:	d03a      	beq.n	8005746 <_malloc_r+0xea>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	442b      	add	r3, r5
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	f8d8 3000 	ldr.w	r3, [r8]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	bb62      	cbnz	r2, 8005738 <_malloc_r+0xdc>
 80056de:	f8c8 7000 	str.w	r7, [r8]
 80056e2:	e00f      	b.n	8005704 <_malloc_r+0xa8>
 80056e4:	6822      	ldr	r2, [r4, #0]
 80056e6:	1b52      	subs	r2, r2, r5
 80056e8:	d420      	bmi.n	800572c <_malloc_r+0xd0>
 80056ea:	2a0b      	cmp	r2, #11
 80056ec:	d917      	bls.n	800571e <_malloc_r+0xc2>
 80056ee:	1961      	adds	r1, r4, r5
 80056f0:	42a3      	cmp	r3, r4
 80056f2:	6025      	str	r5, [r4, #0]
 80056f4:	bf18      	it	ne
 80056f6:	6059      	strne	r1, [r3, #4]
 80056f8:	6863      	ldr	r3, [r4, #4]
 80056fa:	bf08      	it	eq
 80056fc:	f8c8 1000 	streq.w	r1, [r8]
 8005700:	5162      	str	r2, [r4, r5]
 8005702:	604b      	str	r3, [r1, #4]
 8005704:	4630      	mov	r0, r6
 8005706:	f000 f82f 	bl	8005768 <__malloc_unlock>
 800570a:	f104 000b 	add.w	r0, r4, #11
 800570e:	1d23      	adds	r3, r4, #4
 8005710:	f020 0007 	bic.w	r0, r0, #7
 8005714:	1ac2      	subs	r2, r0, r3
 8005716:	bf1c      	itt	ne
 8005718:	1a1b      	subne	r3, r3, r0
 800571a:	50a3      	strne	r3, [r4, r2]
 800571c:	e7af      	b.n	800567e <_malloc_r+0x22>
 800571e:	6862      	ldr	r2, [r4, #4]
 8005720:	42a3      	cmp	r3, r4
 8005722:	bf0c      	ite	eq
 8005724:	f8c8 2000 	streq.w	r2, [r8]
 8005728:	605a      	strne	r2, [r3, #4]
 800572a:	e7eb      	b.n	8005704 <_malloc_r+0xa8>
 800572c:	4623      	mov	r3, r4
 800572e:	6864      	ldr	r4, [r4, #4]
 8005730:	e7ae      	b.n	8005690 <_malloc_r+0x34>
 8005732:	463c      	mov	r4, r7
 8005734:	687f      	ldr	r7, [r7, #4]
 8005736:	e7b6      	b.n	80056a6 <_malloc_r+0x4a>
 8005738:	461a      	mov	r2, r3
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	42a3      	cmp	r3, r4
 800573e:	d1fb      	bne.n	8005738 <_malloc_r+0xdc>
 8005740:	2300      	movs	r3, #0
 8005742:	6053      	str	r3, [r2, #4]
 8005744:	e7de      	b.n	8005704 <_malloc_r+0xa8>
 8005746:	230c      	movs	r3, #12
 8005748:	4630      	mov	r0, r6
 800574a:	6033      	str	r3, [r6, #0]
 800574c:	f000 f80c 	bl	8005768 <__malloc_unlock>
 8005750:	e794      	b.n	800567c <_malloc_r+0x20>
 8005752:	6005      	str	r5, [r0, #0]
 8005754:	e7d6      	b.n	8005704 <_malloc_r+0xa8>
 8005756:	bf00      	nop
 8005758:	200004a0 	.word	0x200004a0

0800575c <__malloc_lock>:
 800575c:	4801      	ldr	r0, [pc, #4]	@ (8005764 <__malloc_lock+0x8>)
 800575e:	f7ff b8aa 	b.w	80048b6 <__retarget_lock_acquire_recursive>
 8005762:	bf00      	nop
 8005764:	20000498 	.word	0x20000498

08005768 <__malloc_unlock>:
 8005768:	4801      	ldr	r0, [pc, #4]	@ (8005770 <__malloc_unlock+0x8>)
 800576a:	f7ff b8a5 	b.w	80048b8 <__retarget_lock_release_recursive>
 800576e:	bf00      	nop
 8005770:	20000498 	.word	0x20000498

08005774 <_Balloc>:
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	69c6      	ldr	r6, [r0, #28]
 8005778:	4604      	mov	r4, r0
 800577a:	460d      	mov	r5, r1
 800577c:	b976      	cbnz	r6, 800579c <_Balloc+0x28>
 800577e:	2010      	movs	r0, #16
 8005780:	f7ff ff42 	bl	8005608 <malloc>
 8005784:	4602      	mov	r2, r0
 8005786:	61e0      	str	r0, [r4, #28]
 8005788:	b920      	cbnz	r0, 8005794 <_Balloc+0x20>
 800578a:	216b      	movs	r1, #107	@ 0x6b
 800578c:	4b17      	ldr	r3, [pc, #92]	@ (80057ec <_Balloc+0x78>)
 800578e:	4818      	ldr	r0, [pc, #96]	@ (80057f0 <_Balloc+0x7c>)
 8005790:	f000 fe0a 	bl	80063a8 <__assert_func>
 8005794:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005798:	6006      	str	r6, [r0, #0]
 800579a:	60c6      	str	r6, [r0, #12]
 800579c:	69e6      	ldr	r6, [r4, #28]
 800579e:	68f3      	ldr	r3, [r6, #12]
 80057a0:	b183      	cbz	r3, 80057c4 <_Balloc+0x50>
 80057a2:	69e3      	ldr	r3, [r4, #28]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80057aa:	b9b8      	cbnz	r0, 80057dc <_Balloc+0x68>
 80057ac:	2101      	movs	r1, #1
 80057ae:	fa01 f605 	lsl.w	r6, r1, r5
 80057b2:	1d72      	adds	r2, r6, #5
 80057b4:	4620      	mov	r0, r4
 80057b6:	0092      	lsls	r2, r2, #2
 80057b8:	f000 fe14 	bl	80063e4 <_calloc_r>
 80057bc:	b160      	cbz	r0, 80057d8 <_Balloc+0x64>
 80057be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80057c2:	e00e      	b.n	80057e2 <_Balloc+0x6e>
 80057c4:	2221      	movs	r2, #33	@ 0x21
 80057c6:	2104      	movs	r1, #4
 80057c8:	4620      	mov	r0, r4
 80057ca:	f000 fe0b 	bl	80063e4 <_calloc_r>
 80057ce:	69e3      	ldr	r3, [r4, #28]
 80057d0:	60f0      	str	r0, [r6, #12]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e4      	bne.n	80057a2 <_Balloc+0x2e>
 80057d8:	2000      	movs	r0, #0
 80057da:	bd70      	pop	{r4, r5, r6, pc}
 80057dc:	6802      	ldr	r2, [r0, #0]
 80057de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80057e2:	2300      	movs	r3, #0
 80057e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80057e8:	e7f7      	b.n	80057da <_Balloc+0x66>
 80057ea:	bf00      	nop
 80057ec:	080066eb 	.word	0x080066eb
 80057f0:	0800676b 	.word	0x0800676b

080057f4 <_Bfree>:
 80057f4:	b570      	push	{r4, r5, r6, lr}
 80057f6:	69c6      	ldr	r6, [r0, #28]
 80057f8:	4605      	mov	r5, r0
 80057fa:	460c      	mov	r4, r1
 80057fc:	b976      	cbnz	r6, 800581c <_Bfree+0x28>
 80057fe:	2010      	movs	r0, #16
 8005800:	f7ff ff02 	bl	8005608 <malloc>
 8005804:	4602      	mov	r2, r0
 8005806:	61e8      	str	r0, [r5, #28]
 8005808:	b920      	cbnz	r0, 8005814 <_Bfree+0x20>
 800580a:	218f      	movs	r1, #143	@ 0x8f
 800580c:	4b08      	ldr	r3, [pc, #32]	@ (8005830 <_Bfree+0x3c>)
 800580e:	4809      	ldr	r0, [pc, #36]	@ (8005834 <_Bfree+0x40>)
 8005810:	f000 fdca 	bl	80063a8 <__assert_func>
 8005814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005818:	6006      	str	r6, [r0, #0]
 800581a:	60c6      	str	r6, [r0, #12]
 800581c:	b13c      	cbz	r4, 800582e <_Bfree+0x3a>
 800581e:	69eb      	ldr	r3, [r5, #28]
 8005820:	6862      	ldr	r2, [r4, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005828:	6021      	str	r1, [r4, #0]
 800582a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800582e:	bd70      	pop	{r4, r5, r6, pc}
 8005830:	080066eb 	.word	0x080066eb
 8005834:	0800676b 	.word	0x0800676b

08005838 <__multadd>:
 8005838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800583c:	4607      	mov	r7, r0
 800583e:	460c      	mov	r4, r1
 8005840:	461e      	mov	r6, r3
 8005842:	2000      	movs	r0, #0
 8005844:	690d      	ldr	r5, [r1, #16]
 8005846:	f101 0c14 	add.w	ip, r1, #20
 800584a:	f8dc 3000 	ldr.w	r3, [ip]
 800584e:	3001      	adds	r0, #1
 8005850:	b299      	uxth	r1, r3
 8005852:	fb02 6101 	mla	r1, r2, r1, r6
 8005856:	0c1e      	lsrs	r6, r3, #16
 8005858:	0c0b      	lsrs	r3, r1, #16
 800585a:	fb02 3306 	mla	r3, r2, r6, r3
 800585e:	b289      	uxth	r1, r1
 8005860:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005864:	4285      	cmp	r5, r0
 8005866:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800586a:	f84c 1b04 	str.w	r1, [ip], #4
 800586e:	dcec      	bgt.n	800584a <__multadd+0x12>
 8005870:	b30e      	cbz	r6, 80058b6 <__multadd+0x7e>
 8005872:	68a3      	ldr	r3, [r4, #8]
 8005874:	42ab      	cmp	r3, r5
 8005876:	dc19      	bgt.n	80058ac <__multadd+0x74>
 8005878:	6861      	ldr	r1, [r4, #4]
 800587a:	4638      	mov	r0, r7
 800587c:	3101      	adds	r1, #1
 800587e:	f7ff ff79 	bl	8005774 <_Balloc>
 8005882:	4680      	mov	r8, r0
 8005884:	b928      	cbnz	r0, 8005892 <__multadd+0x5a>
 8005886:	4602      	mov	r2, r0
 8005888:	21ba      	movs	r1, #186	@ 0xba
 800588a:	4b0c      	ldr	r3, [pc, #48]	@ (80058bc <__multadd+0x84>)
 800588c:	480c      	ldr	r0, [pc, #48]	@ (80058c0 <__multadd+0x88>)
 800588e:	f000 fd8b 	bl	80063a8 <__assert_func>
 8005892:	6922      	ldr	r2, [r4, #16]
 8005894:	f104 010c 	add.w	r1, r4, #12
 8005898:	3202      	adds	r2, #2
 800589a:	0092      	lsls	r2, r2, #2
 800589c:	300c      	adds	r0, #12
 800589e:	f000 fd75 	bl	800638c <memcpy>
 80058a2:	4621      	mov	r1, r4
 80058a4:	4638      	mov	r0, r7
 80058a6:	f7ff ffa5 	bl	80057f4 <_Bfree>
 80058aa:	4644      	mov	r4, r8
 80058ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80058b0:	3501      	adds	r5, #1
 80058b2:	615e      	str	r6, [r3, #20]
 80058b4:	6125      	str	r5, [r4, #16]
 80058b6:	4620      	mov	r0, r4
 80058b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058bc:	0800675a 	.word	0x0800675a
 80058c0:	0800676b 	.word	0x0800676b

080058c4 <__hi0bits>:
 80058c4:	4603      	mov	r3, r0
 80058c6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80058ca:	bf3a      	itte	cc
 80058cc:	0403      	lslcc	r3, r0, #16
 80058ce:	2010      	movcc	r0, #16
 80058d0:	2000      	movcs	r0, #0
 80058d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058d6:	bf3c      	itt	cc
 80058d8:	021b      	lslcc	r3, r3, #8
 80058da:	3008      	addcc	r0, #8
 80058dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058e0:	bf3c      	itt	cc
 80058e2:	011b      	lslcc	r3, r3, #4
 80058e4:	3004      	addcc	r0, #4
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ea:	bf3c      	itt	cc
 80058ec:	009b      	lslcc	r3, r3, #2
 80058ee:	3002      	addcc	r0, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	db05      	blt.n	8005900 <__hi0bits+0x3c>
 80058f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80058f8:	f100 0001 	add.w	r0, r0, #1
 80058fc:	bf08      	it	eq
 80058fe:	2020      	moveq	r0, #32
 8005900:	4770      	bx	lr

08005902 <__lo0bits>:
 8005902:	6803      	ldr	r3, [r0, #0]
 8005904:	4602      	mov	r2, r0
 8005906:	f013 0007 	ands.w	r0, r3, #7
 800590a:	d00b      	beq.n	8005924 <__lo0bits+0x22>
 800590c:	07d9      	lsls	r1, r3, #31
 800590e:	d421      	bmi.n	8005954 <__lo0bits+0x52>
 8005910:	0798      	lsls	r0, r3, #30
 8005912:	bf49      	itett	mi
 8005914:	085b      	lsrmi	r3, r3, #1
 8005916:	089b      	lsrpl	r3, r3, #2
 8005918:	2001      	movmi	r0, #1
 800591a:	6013      	strmi	r3, [r2, #0]
 800591c:	bf5c      	itt	pl
 800591e:	2002      	movpl	r0, #2
 8005920:	6013      	strpl	r3, [r2, #0]
 8005922:	4770      	bx	lr
 8005924:	b299      	uxth	r1, r3
 8005926:	b909      	cbnz	r1, 800592c <__lo0bits+0x2a>
 8005928:	2010      	movs	r0, #16
 800592a:	0c1b      	lsrs	r3, r3, #16
 800592c:	b2d9      	uxtb	r1, r3
 800592e:	b909      	cbnz	r1, 8005934 <__lo0bits+0x32>
 8005930:	3008      	adds	r0, #8
 8005932:	0a1b      	lsrs	r3, r3, #8
 8005934:	0719      	lsls	r1, r3, #28
 8005936:	bf04      	itt	eq
 8005938:	091b      	lsreq	r3, r3, #4
 800593a:	3004      	addeq	r0, #4
 800593c:	0799      	lsls	r1, r3, #30
 800593e:	bf04      	itt	eq
 8005940:	089b      	lsreq	r3, r3, #2
 8005942:	3002      	addeq	r0, #2
 8005944:	07d9      	lsls	r1, r3, #31
 8005946:	d403      	bmi.n	8005950 <__lo0bits+0x4e>
 8005948:	085b      	lsrs	r3, r3, #1
 800594a:	f100 0001 	add.w	r0, r0, #1
 800594e:	d003      	beq.n	8005958 <__lo0bits+0x56>
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	4770      	bx	lr
 8005954:	2000      	movs	r0, #0
 8005956:	4770      	bx	lr
 8005958:	2020      	movs	r0, #32
 800595a:	4770      	bx	lr

0800595c <__i2b>:
 800595c:	b510      	push	{r4, lr}
 800595e:	460c      	mov	r4, r1
 8005960:	2101      	movs	r1, #1
 8005962:	f7ff ff07 	bl	8005774 <_Balloc>
 8005966:	4602      	mov	r2, r0
 8005968:	b928      	cbnz	r0, 8005976 <__i2b+0x1a>
 800596a:	f240 1145 	movw	r1, #325	@ 0x145
 800596e:	4b04      	ldr	r3, [pc, #16]	@ (8005980 <__i2b+0x24>)
 8005970:	4804      	ldr	r0, [pc, #16]	@ (8005984 <__i2b+0x28>)
 8005972:	f000 fd19 	bl	80063a8 <__assert_func>
 8005976:	2301      	movs	r3, #1
 8005978:	6144      	str	r4, [r0, #20]
 800597a:	6103      	str	r3, [r0, #16]
 800597c:	bd10      	pop	{r4, pc}
 800597e:	bf00      	nop
 8005980:	0800675a 	.word	0x0800675a
 8005984:	0800676b 	.word	0x0800676b

08005988 <__multiply>:
 8005988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598c:	4614      	mov	r4, r2
 800598e:	690a      	ldr	r2, [r1, #16]
 8005990:	6923      	ldr	r3, [r4, #16]
 8005992:	460f      	mov	r7, r1
 8005994:	429a      	cmp	r2, r3
 8005996:	bfa2      	ittt	ge
 8005998:	4623      	movge	r3, r4
 800599a:	460c      	movge	r4, r1
 800599c:	461f      	movge	r7, r3
 800599e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80059a2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80059a6:	68a3      	ldr	r3, [r4, #8]
 80059a8:	6861      	ldr	r1, [r4, #4]
 80059aa:	eb0a 0609 	add.w	r6, sl, r9
 80059ae:	42b3      	cmp	r3, r6
 80059b0:	b085      	sub	sp, #20
 80059b2:	bfb8      	it	lt
 80059b4:	3101      	addlt	r1, #1
 80059b6:	f7ff fedd 	bl	8005774 <_Balloc>
 80059ba:	b930      	cbnz	r0, 80059ca <__multiply+0x42>
 80059bc:	4602      	mov	r2, r0
 80059be:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80059c2:	4b43      	ldr	r3, [pc, #268]	@ (8005ad0 <__multiply+0x148>)
 80059c4:	4843      	ldr	r0, [pc, #268]	@ (8005ad4 <__multiply+0x14c>)
 80059c6:	f000 fcef 	bl	80063a8 <__assert_func>
 80059ca:	f100 0514 	add.w	r5, r0, #20
 80059ce:	462b      	mov	r3, r5
 80059d0:	2200      	movs	r2, #0
 80059d2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80059d6:	4543      	cmp	r3, r8
 80059d8:	d321      	bcc.n	8005a1e <__multiply+0x96>
 80059da:	f107 0114 	add.w	r1, r7, #20
 80059de:	f104 0214 	add.w	r2, r4, #20
 80059e2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80059e6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80059ea:	9302      	str	r3, [sp, #8]
 80059ec:	1b13      	subs	r3, r2, r4
 80059ee:	3b15      	subs	r3, #21
 80059f0:	f023 0303 	bic.w	r3, r3, #3
 80059f4:	3304      	adds	r3, #4
 80059f6:	f104 0715 	add.w	r7, r4, #21
 80059fa:	42ba      	cmp	r2, r7
 80059fc:	bf38      	it	cc
 80059fe:	2304      	movcc	r3, #4
 8005a00:	9301      	str	r3, [sp, #4]
 8005a02:	9b02      	ldr	r3, [sp, #8]
 8005a04:	9103      	str	r1, [sp, #12]
 8005a06:	428b      	cmp	r3, r1
 8005a08:	d80c      	bhi.n	8005a24 <__multiply+0x9c>
 8005a0a:	2e00      	cmp	r6, #0
 8005a0c:	dd03      	ble.n	8005a16 <__multiply+0x8e>
 8005a0e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d05a      	beq.n	8005acc <__multiply+0x144>
 8005a16:	6106      	str	r6, [r0, #16]
 8005a18:	b005      	add	sp, #20
 8005a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a1e:	f843 2b04 	str.w	r2, [r3], #4
 8005a22:	e7d8      	b.n	80059d6 <__multiply+0x4e>
 8005a24:	f8b1 a000 	ldrh.w	sl, [r1]
 8005a28:	f1ba 0f00 	cmp.w	sl, #0
 8005a2c:	d023      	beq.n	8005a76 <__multiply+0xee>
 8005a2e:	46a9      	mov	r9, r5
 8005a30:	f04f 0c00 	mov.w	ip, #0
 8005a34:	f104 0e14 	add.w	lr, r4, #20
 8005a38:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005a3c:	f8d9 3000 	ldr.w	r3, [r9]
 8005a40:	fa1f fb87 	uxth.w	fp, r7
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	fb0a 330b 	mla	r3, sl, fp, r3
 8005a4a:	4463      	add	r3, ip
 8005a4c:	f8d9 c000 	ldr.w	ip, [r9]
 8005a50:	0c3f      	lsrs	r7, r7, #16
 8005a52:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005a56:	fb0a c707 	mla	r7, sl, r7, ip
 8005a5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005a64:	4572      	cmp	r2, lr
 8005a66:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005a6a:	f849 3b04 	str.w	r3, [r9], #4
 8005a6e:	d8e3      	bhi.n	8005a38 <__multiply+0xb0>
 8005a70:	9b01      	ldr	r3, [sp, #4]
 8005a72:	f845 c003 	str.w	ip, [r5, r3]
 8005a76:	9b03      	ldr	r3, [sp, #12]
 8005a78:	3104      	adds	r1, #4
 8005a7a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005a7e:	f1b9 0f00 	cmp.w	r9, #0
 8005a82:	d021      	beq.n	8005ac8 <__multiply+0x140>
 8005a84:	46ae      	mov	lr, r5
 8005a86:	f04f 0a00 	mov.w	sl, #0
 8005a8a:	682b      	ldr	r3, [r5, #0]
 8005a8c:	f104 0c14 	add.w	ip, r4, #20
 8005a90:	f8bc b000 	ldrh.w	fp, [ip]
 8005a94:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	fb09 770b 	mla	r7, r9, fp, r7
 8005a9e:	4457      	add	r7, sl
 8005aa0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005aa4:	f84e 3b04 	str.w	r3, [lr], #4
 8005aa8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005aac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ab0:	f8be 3000 	ldrh.w	r3, [lr]
 8005ab4:	4562      	cmp	r2, ip
 8005ab6:	fb09 330a 	mla	r3, r9, sl, r3
 8005aba:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005abe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ac2:	d8e5      	bhi.n	8005a90 <__multiply+0x108>
 8005ac4:	9f01      	ldr	r7, [sp, #4]
 8005ac6:	51eb      	str	r3, [r5, r7]
 8005ac8:	3504      	adds	r5, #4
 8005aca:	e79a      	b.n	8005a02 <__multiply+0x7a>
 8005acc:	3e01      	subs	r6, #1
 8005ace:	e79c      	b.n	8005a0a <__multiply+0x82>
 8005ad0:	0800675a 	.word	0x0800675a
 8005ad4:	0800676b 	.word	0x0800676b

08005ad8 <__pow5mult>:
 8005ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005adc:	4615      	mov	r5, r2
 8005ade:	f012 0203 	ands.w	r2, r2, #3
 8005ae2:	4607      	mov	r7, r0
 8005ae4:	460e      	mov	r6, r1
 8005ae6:	d007      	beq.n	8005af8 <__pow5mult+0x20>
 8005ae8:	4c25      	ldr	r4, [pc, #148]	@ (8005b80 <__pow5mult+0xa8>)
 8005aea:	3a01      	subs	r2, #1
 8005aec:	2300      	movs	r3, #0
 8005aee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005af2:	f7ff fea1 	bl	8005838 <__multadd>
 8005af6:	4606      	mov	r6, r0
 8005af8:	10ad      	asrs	r5, r5, #2
 8005afa:	d03d      	beq.n	8005b78 <__pow5mult+0xa0>
 8005afc:	69fc      	ldr	r4, [r7, #28]
 8005afe:	b97c      	cbnz	r4, 8005b20 <__pow5mult+0x48>
 8005b00:	2010      	movs	r0, #16
 8005b02:	f7ff fd81 	bl	8005608 <malloc>
 8005b06:	4602      	mov	r2, r0
 8005b08:	61f8      	str	r0, [r7, #28]
 8005b0a:	b928      	cbnz	r0, 8005b18 <__pow5mult+0x40>
 8005b0c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005b10:	4b1c      	ldr	r3, [pc, #112]	@ (8005b84 <__pow5mult+0xac>)
 8005b12:	481d      	ldr	r0, [pc, #116]	@ (8005b88 <__pow5mult+0xb0>)
 8005b14:	f000 fc48 	bl	80063a8 <__assert_func>
 8005b18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b1c:	6004      	str	r4, [r0, #0]
 8005b1e:	60c4      	str	r4, [r0, #12]
 8005b20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005b24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b28:	b94c      	cbnz	r4, 8005b3e <__pow5mult+0x66>
 8005b2a:	f240 2171 	movw	r1, #625	@ 0x271
 8005b2e:	4638      	mov	r0, r7
 8005b30:	f7ff ff14 	bl	800595c <__i2b>
 8005b34:	2300      	movs	r3, #0
 8005b36:	4604      	mov	r4, r0
 8005b38:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b3c:	6003      	str	r3, [r0, #0]
 8005b3e:	f04f 0900 	mov.w	r9, #0
 8005b42:	07eb      	lsls	r3, r5, #31
 8005b44:	d50a      	bpl.n	8005b5c <__pow5mult+0x84>
 8005b46:	4631      	mov	r1, r6
 8005b48:	4622      	mov	r2, r4
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	f7ff ff1c 	bl	8005988 <__multiply>
 8005b50:	4680      	mov	r8, r0
 8005b52:	4631      	mov	r1, r6
 8005b54:	4638      	mov	r0, r7
 8005b56:	f7ff fe4d 	bl	80057f4 <_Bfree>
 8005b5a:	4646      	mov	r6, r8
 8005b5c:	106d      	asrs	r5, r5, #1
 8005b5e:	d00b      	beq.n	8005b78 <__pow5mult+0xa0>
 8005b60:	6820      	ldr	r0, [r4, #0]
 8005b62:	b938      	cbnz	r0, 8005b74 <__pow5mult+0x9c>
 8005b64:	4622      	mov	r2, r4
 8005b66:	4621      	mov	r1, r4
 8005b68:	4638      	mov	r0, r7
 8005b6a:	f7ff ff0d 	bl	8005988 <__multiply>
 8005b6e:	6020      	str	r0, [r4, #0]
 8005b70:	f8c0 9000 	str.w	r9, [r0]
 8005b74:	4604      	mov	r4, r0
 8005b76:	e7e4      	b.n	8005b42 <__pow5mult+0x6a>
 8005b78:	4630      	mov	r0, r6
 8005b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b7e:	bf00      	nop
 8005b80:	080067c4 	.word	0x080067c4
 8005b84:	080066eb 	.word	0x080066eb
 8005b88:	0800676b 	.word	0x0800676b

08005b8c <__lshift>:
 8005b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b90:	460c      	mov	r4, r1
 8005b92:	4607      	mov	r7, r0
 8005b94:	4691      	mov	r9, r2
 8005b96:	6923      	ldr	r3, [r4, #16]
 8005b98:	6849      	ldr	r1, [r1, #4]
 8005b9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005b9e:	68a3      	ldr	r3, [r4, #8]
 8005ba0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ba4:	f108 0601 	add.w	r6, r8, #1
 8005ba8:	42b3      	cmp	r3, r6
 8005baa:	db0b      	blt.n	8005bc4 <__lshift+0x38>
 8005bac:	4638      	mov	r0, r7
 8005bae:	f7ff fde1 	bl	8005774 <_Balloc>
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	b948      	cbnz	r0, 8005bca <__lshift+0x3e>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005bbc:	4b27      	ldr	r3, [pc, #156]	@ (8005c5c <__lshift+0xd0>)
 8005bbe:	4828      	ldr	r0, [pc, #160]	@ (8005c60 <__lshift+0xd4>)
 8005bc0:	f000 fbf2 	bl	80063a8 <__assert_func>
 8005bc4:	3101      	adds	r1, #1
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	e7ee      	b.n	8005ba8 <__lshift+0x1c>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f100 0114 	add.w	r1, r0, #20
 8005bd0:	f100 0210 	add.w	r2, r0, #16
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	4553      	cmp	r3, sl
 8005bd8:	db33      	blt.n	8005c42 <__lshift+0xb6>
 8005bda:	6920      	ldr	r0, [r4, #16]
 8005bdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005be0:	f104 0314 	add.w	r3, r4, #20
 8005be4:	f019 091f 	ands.w	r9, r9, #31
 8005be8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005bec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005bf0:	d02b      	beq.n	8005c4a <__lshift+0xbe>
 8005bf2:	468a      	mov	sl, r1
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f1c9 0e20 	rsb	lr, r9, #32
 8005bfa:	6818      	ldr	r0, [r3, #0]
 8005bfc:	fa00 f009 	lsl.w	r0, r0, r9
 8005c00:	4310      	orrs	r0, r2
 8005c02:	f84a 0b04 	str.w	r0, [sl], #4
 8005c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c0a:	459c      	cmp	ip, r3
 8005c0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005c10:	d8f3      	bhi.n	8005bfa <__lshift+0x6e>
 8005c12:	ebac 0304 	sub.w	r3, ip, r4
 8005c16:	3b15      	subs	r3, #21
 8005c18:	f023 0303 	bic.w	r3, r3, #3
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	f104 0015 	add.w	r0, r4, #21
 8005c22:	4584      	cmp	ip, r0
 8005c24:	bf38      	it	cc
 8005c26:	2304      	movcc	r3, #4
 8005c28:	50ca      	str	r2, [r1, r3]
 8005c2a:	b10a      	cbz	r2, 8005c30 <__lshift+0xa4>
 8005c2c:	f108 0602 	add.w	r6, r8, #2
 8005c30:	3e01      	subs	r6, #1
 8005c32:	4638      	mov	r0, r7
 8005c34:	4621      	mov	r1, r4
 8005c36:	612e      	str	r6, [r5, #16]
 8005c38:	f7ff fddc 	bl	80057f4 <_Bfree>
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c42:	f842 0f04 	str.w	r0, [r2, #4]!
 8005c46:	3301      	adds	r3, #1
 8005c48:	e7c5      	b.n	8005bd6 <__lshift+0x4a>
 8005c4a:	3904      	subs	r1, #4
 8005c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c50:	459c      	cmp	ip, r3
 8005c52:	f841 2f04 	str.w	r2, [r1, #4]!
 8005c56:	d8f9      	bhi.n	8005c4c <__lshift+0xc0>
 8005c58:	e7ea      	b.n	8005c30 <__lshift+0xa4>
 8005c5a:	bf00      	nop
 8005c5c:	0800675a 	.word	0x0800675a
 8005c60:	0800676b 	.word	0x0800676b

08005c64 <__mcmp>:
 8005c64:	4603      	mov	r3, r0
 8005c66:	690a      	ldr	r2, [r1, #16]
 8005c68:	6900      	ldr	r0, [r0, #16]
 8005c6a:	b530      	push	{r4, r5, lr}
 8005c6c:	1a80      	subs	r0, r0, r2
 8005c6e:	d10e      	bne.n	8005c8e <__mcmp+0x2a>
 8005c70:	3314      	adds	r3, #20
 8005c72:	3114      	adds	r1, #20
 8005c74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005c78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005c7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005c80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005c84:	4295      	cmp	r5, r2
 8005c86:	d003      	beq.n	8005c90 <__mcmp+0x2c>
 8005c88:	d205      	bcs.n	8005c96 <__mcmp+0x32>
 8005c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8e:	bd30      	pop	{r4, r5, pc}
 8005c90:	42a3      	cmp	r3, r4
 8005c92:	d3f3      	bcc.n	8005c7c <__mcmp+0x18>
 8005c94:	e7fb      	b.n	8005c8e <__mcmp+0x2a>
 8005c96:	2001      	movs	r0, #1
 8005c98:	e7f9      	b.n	8005c8e <__mcmp+0x2a>
	...

08005c9c <__mdiff>:
 8005c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca0:	4689      	mov	r9, r1
 8005ca2:	4606      	mov	r6, r0
 8005ca4:	4611      	mov	r1, r2
 8005ca6:	4648      	mov	r0, r9
 8005ca8:	4614      	mov	r4, r2
 8005caa:	f7ff ffdb 	bl	8005c64 <__mcmp>
 8005cae:	1e05      	subs	r5, r0, #0
 8005cb0:	d112      	bne.n	8005cd8 <__mdiff+0x3c>
 8005cb2:	4629      	mov	r1, r5
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	f7ff fd5d 	bl	8005774 <_Balloc>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	b928      	cbnz	r0, 8005cca <__mdiff+0x2e>
 8005cbe:	f240 2137 	movw	r1, #567	@ 0x237
 8005cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8005dbc <__mdiff+0x120>)
 8005cc4:	483e      	ldr	r0, [pc, #248]	@ (8005dc0 <__mdiff+0x124>)
 8005cc6:	f000 fb6f 	bl	80063a8 <__assert_func>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	b003      	add	sp, #12
 8005cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd8:	bfbc      	itt	lt
 8005cda:	464b      	movlt	r3, r9
 8005cdc:	46a1      	movlt	r9, r4
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005ce4:	bfba      	itte	lt
 8005ce6:	461c      	movlt	r4, r3
 8005ce8:	2501      	movlt	r5, #1
 8005cea:	2500      	movge	r5, #0
 8005cec:	f7ff fd42 	bl	8005774 <_Balloc>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	b918      	cbnz	r0, 8005cfc <__mdiff+0x60>
 8005cf4:	f240 2145 	movw	r1, #581	@ 0x245
 8005cf8:	4b30      	ldr	r3, [pc, #192]	@ (8005dbc <__mdiff+0x120>)
 8005cfa:	e7e3      	b.n	8005cc4 <__mdiff+0x28>
 8005cfc:	f100 0b14 	add.w	fp, r0, #20
 8005d00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005d04:	f109 0310 	add.w	r3, r9, #16
 8005d08:	60c5      	str	r5, [r0, #12]
 8005d0a:	f04f 0c00 	mov.w	ip, #0
 8005d0e:	f109 0514 	add.w	r5, r9, #20
 8005d12:	46d9      	mov	r9, fp
 8005d14:	6926      	ldr	r6, [r4, #16]
 8005d16:	f104 0e14 	add.w	lr, r4, #20
 8005d1a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005d1e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005d22:	9301      	str	r3, [sp, #4]
 8005d24:	9b01      	ldr	r3, [sp, #4]
 8005d26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005d2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005d2e:	b281      	uxth	r1, r0
 8005d30:	9301      	str	r3, [sp, #4]
 8005d32:	fa1f f38a 	uxth.w	r3, sl
 8005d36:	1a5b      	subs	r3, r3, r1
 8005d38:	0c00      	lsrs	r0, r0, #16
 8005d3a:	4463      	add	r3, ip
 8005d3c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005d40:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005d4a:	4576      	cmp	r6, lr
 8005d4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005d50:	f849 3b04 	str.w	r3, [r9], #4
 8005d54:	d8e6      	bhi.n	8005d24 <__mdiff+0x88>
 8005d56:	1b33      	subs	r3, r6, r4
 8005d58:	3b15      	subs	r3, #21
 8005d5a:	f023 0303 	bic.w	r3, r3, #3
 8005d5e:	3415      	adds	r4, #21
 8005d60:	3304      	adds	r3, #4
 8005d62:	42a6      	cmp	r6, r4
 8005d64:	bf38      	it	cc
 8005d66:	2304      	movcc	r3, #4
 8005d68:	441d      	add	r5, r3
 8005d6a:	445b      	add	r3, fp
 8005d6c:	461e      	mov	r6, r3
 8005d6e:	462c      	mov	r4, r5
 8005d70:	4544      	cmp	r4, r8
 8005d72:	d30e      	bcc.n	8005d92 <__mdiff+0xf6>
 8005d74:	f108 0103 	add.w	r1, r8, #3
 8005d78:	1b49      	subs	r1, r1, r5
 8005d7a:	f021 0103 	bic.w	r1, r1, #3
 8005d7e:	3d03      	subs	r5, #3
 8005d80:	45a8      	cmp	r8, r5
 8005d82:	bf38      	it	cc
 8005d84:	2100      	movcc	r1, #0
 8005d86:	440b      	add	r3, r1
 8005d88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005d8c:	b199      	cbz	r1, 8005db6 <__mdiff+0x11a>
 8005d8e:	6117      	str	r7, [r2, #16]
 8005d90:	e79e      	b.n	8005cd0 <__mdiff+0x34>
 8005d92:	46e6      	mov	lr, ip
 8005d94:	f854 1b04 	ldr.w	r1, [r4], #4
 8005d98:	fa1f fc81 	uxth.w	ip, r1
 8005d9c:	44f4      	add	ip, lr
 8005d9e:	0c08      	lsrs	r0, r1, #16
 8005da0:	4471      	add	r1, lr
 8005da2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005da6:	b289      	uxth	r1, r1
 8005da8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005dac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005db0:	f846 1b04 	str.w	r1, [r6], #4
 8005db4:	e7dc      	b.n	8005d70 <__mdiff+0xd4>
 8005db6:	3f01      	subs	r7, #1
 8005db8:	e7e6      	b.n	8005d88 <__mdiff+0xec>
 8005dba:	bf00      	nop
 8005dbc:	0800675a 	.word	0x0800675a
 8005dc0:	0800676b 	.word	0x0800676b

08005dc4 <__d2b>:
 8005dc4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005dc8:	2101      	movs	r1, #1
 8005dca:	4690      	mov	r8, r2
 8005dcc:	4699      	mov	r9, r3
 8005dce:	9e08      	ldr	r6, [sp, #32]
 8005dd0:	f7ff fcd0 	bl	8005774 <_Balloc>
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	b930      	cbnz	r0, 8005de6 <__d2b+0x22>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	f240 310f 	movw	r1, #783	@ 0x30f
 8005dde:	4b23      	ldr	r3, [pc, #140]	@ (8005e6c <__d2b+0xa8>)
 8005de0:	4823      	ldr	r0, [pc, #140]	@ (8005e70 <__d2b+0xac>)
 8005de2:	f000 fae1 	bl	80063a8 <__assert_func>
 8005de6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005dea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005dee:	b10d      	cbz	r5, 8005df4 <__d2b+0x30>
 8005df0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005df4:	9301      	str	r3, [sp, #4]
 8005df6:	f1b8 0300 	subs.w	r3, r8, #0
 8005dfa:	d024      	beq.n	8005e46 <__d2b+0x82>
 8005dfc:	4668      	mov	r0, sp
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	f7ff fd7f 	bl	8005902 <__lo0bits>
 8005e04:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005e08:	b1d8      	cbz	r0, 8005e42 <__d2b+0x7e>
 8005e0a:	f1c0 0320 	rsb	r3, r0, #32
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	430b      	orrs	r3, r1
 8005e14:	40c2      	lsrs	r2, r0
 8005e16:	6163      	str	r3, [r4, #20]
 8005e18:	9201      	str	r2, [sp, #4]
 8005e1a:	9b01      	ldr	r3, [sp, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	bf0c      	ite	eq
 8005e20:	2201      	moveq	r2, #1
 8005e22:	2202      	movne	r2, #2
 8005e24:	61a3      	str	r3, [r4, #24]
 8005e26:	6122      	str	r2, [r4, #16]
 8005e28:	b1ad      	cbz	r5, 8005e56 <__d2b+0x92>
 8005e2a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005e2e:	4405      	add	r5, r0
 8005e30:	6035      	str	r5, [r6, #0]
 8005e32:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e38:	6018      	str	r0, [r3, #0]
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	b002      	add	sp, #8
 8005e3e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005e42:	6161      	str	r1, [r4, #20]
 8005e44:	e7e9      	b.n	8005e1a <__d2b+0x56>
 8005e46:	a801      	add	r0, sp, #4
 8005e48:	f7ff fd5b 	bl	8005902 <__lo0bits>
 8005e4c:	9b01      	ldr	r3, [sp, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	6163      	str	r3, [r4, #20]
 8005e52:	3020      	adds	r0, #32
 8005e54:	e7e7      	b.n	8005e26 <__d2b+0x62>
 8005e56:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005e5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005e5e:	6030      	str	r0, [r6, #0]
 8005e60:	6918      	ldr	r0, [r3, #16]
 8005e62:	f7ff fd2f 	bl	80058c4 <__hi0bits>
 8005e66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005e6a:	e7e4      	b.n	8005e36 <__d2b+0x72>
 8005e6c:	0800675a 	.word	0x0800675a
 8005e70:	0800676b 	.word	0x0800676b

08005e74 <__sfputc_r>:
 8005e74:	6893      	ldr	r3, [r2, #8]
 8005e76:	b410      	push	{r4}
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	6093      	str	r3, [r2, #8]
 8005e7e:	da07      	bge.n	8005e90 <__sfputc_r+0x1c>
 8005e80:	6994      	ldr	r4, [r2, #24]
 8005e82:	42a3      	cmp	r3, r4
 8005e84:	db01      	blt.n	8005e8a <__sfputc_r+0x16>
 8005e86:	290a      	cmp	r1, #10
 8005e88:	d102      	bne.n	8005e90 <__sfputc_r+0x1c>
 8005e8a:	bc10      	pop	{r4}
 8005e8c:	f000 b9da 	b.w	8006244 <__swbuf_r>
 8005e90:	6813      	ldr	r3, [r2, #0]
 8005e92:	1c58      	adds	r0, r3, #1
 8005e94:	6010      	str	r0, [r2, #0]
 8005e96:	7019      	strb	r1, [r3, #0]
 8005e98:	4608      	mov	r0, r1
 8005e9a:	bc10      	pop	{r4}
 8005e9c:	4770      	bx	lr

08005e9e <__sfputs_r>:
 8005e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea0:	4606      	mov	r6, r0
 8005ea2:	460f      	mov	r7, r1
 8005ea4:	4614      	mov	r4, r2
 8005ea6:	18d5      	adds	r5, r2, r3
 8005ea8:	42ac      	cmp	r4, r5
 8005eaa:	d101      	bne.n	8005eb0 <__sfputs_r+0x12>
 8005eac:	2000      	movs	r0, #0
 8005eae:	e007      	b.n	8005ec0 <__sfputs_r+0x22>
 8005eb0:	463a      	mov	r2, r7
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eb8:	f7ff ffdc 	bl	8005e74 <__sfputc_r>
 8005ebc:	1c43      	adds	r3, r0, #1
 8005ebe:	d1f3      	bne.n	8005ea8 <__sfputs_r+0xa>
 8005ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ec4 <_vfiprintf_r>:
 8005ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	460d      	mov	r5, r1
 8005eca:	4614      	mov	r4, r2
 8005ecc:	4698      	mov	r8, r3
 8005ece:	4606      	mov	r6, r0
 8005ed0:	b09d      	sub	sp, #116	@ 0x74
 8005ed2:	b118      	cbz	r0, 8005edc <_vfiprintf_r+0x18>
 8005ed4:	6a03      	ldr	r3, [r0, #32]
 8005ed6:	b90b      	cbnz	r3, 8005edc <_vfiprintf_r+0x18>
 8005ed8:	f7fe fbe4 	bl	80046a4 <__sinit>
 8005edc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ede:	07d9      	lsls	r1, r3, #31
 8005ee0:	d405      	bmi.n	8005eee <_vfiprintf_r+0x2a>
 8005ee2:	89ab      	ldrh	r3, [r5, #12]
 8005ee4:	059a      	lsls	r2, r3, #22
 8005ee6:	d402      	bmi.n	8005eee <_vfiprintf_r+0x2a>
 8005ee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005eea:	f7fe fce4 	bl	80048b6 <__retarget_lock_acquire_recursive>
 8005eee:	89ab      	ldrh	r3, [r5, #12]
 8005ef0:	071b      	lsls	r3, r3, #28
 8005ef2:	d501      	bpl.n	8005ef8 <_vfiprintf_r+0x34>
 8005ef4:	692b      	ldr	r3, [r5, #16]
 8005ef6:	b99b      	cbnz	r3, 8005f20 <_vfiprintf_r+0x5c>
 8005ef8:	4629      	mov	r1, r5
 8005efa:	4630      	mov	r0, r6
 8005efc:	f000 f9e0 	bl	80062c0 <__swsetup_r>
 8005f00:	b170      	cbz	r0, 8005f20 <_vfiprintf_r+0x5c>
 8005f02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f04:	07dc      	lsls	r4, r3, #31
 8005f06:	d504      	bpl.n	8005f12 <_vfiprintf_r+0x4e>
 8005f08:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0c:	b01d      	add	sp, #116	@ 0x74
 8005f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f12:	89ab      	ldrh	r3, [r5, #12]
 8005f14:	0598      	lsls	r0, r3, #22
 8005f16:	d4f7      	bmi.n	8005f08 <_vfiprintf_r+0x44>
 8005f18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f1a:	f7fe fccd 	bl	80048b8 <__retarget_lock_release_recursive>
 8005f1e:	e7f3      	b.n	8005f08 <_vfiprintf_r+0x44>
 8005f20:	2300      	movs	r3, #0
 8005f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f24:	2320      	movs	r3, #32
 8005f26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f2a:	2330      	movs	r3, #48	@ 0x30
 8005f2c:	f04f 0901 	mov.w	r9, #1
 8005f30:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f34:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80060e0 <_vfiprintf_r+0x21c>
 8005f38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f3c:	4623      	mov	r3, r4
 8005f3e:	469a      	mov	sl, r3
 8005f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f44:	b10a      	cbz	r2, 8005f4a <_vfiprintf_r+0x86>
 8005f46:	2a25      	cmp	r2, #37	@ 0x25
 8005f48:	d1f9      	bne.n	8005f3e <_vfiprintf_r+0x7a>
 8005f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8005f4e:	d00b      	beq.n	8005f68 <_vfiprintf_r+0xa4>
 8005f50:	465b      	mov	r3, fp
 8005f52:	4622      	mov	r2, r4
 8005f54:	4629      	mov	r1, r5
 8005f56:	4630      	mov	r0, r6
 8005f58:	f7ff ffa1 	bl	8005e9e <__sfputs_r>
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	f000 80a7 	beq.w	80060b0 <_vfiprintf_r+0x1ec>
 8005f62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f64:	445a      	add	r2, fp
 8005f66:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f68:	f89a 3000 	ldrb.w	r3, [sl]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 809f 	beq.w	80060b0 <_vfiprintf_r+0x1ec>
 8005f72:	2300      	movs	r3, #0
 8005f74:	f04f 32ff 	mov.w	r2, #4294967295
 8005f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f7c:	f10a 0a01 	add.w	sl, sl, #1
 8005f80:	9304      	str	r3, [sp, #16]
 8005f82:	9307      	str	r3, [sp, #28]
 8005f84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f88:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f8a:	4654      	mov	r4, sl
 8005f8c:	2205      	movs	r2, #5
 8005f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f92:	4853      	ldr	r0, [pc, #332]	@ (80060e0 <_vfiprintf_r+0x21c>)
 8005f94:	f7fe fc91 	bl	80048ba <memchr>
 8005f98:	9a04      	ldr	r2, [sp, #16]
 8005f9a:	b9d8      	cbnz	r0, 8005fd4 <_vfiprintf_r+0x110>
 8005f9c:	06d1      	lsls	r1, r2, #27
 8005f9e:	bf44      	itt	mi
 8005fa0:	2320      	movmi	r3, #32
 8005fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fa6:	0713      	lsls	r3, r2, #28
 8005fa8:	bf44      	itt	mi
 8005faa:	232b      	movmi	r3, #43	@ 0x2b
 8005fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8005fb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fb6:	d015      	beq.n	8005fe4 <_vfiprintf_r+0x120>
 8005fb8:	4654      	mov	r4, sl
 8005fba:	2000      	movs	r0, #0
 8005fbc:	f04f 0c0a 	mov.w	ip, #10
 8005fc0:	9a07      	ldr	r2, [sp, #28]
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fc8:	3b30      	subs	r3, #48	@ 0x30
 8005fca:	2b09      	cmp	r3, #9
 8005fcc:	d94b      	bls.n	8006066 <_vfiprintf_r+0x1a2>
 8005fce:	b1b0      	cbz	r0, 8005ffe <_vfiprintf_r+0x13a>
 8005fd0:	9207      	str	r2, [sp, #28]
 8005fd2:	e014      	b.n	8005ffe <_vfiprintf_r+0x13a>
 8005fd4:	eba0 0308 	sub.w	r3, r0, r8
 8005fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	46a2      	mov	sl, r4
 8005fe0:	9304      	str	r3, [sp, #16]
 8005fe2:	e7d2      	b.n	8005f8a <_vfiprintf_r+0xc6>
 8005fe4:	9b03      	ldr	r3, [sp, #12]
 8005fe6:	1d19      	adds	r1, r3, #4
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	9103      	str	r1, [sp, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	bfbb      	ittet	lt
 8005ff0:	425b      	neglt	r3, r3
 8005ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8005ff6:	9307      	strge	r3, [sp, #28]
 8005ff8:	9307      	strlt	r3, [sp, #28]
 8005ffa:	bfb8      	it	lt
 8005ffc:	9204      	strlt	r2, [sp, #16]
 8005ffe:	7823      	ldrb	r3, [r4, #0]
 8006000:	2b2e      	cmp	r3, #46	@ 0x2e
 8006002:	d10a      	bne.n	800601a <_vfiprintf_r+0x156>
 8006004:	7863      	ldrb	r3, [r4, #1]
 8006006:	2b2a      	cmp	r3, #42	@ 0x2a
 8006008:	d132      	bne.n	8006070 <_vfiprintf_r+0x1ac>
 800600a:	9b03      	ldr	r3, [sp, #12]
 800600c:	3402      	adds	r4, #2
 800600e:	1d1a      	adds	r2, r3, #4
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	9203      	str	r2, [sp, #12]
 8006014:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006018:	9305      	str	r3, [sp, #20]
 800601a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80060e4 <_vfiprintf_r+0x220>
 800601e:	2203      	movs	r2, #3
 8006020:	4650      	mov	r0, sl
 8006022:	7821      	ldrb	r1, [r4, #0]
 8006024:	f7fe fc49 	bl	80048ba <memchr>
 8006028:	b138      	cbz	r0, 800603a <_vfiprintf_r+0x176>
 800602a:	2240      	movs	r2, #64	@ 0x40
 800602c:	9b04      	ldr	r3, [sp, #16]
 800602e:	eba0 000a 	sub.w	r0, r0, sl
 8006032:	4082      	lsls	r2, r0
 8006034:	4313      	orrs	r3, r2
 8006036:	3401      	adds	r4, #1
 8006038:	9304      	str	r3, [sp, #16]
 800603a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800603e:	2206      	movs	r2, #6
 8006040:	4829      	ldr	r0, [pc, #164]	@ (80060e8 <_vfiprintf_r+0x224>)
 8006042:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006046:	f7fe fc38 	bl	80048ba <memchr>
 800604a:	2800      	cmp	r0, #0
 800604c:	d03f      	beq.n	80060ce <_vfiprintf_r+0x20a>
 800604e:	4b27      	ldr	r3, [pc, #156]	@ (80060ec <_vfiprintf_r+0x228>)
 8006050:	bb1b      	cbnz	r3, 800609a <_vfiprintf_r+0x1d6>
 8006052:	9b03      	ldr	r3, [sp, #12]
 8006054:	3307      	adds	r3, #7
 8006056:	f023 0307 	bic.w	r3, r3, #7
 800605a:	3308      	adds	r3, #8
 800605c:	9303      	str	r3, [sp, #12]
 800605e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006060:	443b      	add	r3, r7
 8006062:	9309      	str	r3, [sp, #36]	@ 0x24
 8006064:	e76a      	b.n	8005f3c <_vfiprintf_r+0x78>
 8006066:	460c      	mov	r4, r1
 8006068:	2001      	movs	r0, #1
 800606a:	fb0c 3202 	mla	r2, ip, r2, r3
 800606e:	e7a8      	b.n	8005fc2 <_vfiprintf_r+0xfe>
 8006070:	2300      	movs	r3, #0
 8006072:	f04f 0c0a 	mov.w	ip, #10
 8006076:	4619      	mov	r1, r3
 8006078:	3401      	adds	r4, #1
 800607a:	9305      	str	r3, [sp, #20]
 800607c:	4620      	mov	r0, r4
 800607e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006082:	3a30      	subs	r2, #48	@ 0x30
 8006084:	2a09      	cmp	r2, #9
 8006086:	d903      	bls.n	8006090 <_vfiprintf_r+0x1cc>
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0c6      	beq.n	800601a <_vfiprintf_r+0x156>
 800608c:	9105      	str	r1, [sp, #20]
 800608e:	e7c4      	b.n	800601a <_vfiprintf_r+0x156>
 8006090:	4604      	mov	r4, r0
 8006092:	2301      	movs	r3, #1
 8006094:	fb0c 2101 	mla	r1, ip, r1, r2
 8006098:	e7f0      	b.n	800607c <_vfiprintf_r+0x1b8>
 800609a:	ab03      	add	r3, sp, #12
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	462a      	mov	r2, r5
 80060a0:	4630      	mov	r0, r6
 80060a2:	4b13      	ldr	r3, [pc, #76]	@ (80060f0 <_vfiprintf_r+0x22c>)
 80060a4:	a904      	add	r1, sp, #16
 80060a6:	f7fd feb3 	bl	8003e10 <_printf_float>
 80060aa:	4607      	mov	r7, r0
 80060ac:	1c78      	adds	r0, r7, #1
 80060ae:	d1d6      	bne.n	800605e <_vfiprintf_r+0x19a>
 80060b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060b2:	07d9      	lsls	r1, r3, #31
 80060b4:	d405      	bmi.n	80060c2 <_vfiprintf_r+0x1fe>
 80060b6:	89ab      	ldrh	r3, [r5, #12]
 80060b8:	059a      	lsls	r2, r3, #22
 80060ba:	d402      	bmi.n	80060c2 <_vfiprintf_r+0x1fe>
 80060bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060be:	f7fe fbfb 	bl	80048b8 <__retarget_lock_release_recursive>
 80060c2:	89ab      	ldrh	r3, [r5, #12]
 80060c4:	065b      	lsls	r3, r3, #25
 80060c6:	f53f af1f 	bmi.w	8005f08 <_vfiprintf_r+0x44>
 80060ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060cc:	e71e      	b.n	8005f0c <_vfiprintf_r+0x48>
 80060ce:	ab03      	add	r3, sp, #12
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	462a      	mov	r2, r5
 80060d4:	4630      	mov	r0, r6
 80060d6:	4b06      	ldr	r3, [pc, #24]	@ (80060f0 <_vfiprintf_r+0x22c>)
 80060d8:	a904      	add	r1, sp, #16
 80060da:	f7fe f937 	bl	800434c <_printf_i>
 80060de:	e7e4      	b.n	80060aa <_vfiprintf_r+0x1e6>
 80060e0:	080068c0 	.word	0x080068c0
 80060e4:	080068c6 	.word	0x080068c6
 80060e8:	080068ca 	.word	0x080068ca
 80060ec:	08003e11 	.word	0x08003e11
 80060f0:	08005e9f 	.word	0x08005e9f

080060f4 <__sflush_r>:
 80060f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fa:	0716      	lsls	r6, r2, #28
 80060fc:	4605      	mov	r5, r0
 80060fe:	460c      	mov	r4, r1
 8006100:	d454      	bmi.n	80061ac <__sflush_r+0xb8>
 8006102:	684b      	ldr	r3, [r1, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	dc02      	bgt.n	800610e <__sflush_r+0x1a>
 8006108:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	dd48      	ble.n	80061a0 <__sflush_r+0xac>
 800610e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006110:	2e00      	cmp	r6, #0
 8006112:	d045      	beq.n	80061a0 <__sflush_r+0xac>
 8006114:	2300      	movs	r3, #0
 8006116:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800611a:	682f      	ldr	r7, [r5, #0]
 800611c:	6a21      	ldr	r1, [r4, #32]
 800611e:	602b      	str	r3, [r5, #0]
 8006120:	d030      	beq.n	8006184 <__sflush_r+0x90>
 8006122:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006124:	89a3      	ldrh	r3, [r4, #12]
 8006126:	0759      	lsls	r1, r3, #29
 8006128:	d505      	bpl.n	8006136 <__sflush_r+0x42>
 800612a:	6863      	ldr	r3, [r4, #4]
 800612c:	1ad2      	subs	r2, r2, r3
 800612e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006130:	b10b      	cbz	r3, 8006136 <__sflush_r+0x42>
 8006132:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006134:	1ad2      	subs	r2, r2, r3
 8006136:	2300      	movs	r3, #0
 8006138:	4628      	mov	r0, r5
 800613a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800613c:	6a21      	ldr	r1, [r4, #32]
 800613e:	47b0      	blx	r6
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	89a3      	ldrh	r3, [r4, #12]
 8006144:	d106      	bne.n	8006154 <__sflush_r+0x60>
 8006146:	6829      	ldr	r1, [r5, #0]
 8006148:	291d      	cmp	r1, #29
 800614a:	d82b      	bhi.n	80061a4 <__sflush_r+0xb0>
 800614c:	4a28      	ldr	r2, [pc, #160]	@ (80061f0 <__sflush_r+0xfc>)
 800614e:	410a      	asrs	r2, r1
 8006150:	07d6      	lsls	r6, r2, #31
 8006152:	d427      	bmi.n	80061a4 <__sflush_r+0xb0>
 8006154:	2200      	movs	r2, #0
 8006156:	6062      	str	r2, [r4, #4]
 8006158:	6922      	ldr	r2, [r4, #16]
 800615a:	04d9      	lsls	r1, r3, #19
 800615c:	6022      	str	r2, [r4, #0]
 800615e:	d504      	bpl.n	800616a <__sflush_r+0x76>
 8006160:	1c42      	adds	r2, r0, #1
 8006162:	d101      	bne.n	8006168 <__sflush_r+0x74>
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	b903      	cbnz	r3, 800616a <__sflush_r+0x76>
 8006168:	6560      	str	r0, [r4, #84]	@ 0x54
 800616a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800616c:	602f      	str	r7, [r5, #0]
 800616e:	b1b9      	cbz	r1, 80061a0 <__sflush_r+0xac>
 8006170:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006174:	4299      	cmp	r1, r3
 8006176:	d002      	beq.n	800617e <__sflush_r+0x8a>
 8006178:	4628      	mov	r0, r5
 800617a:	f7ff f9fd 	bl	8005578 <_free_r>
 800617e:	2300      	movs	r3, #0
 8006180:	6363      	str	r3, [r4, #52]	@ 0x34
 8006182:	e00d      	b.n	80061a0 <__sflush_r+0xac>
 8006184:	2301      	movs	r3, #1
 8006186:	4628      	mov	r0, r5
 8006188:	47b0      	blx	r6
 800618a:	4602      	mov	r2, r0
 800618c:	1c50      	adds	r0, r2, #1
 800618e:	d1c9      	bne.n	8006124 <__sflush_r+0x30>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0c6      	beq.n	8006124 <__sflush_r+0x30>
 8006196:	2b1d      	cmp	r3, #29
 8006198:	d001      	beq.n	800619e <__sflush_r+0xaa>
 800619a:	2b16      	cmp	r3, #22
 800619c:	d11d      	bne.n	80061da <__sflush_r+0xe6>
 800619e:	602f      	str	r7, [r5, #0]
 80061a0:	2000      	movs	r0, #0
 80061a2:	e021      	b.n	80061e8 <__sflush_r+0xf4>
 80061a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061a8:	b21b      	sxth	r3, r3
 80061aa:	e01a      	b.n	80061e2 <__sflush_r+0xee>
 80061ac:	690f      	ldr	r7, [r1, #16]
 80061ae:	2f00      	cmp	r7, #0
 80061b0:	d0f6      	beq.n	80061a0 <__sflush_r+0xac>
 80061b2:	0793      	lsls	r3, r2, #30
 80061b4:	bf18      	it	ne
 80061b6:	2300      	movne	r3, #0
 80061b8:	680e      	ldr	r6, [r1, #0]
 80061ba:	bf08      	it	eq
 80061bc:	694b      	ldreq	r3, [r1, #20]
 80061be:	1bf6      	subs	r6, r6, r7
 80061c0:	600f      	str	r7, [r1, #0]
 80061c2:	608b      	str	r3, [r1, #8]
 80061c4:	2e00      	cmp	r6, #0
 80061c6:	ddeb      	ble.n	80061a0 <__sflush_r+0xac>
 80061c8:	4633      	mov	r3, r6
 80061ca:	463a      	mov	r2, r7
 80061cc:	4628      	mov	r0, r5
 80061ce:	6a21      	ldr	r1, [r4, #32]
 80061d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80061d4:	47e0      	blx	ip
 80061d6:	2800      	cmp	r0, #0
 80061d8:	dc07      	bgt.n	80061ea <__sflush_r+0xf6>
 80061da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061e2:	f04f 30ff 	mov.w	r0, #4294967295
 80061e6:	81a3      	strh	r3, [r4, #12]
 80061e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ea:	4407      	add	r7, r0
 80061ec:	1a36      	subs	r6, r6, r0
 80061ee:	e7e9      	b.n	80061c4 <__sflush_r+0xd0>
 80061f0:	dfbffffe 	.word	0xdfbffffe

080061f4 <_fflush_r>:
 80061f4:	b538      	push	{r3, r4, r5, lr}
 80061f6:	690b      	ldr	r3, [r1, #16]
 80061f8:	4605      	mov	r5, r0
 80061fa:	460c      	mov	r4, r1
 80061fc:	b913      	cbnz	r3, 8006204 <_fflush_r+0x10>
 80061fe:	2500      	movs	r5, #0
 8006200:	4628      	mov	r0, r5
 8006202:	bd38      	pop	{r3, r4, r5, pc}
 8006204:	b118      	cbz	r0, 800620e <_fflush_r+0x1a>
 8006206:	6a03      	ldr	r3, [r0, #32]
 8006208:	b90b      	cbnz	r3, 800620e <_fflush_r+0x1a>
 800620a:	f7fe fa4b 	bl	80046a4 <__sinit>
 800620e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0f3      	beq.n	80061fe <_fflush_r+0xa>
 8006216:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006218:	07d0      	lsls	r0, r2, #31
 800621a:	d404      	bmi.n	8006226 <_fflush_r+0x32>
 800621c:	0599      	lsls	r1, r3, #22
 800621e:	d402      	bmi.n	8006226 <_fflush_r+0x32>
 8006220:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006222:	f7fe fb48 	bl	80048b6 <__retarget_lock_acquire_recursive>
 8006226:	4628      	mov	r0, r5
 8006228:	4621      	mov	r1, r4
 800622a:	f7ff ff63 	bl	80060f4 <__sflush_r>
 800622e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006230:	4605      	mov	r5, r0
 8006232:	07da      	lsls	r2, r3, #31
 8006234:	d4e4      	bmi.n	8006200 <_fflush_r+0xc>
 8006236:	89a3      	ldrh	r3, [r4, #12]
 8006238:	059b      	lsls	r3, r3, #22
 800623a:	d4e1      	bmi.n	8006200 <_fflush_r+0xc>
 800623c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800623e:	f7fe fb3b 	bl	80048b8 <__retarget_lock_release_recursive>
 8006242:	e7dd      	b.n	8006200 <_fflush_r+0xc>

08006244 <__swbuf_r>:
 8006244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006246:	460e      	mov	r6, r1
 8006248:	4614      	mov	r4, r2
 800624a:	4605      	mov	r5, r0
 800624c:	b118      	cbz	r0, 8006256 <__swbuf_r+0x12>
 800624e:	6a03      	ldr	r3, [r0, #32]
 8006250:	b90b      	cbnz	r3, 8006256 <__swbuf_r+0x12>
 8006252:	f7fe fa27 	bl	80046a4 <__sinit>
 8006256:	69a3      	ldr	r3, [r4, #24]
 8006258:	60a3      	str	r3, [r4, #8]
 800625a:	89a3      	ldrh	r3, [r4, #12]
 800625c:	071a      	lsls	r2, r3, #28
 800625e:	d501      	bpl.n	8006264 <__swbuf_r+0x20>
 8006260:	6923      	ldr	r3, [r4, #16]
 8006262:	b943      	cbnz	r3, 8006276 <__swbuf_r+0x32>
 8006264:	4621      	mov	r1, r4
 8006266:	4628      	mov	r0, r5
 8006268:	f000 f82a 	bl	80062c0 <__swsetup_r>
 800626c:	b118      	cbz	r0, 8006276 <__swbuf_r+0x32>
 800626e:	f04f 37ff 	mov.w	r7, #4294967295
 8006272:	4638      	mov	r0, r7
 8006274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	6922      	ldr	r2, [r4, #16]
 800627a:	b2f6      	uxtb	r6, r6
 800627c:	1a98      	subs	r0, r3, r2
 800627e:	6963      	ldr	r3, [r4, #20]
 8006280:	4637      	mov	r7, r6
 8006282:	4283      	cmp	r3, r0
 8006284:	dc05      	bgt.n	8006292 <__swbuf_r+0x4e>
 8006286:	4621      	mov	r1, r4
 8006288:	4628      	mov	r0, r5
 800628a:	f7ff ffb3 	bl	80061f4 <_fflush_r>
 800628e:	2800      	cmp	r0, #0
 8006290:	d1ed      	bne.n	800626e <__swbuf_r+0x2a>
 8006292:	68a3      	ldr	r3, [r4, #8]
 8006294:	3b01      	subs	r3, #1
 8006296:	60a3      	str	r3, [r4, #8]
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	6022      	str	r2, [r4, #0]
 800629e:	701e      	strb	r6, [r3, #0]
 80062a0:	6962      	ldr	r2, [r4, #20]
 80062a2:	1c43      	adds	r3, r0, #1
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d004      	beq.n	80062b2 <__swbuf_r+0x6e>
 80062a8:	89a3      	ldrh	r3, [r4, #12]
 80062aa:	07db      	lsls	r3, r3, #31
 80062ac:	d5e1      	bpl.n	8006272 <__swbuf_r+0x2e>
 80062ae:	2e0a      	cmp	r6, #10
 80062b0:	d1df      	bne.n	8006272 <__swbuf_r+0x2e>
 80062b2:	4621      	mov	r1, r4
 80062b4:	4628      	mov	r0, r5
 80062b6:	f7ff ff9d 	bl	80061f4 <_fflush_r>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d0d9      	beq.n	8006272 <__swbuf_r+0x2e>
 80062be:	e7d6      	b.n	800626e <__swbuf_r+0x2a>

080062c0 <__swsetup_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	4b29      	ldr	r3, [pc, #164]	@ (8006368 <__swsetup_r+0xa8>)
 80062c4:	4605      	mov	r5, r0
 80062c6:	6818      	ldr	r0, [r3, #0]
 80062c8:	460c      	mov	r4, r1
 80062ca:	b118      	cbz	r0, 80062d4 <__swsetup_r+0x14>
 80062cc:	6a03      	ldr	r3, [r0, #32]
 80062ce:	b90b      	cbnz	r3, 80062d4 <__swsetup_r+0x14>
 80062d0:	f7fe f9e8 	bl	80046a4 <__sinit>
 80062d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062d8:	0719      	lsls	r1, r3, #28
 80062da:	d422      	bmi.n	8006322 <__swsetup_r+0x62>
 80062dc:	06da      	lsls	r2, r3, #27
 80062de:	d407      	bmi.n	80062f0 <__swsetup_r+0x30>
 80062e0:	2209      	movs	r2, #9
 80062e2:	602a      	str	r2, [r5, #0]
 80062e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ec:	81a3      	strh	r3, [r4, #12]
 80062ee:	e033      	b.n	8006358 <__swsetup_r+0x98>
 80062f0:	0758      	lsls	r0, r3, #29
 80062f2:	d512      	bpl.n	800631a <__swsetup_r+0x5a>
 80062f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062f6:	b141      	cbz	r1, 800630a <__swsetup_r+0x4a>
 80062f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062fc:	4299      	cmp	r1, r3
 80062fe:	d002      	beq.n	8006306 <__swsetup_r+0x46>
 8006300:	4628      	mov	r0, r5
 8006302:	f7ff f939 	bl	8005578 <_free_r>
 8006306:	2300      	movs	r3, #0
 8006308:	6363      	str	r3, [r4, #52]	@ 0x34
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006310:	81a3      	strh	r3, [r4, #12]
 8006312:	2300      	movs	r3, #0
 8006314:	6063      	str	r3, [r4, #4]
 8006316:	6923      	ldr	r3, [r4, #16]
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	f043 0308 	orr.w	r3, r3, #8
 8006320:	81a3      	strh	r3, [r4, #12]
 8006322:	6923      	ldr	r3, [r4, #16]
 8006324:	b94b      	cbnz	r3, 800633a <__swsetup_r+0x7a>
 8006326:	89a3      	ldrh	r3, [r4, #12]
 8006328:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800632c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006330:	d003      	beq.n	800633a <__swsetup_r+0x7a>
 8006332:	4621      	mov	r1, r4
 8006334:	4628      	mov	r0, r5
 8006336:	f000 f8c0 	bl	80064ba <__smakebuf_r>
 800633a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800633e:	f013 0201 	ands.w	r2, r3, #1
 8006342:	d00a      	beq.n	800635a <__swsetup_r+0x9a>
 8006344:	2200      	movs	r2, #0
 8006346:	60a2      	str	r2, [r4, #8]
 8006348:	6962      	ldr	r2, [r4, #20]
 800634a:	4252      	negs	r2, r2
 800634c:	61a2      	str	r2, [r4, #24]
 800634e:	6922      	ldr	r2, [r4, #16]
 8006350:	b942      	cbnz	r2, 8006364 <__swsetup_r+0xa4>
 8006352:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006356:	d1c5      	bne.n	80062e4 <__swsetup_r+0x24>
 8006358:	bd38      	pop	{r3, r4, r5, pc}
 800635a:	0799      	lsls	r1, r3, #30
 800635c:	bf58      	it	pl
 800635e:	6962      	ldrpl	r2, [r4, #20]
 8006360:	60a2      	str	r2, [r4, #8]
 8006362:	e7f4      	b.n	800634e <__swsetup_r+0x8e>
 8006364:	2000      	movs	r0, #0
 8006366:	e7f7      	b.n	8006358 <__swsetup_r+0x98>
 8006368:	20000018 	.word	0x20000018

0800636c <_sbrk_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	2300      	movs	r3, #0
 8006370:	4d05      	ldr	r5, [pc, #20]	@ (8006388 <_sbrk_r+0x1c>)
 8006372:	4604      	mov	r4, r0
 8006374:	4608      	mov	r0, r1
 8006376:	602b      	str	r3, [r5, #0]
 8006378:	f7fb fbda 	bl	8001b30 <_sbrk>
 800637c:	1c43      	adds	r3, r0, #1
 800637e:	d102      	bne.n	8006386 <_sbrk_r+0x1a>
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	b103      	cbz	r3, 8006386 <_sbrk_r+0x1a>
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	bd38      	pop	{r3, r4, r5, pc}
 8006388:	20000494 	.word	0x20000494

0800638c <memcpy>:
 800638c:	440a      	add	r2, r1
 800638e:	4291      	cmp	r1, r2
 8006390:	f100 33ff 	add.w	r3, r0, #4294967295
 8006394:	d100      	bne.n	8006398 <memcpy+0xc>
 8006396:	4770      	bx	lr
 8006398:	b510      	push	{r4, lr}
 800639a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800639e:	4291      	cmp	r1, r2
 80063a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063a4:	d1f9      	bne.n	800639a <memcpy+0xe>
 80063a6:	bd10      	pop	{r4, pc}

080063a8 <__assert_func>:
 80063a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063aa:	4614      	mov	r4, r2
 80063ac:	461a      	mov	r2, r3
 80063ae:	4b09      	ldr	r3, [pc, #36]	@ (80063d4 <__assert_func+0x2c>)
 80063b0:	4605      	mov	r5, r0
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68d8      	ldr	r0, [r3, #12]
 80063b6:	b954      	cbnz	r4, 80063ce <__assert_func+0x26>
 80063b8:	4b07      	ldr	r3, [pc, #28]	@ (80063d8 <__assert_func+0x30>)
 80063ba:	461c      	mov	r4, r3
 80063bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063c0:	9100      	str	r1, [sp, #0]
 80063c2:	462b      	mov	r3, r5
 80063c4:	4905      	ldr	r1, [pc, #20]	@ (80063dc <__assert_func+0x34>)
 80063c6:	f000 f841 	bl	800644c <fiprintf>
 80063ca:	f000 f8d5 	bl	8006578 <abort>
 80063ce:	4b04      	ldr	r3, [pc, #16]	@ (80063e0 <__assert_func+0x38>)
 80063d0:	e7f4      	b.n	80063bc <__assert_func+0x14>
 80063d2:	bf00      	nop
 80063d4:	20000018 	.word	0x20000018
 80063d8:	08006916 	.word	0x08006916
 80063dc:	080068e8 	.word	0x080068e8
 80063e0:	080068db 	.word	0x080068db

080063e4 <_calloc_r>:
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	fba1 5402 	umull	r5, r4, r1, r2
 80063ea:	b93c      	cbnz	r4, 80063fc <_calloc_r+0x18>
 80063ec:	4629      	mov	r1, r5
 80063ee:	f7ff f935 	bl	800565c <_malloc_r>
 80063f2:	4606      	mov	r6, r0
 80063f4:	b928      	cbnz	r0, 8006402 <_calloc_r+0x1e>
 80063f6:	2600      	movs	r6, #0
 80063f8:	4630      	mov	r0, r6
 80063fa:	bd70      	pop	{r4, r5, r6, pc}
 80063fc:	220c      	movs	r2, #12
 80063fe:	6002      	str	r2, [r0, #0]
 8006400:	e7f9      	b.n	80063f6 <_calloc_r+0x12>
 8006402:	462a      	mov	r2, r5
 8006404:	4621      	mov	r1, r4
 8006406:	f7fe f9d8 	bl	80047ba <memset>
 800640a:	e7f5      	b.n	80063f8 <_calloc_r+0x14>

0800640c <__ascii_mbtowc>:
 800640c:	b082      	sub	sp, #8
 800640e:	b901      	cbnz	r1, 8006412 <__ascii_mbtowc+0x6>
 8006410:	a901      	add	r1, sp, #4
 8006412:	b142      	cbz	r2, 8006426 <__ascii_mbtowc+0x1a>
 8006414:	b14b      	cbz	r3, 800642a <__ascii_mbtowc+0x1e>
 8006416:	7813      	ldrb	r3, [r2, #0]
 8006418:	600b      	str	r3, [r1, #0]
 800641a:	7812      	ldrb	r2, [r2, #0]
 800641c:	1e10      	subs	r0, r2, #0
 800641e:	bf18      	it	ne
 8006420:	2001      	movne	r0, #1
 8006422:	b002      	add	sp, #8
 8006424:	4770      	bx	lr
 8006426:	4610      	mov	r0, r2
 8006428:	e7fb      	b.n	8006422 <__ascii_mbtowc+0x16>
 800642a:	f06f 0001 	mvn.w	r0, #1
 800642e:	e7f8      	b.n	8006422 <__ascii_mbtowc+0x16>

08006430 <__ascii_wctomb>:
 8006430:	4603      	mov	r3, r0
 8006432:	4608      	mov	r0, r1
 8006434:	b141      	cbz	r1, 8006448 <__ascii_wctomb+0x18>
 8006436:	2aff      	cmp	r2, #255	@ 0xff
 8006438:	d904      	bls.n	8006444 <__ascii_wctomb+0x14>
 800643a:	228a      	movs	r2, #138	@ 0x8a
 800643c:	f04f 30ff 	mov.w	r0, #4294967295
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	4770      	bx	lr
 8006444:	2001      	movs	r0, #1
 8006446:	700a      	strb	r2, [r1, #0]
 8006448:	4770      	bx	lr
	...

0800644c <fiprintf>:
 800644c:	b40e      	push	{r1, r2, r3}
 800644e:	b503      	push	{r0, r1, lr}
 8006450:	4601      	mov	r1, r0
 8006452:	ab03      	add	r3, sp, #12
 8006454:	4805      	ldr	r0, [pc, #20]	@ (800646c <fiprintf+0x20>)
 8006456:	f853 2b04 	ldr.w	r2, [r3], #4
 800645a:	6800      	ldr	r0, [r0, #0]
 800645c:	9301      	str	r3, [sp, #4]
 800645e:	f7ff fd31 	bl	8005ec4 <_vfiprintf_r>
 8006462:	b002      	add	sp, #8
 8006464:	f85d eb04 	ldr.w	lr, [sp], #4
 8006468:	b003      	add	sp, #12
 800646a:	4770      	bx	lr
 800646c:	20000018 	.word	0x20000018

08006470 <__swhatbuf_r>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	460c      	mov	r4, r1
 8006474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006478:	4615      	mov	r5, r2
 800647a:	2900      	cmp	r1, #0
 800647c:	461e      	mov	r6, r3
 800647e:	b096      	sub	sp, #88	@ 0x58
 8006480:	da0c      	bge.n	800649c <__swhatbuf_r+0x2c>
 8006482:	89a3      	ldrh	r3, [r4, #12]
 8006484:	2100      	movs	r1, #0
 8006486:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800648a:	bf14      	ite	ne
 800648c:	2340      	movne	r3, #64	@ 0x40
 800648e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006492:	2000      	movs	r0, #0
 8006494:	6031      	str	r1, [r6, #0]
 8006496:	602b      	str	r3, [r5, #0]
 8006498:	b016      	add	sp, #88	@ 0x58
 800649a:	bd70      	pop	{r4, r5, r6, pc}
 800649c:	466a      	mov	r2, sp
 800649e:	f000 f849 	bl	8006534 <_fstat_r>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	dbed      	blt.n	8006482 <__swhatbuf_r+0x12>
 80064a6:	9901      	ldr	r1, [sp, #4]
 80064a8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80064ac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80064b0:	4259      	negs	r1, r3
 80064b2:	4159      	adcs	r1, r3
 80064b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064b8:	e7eb      	b.n	8006492 <__swhatbuf_r+0x22>

080064ba <__smakebuf_r>:
 80064ba:	898b      	ldrh	r3, [r1, #12]
 80064bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064be:	079d      	lsls	r5, r3, #30
 80064c0:	4606      	mov	r6, r0
 80064c2:	460c      	mov	r4, r1
 80064c4:	d507      	bpl.n	80064d6 <__smakebuf_r+0x1c>
 80064c6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80064ca:	6023      	str	r3, [r4, #0]
 80064cc:	6123      	str	r3, [r4, #16]
 80064ce:	2301      	movs	r3, #1
 80064d0:	6163      	str	r3, [r4, #20]
 80064d2:	b003      	add	sp, #12
 80064d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064d6:	466a      	mov	r2, sp
 80064d8:	ab01      	add	r3, sp, #4
 80064da:	f7ff ffc9 	bl	8006470 <__swhatbuf_r>
 80064de:	9f00      	ldr	r7, [sp, #0]
 80064e0:	4605      	mov	r5, r0
 80064e2:	4639      	mov	r1, r7
 80064e4:	4630      	mov	r0, r6
 80064e6:	f7ff f8b9 	bl	800565c <_malloc_r>
 80064ea:	b948      	cbnz	r0, 8006500 <__smakebuf_r+0x46>
 80064ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064f0:	059a      	lsls	r2, r3, #22
 80064f2:	d4ee      	bmi.n	80064d2 <__smakebuf_r+0x18>
 80064f4:	f023 0303 	bic.w	r3, r3, #3
 80064f8:	f043 0302 	orr.w	r3, r3, #2
 80064fc:	81a3      	strh	r3, [r4, #12]
 80064fe:	e7e2      	b.n	80064c6 <__smakebuf_r+0xc>
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800650a:	81a3      	strh	r3, [r4, #12]
 800650c:	9b01      	ldr	r3, [sp, #4]
 800650e:	6020      	str	r0, [r4, #0]
 8006510:	b15b      	cbz	r3, 800652a <__smakebuf_r+0x70>
 8006512:	4630      	mov	r0, r6
 8006514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006518:	f000 f81e 	bl	8006558 <_isatty_r>
 800651c:	b128      	cbz	r0, 800652a <__smakebuf_r+0x70>
 800651e:	89a3      	ldrh	r3, [r4, #12]
 8006520:	f023 0303 	bic.w	r3, r3, #3
 8006524:	f043 0301 	orr.w	r3, r3, #1
 8006528:	81a3      	strh	r3, [r4, #12]
 800652a:	89a3      	ldrh	r3, [r4, #12]
 800652c:	431d      	orrs	r5, r3
 800652e:	81a5      	strh	r5, [r4, #12]
 8006530:	e7cf      	b.n	80064d2 <__smakebuf_r+0x18>
	...

08006534 <_fstat_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	2300      	movs	r3, #0
 8006538:	4d06      	ldr	r5, [pc, #24]	@ (8006554 <_fstat_r+0x20>)
 800653a:	4604      	mov	r4, r0
 800653c:	4608      	mov	r0, r1
 800653e:	4611      	mov	r1, r2
 8006540:	602b      	str	r3, [r5, #0]
 8006542:	f7fb facf 	bl	8001ae4 <_fstat>
 8006546:	1c43      	adds	r3, r0, #1
 8006548:	d102      	bne.n	8006550 <_fstat_r+0x1c>
 800654a:	682b      	ldr	r3, [r5, #0]
 800654c:	b103      	cbz	r3, 8006550 <_fstat_r+0x1c>
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	bd38      	pop	{r3, r4, r5, pc}
 8006552:	bf00      	nop
 8006554:	20000494 	.word	0x20000494

08006558 <_isatty_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	2300      	movs	r3, #0
 800655c:	4d05      	ldr	r5, [pc, #20]	@ (8006574 <_isatty_r+0x1c>)
 800655e:	4604      	mov	r4, r0
 8006560:	4608      	mov	r0, r1
 8006562:	602b      	str	r3, [r5, #0]
 8006564:	f7fb facd 	bl	8001b02 <_isatty>
 8006568:	1c43      	adds	r3, r0, #1
 800656a:	d102      	bne.n	8006572 <_isatty_r+0x1a>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	b103      	cbz	r3, 8006572 <_isatty_r+0x1a>
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	20000494 	.word	0x20000494

08006578 <abort>:
 8006578:	2006      	movs	r0, #6
 800657a:	b508      	push	{r3, lr}
 800657c:	f000 f82c 	bl	80065d8 <raise>
 8006580:	2001      	movs	r0, #1
 8006582:	f7fb fa60 	bl	8001a46 <_exit>

08006586 <_raise_r>:
 8006586:	291f      	cmp	r1, #31
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4605      	mov	r5, r0
 800658c:	460c      	mov	r4, r1
 800658e:	d904      	bls.n	800659a <_raise_r+0x14>
 8006590:	2316      	movs	r3, #22
 8006592:	6003      	str	r3, [r0, #0]
 8006594:	f04f 30ff 	mov.w	r0, #4294967295
 8006598:	bd38      	pop	{r3, r4, r5, pc}
 800659a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800659c:	b112      	cbz	r2, 80065a4 <_raise_r+0x1e>
 800659e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065a2:	b94b      	cbnz	r3, 80065b8 <_raise_r+0x32>
 80065a4:	4628      	mov	r0, r5
 80065a6:	f000 f831 	bl	800660c <_getpid_r>
 80065aa:	4622      	mov	r2, r4
 80065ac:	4601      	mov	r1, r0
 80065ae:	4628      	mov	r0, r5
 80065b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065b4:	f000 b818 	b.w	80065e8 <_kill_r>
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d00a      	beq.n	80065d2 <_raise_r+0x4c>
 80065bc:	1c59      	adds	r1, r3, #1
 80065be:	d103      	bne.n	80065c8 <_raise_r+0x42>
 80065c0:	2316      	movs	r3, #22
 80065c2:	6003      	str	r3, [r0, #0]
 80065c4:	2001      	movs	r0, #1
 80065c6:	e7e7      	b.n	8006598 <_raise_r+0x12>
 80065c8:	2100      	movs	r1, #0
 80065ca:	4620      	mov	r0, r4
 80065cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80065d0:	4798      	blx	r3
 80065d2:	2000      	movs	r0, #0
 80065d4:	e7e0      	b.n	8006598 <_raise_r+0x12>
	...

080065d8 <raise>:
 80065d8:	4b02      	ldr	r3, [pc, #8]	@ (80065e4 <raise+0xc>)
 80065da:	4601      	mov	r1, r0
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	f7ff bfd2 	b.w	8006586 <_raise_r>
 80065e2:	bf00      	nop
 80065e4:	20000018 	.word	0x20000018

080065e8 <_kill_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	2300      	movs	r3, #0
 80065ec:	4d06      	ldr	r5, [pc, #24]	@ (8006608 <_kill_r+0x20>)
 80065ee:	4604      	mov	r4, r0
 80065f0:	4608      	mov	r0, r1
 80065f2:	4611      	mov	r1, r2
 80065f4:	602b      	str	r3, [r5, #0]
 80065f6:	f7fb fa16 	bl	8001a26 <_kill>
 80065fa:	1c43      	adds	r3, r0, #1
 80065fc:	d102      	bne.n	8006604 <_kill_r+0x1c>
 80065fe:	682b      	ldr	r3, [r5, #0]
 8006600:	b103      	cbz	r3, 8006604 <_kill_r+0x1c>
 8006602:	6023      	str	r3, [r4, #0]
 8006604:	bd38      	pop	{r3, r4, r5, pc}
 8006606:	bf00      	nop
 8006608:	20000494 	.word	0x20000494

0800660c <_getpid_r>:
 800660c:	f7fb ba04 	b.w	8001a18 <_getpid>

08006610 <_init>:
 8006610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006612:	bf00      	nop
 8006614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006616:	bc08      	pop	{r3}
 8006618:	469e      	mov	lr, r3
 800661a:	4770      	bx	lr

0800661c <_fini>:
 800661c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661e:	bf00      	nop
 8006620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006622:	bc08      	pop	{r3}
 8006624:	469e      	mov	lr, r3
 8006626:	4770      	bx	lr
